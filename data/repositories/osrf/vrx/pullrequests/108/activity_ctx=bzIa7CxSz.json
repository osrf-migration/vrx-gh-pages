{"pagelen": 50, "values": [{"update": {"description": "**Description of Issue**\r\n\r\nWe\u2019d like to extend both the [usv\\_gazebo\\_thrust\\_plugin](#!/osrf/vrx/src/default/usv_gazebo_plugins/src/usv_gazebo_thrust_plugin.cc) Gazebo model plugin and the [engine.xacro](#!/osrf/vrx/src/default/wamv_description/urdf/engine.xacro) model so that users can change the thrust angle via a ROS API.\r\n\r\n* The thrust plugin would subscribe to a ROS topic, e.g., \u201cleft\\_ thrust\\_angle\u201d, that would set the angular displacement of the thruster.\r\n\r\n    * The angle, in radians, would be relative to the nominal thruster attitude.\r\n    \r\n* The configuration should allow for angle limits \\(e.g., \\+/- pi/2\\) to be set.\r\n* A new rotation joint should be included in the engine model to facilitate the rotation\r\n\r\n    * The plugin would also set the joint rotation so that the visual model reflects the vectored thrust.\r\n    \r\n\r\n**Design Questions**\r\n\r\n1. How should max angle be set? Currently done by changing `<maxAngle>NUMBER</maxAngle>` in `wamv_gazebo_thruster_config.xacro`\r\n2. Thrust commands currently have a `lastCmdTime` to track the time of last command signal and a `cmdTimeout` to describe how long each command should last for before not putting a force anymore. Should there be something similar for angle? eg. if publish `left_thrust_angle=pi/3` and then stop publishing angle, should the angle remain pi/3 until set otherwise, or should it \u201creset\u201d back to `left_thrust_angle=0` if it does not receive angle messages? Currently there is no \u201creset\u201d, it remains at the last published angle\r\n3. What to do if |published angle| > maxAngle? eg. if publish `left_thrust_angle=5*pi/4`, but we have `<maxAngle>${pi/2}</maxAngle>`, what should it do? Output error/warning message and ignore message \\(keep same angle as it previously was\\)? Or clip it \\(if it is >pi/2, then clip to pi/2. If it is <-pi/2, then clip to -pi/2\\).\r\n4. If published angle = 7\\*pi/4 and maxAngle=pi/2, should this be interpreted as -pi/4 or clipped to pi/2 or output error message and ignore? Currently doing clipping.", "title": "Issue#96 Add Thrust Angle and Rotation Joint", "destination": {"commit": {"hash": "f66016894202", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/f66016894202.json"}, "html": {"href": "#!/osrf/vrx/commits/f66016894202"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "b71166b158d6", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/b71166b158d6.json"}, "html": {"href": "#!/osrf/vrx/commits/b71166b158d6"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "Issue#96-add-vector-thrust"}}, "state": "OPEN", "author": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "date": "2019-06-13T23:43:08.289693+00:00"}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"update": {"description": "**Description of Issue**\r\n\r\nWe\u2019d like to extend both the [usv\\_gazebo\\_thrust\\_plugin](#!/osrf/vrx/src/default/usv_gazebo_plugins/src/usv_gazebo_thrust_plugin.cc) Gazebo model plugin and the [engine.xacro](#!/osrf/vrx/src/default/wamv_description/urdf/engine.xacro) model so that users can change the thrust angle via a ROS API.\r\n\r\n* The thrust plugin would subscribe to a ROS topic, e.g., \u201cleft\\_ thrust\\_angle\u201d, that would set the angular displacement of the thruster.\r\n\r\n    * The angle, in radians, would be relative to the nominal thruster attitude.\r\n    \r\n* The configuration should allow for angle limits \\(e.g., \\+/- pi/2\\) to be set.\r\n* A new rotation joint should be included in the engine model to facilitate the rotation\r\n\r\n    * The plugin would also set the joint rotation so that the visual model reflects the vectored thrust.\r\n    \r\n\r\n**Design Questions**\r\n\r\n1. How should max angle be set? Currently done by changing `<maxAngle>NUMBER</maxAngle>` in `wamv_gazebo_thruster_config.xacro`\r\n2. Thrust commands currently have a `lastCmdTime` to track the time of last command signal and a `cmdTimeout` to describe how long each command should last for before not putting a force anymore. Should there be something similar for angle? eg. if publish `left_thrust_angle=pi/3` and then stop publishing angle, should the angle remain pi/3 until set otherwise, or should it \u201creset\u201d back to `left_thrust_angle=0` if it does not receive angle messages? Currently there is no \u201creset\u201d, it remains at the last published angle\r\n3. What to do if |published angle| > maxAngle? eg. if publish `left_thrust_angle=5*pi/4`, but we have `<maxAngle>${pi/2}</maxAngle>`, what should it do? Output error/warning message and ignore message \\(keep same angle as it previously was\\)? Or clip it \\(if it is >pi/2, then clip to pi/2. If it is <-pi/2, then clip to -pi/2\\).\r\n4. If published angle = 7\\*pi/4 and maxAngle=pi/2, should this be interpreted as -pi/4 or clipped to pi/2 or output error message and ignore? Currently doing clipping.", "title": "Issue#96 Add Thrust Angle and Rotation Joint", "destination": {"commit": {"hash": "f66016894202", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/f66016894202.json"}, "html": {"href": "#!/osrf/vrx/commits/f66016894202"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "048d3b524d1e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/048d3b524d1e.json"}, "html": {"href": "#!/osrf/vrx/commits/048d3b524d1e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "Issue#96-add-vector-thrust"}}, "state": "OPEN", "author": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "date": "2019-06-13T23:41:56.377699+00:00"}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105505596.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105505596"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "Could you add a demonstration tutorial to illustrate this new functionality?  I started a new page linked off of [#!/osrf/vrx/wiki/tutorials](#!/osrf/vrx/wiki/tutorials) - under Thruster Articulation.\n\nAlso, would it be within the scope of this PR to extend the teleop functionality to allow for controlling thruster angle \\(see [Driving tutorial](#!/osrf/vrx/wiki/tutorials/Driving)\\). It would be slick if we could use a gamepad to control the thruster commands and their angle.  I\u2019m imagining to keep it simple you\u2019d have one axis of the gamepad send ROS commands to both of the thruster angle topics - so the two thrusters would move in unison.  \n\nOtherwise, looks great to me.  I think the teams will be excited to have this new function.", "markup": "markdown", "html": "<p>Could you add a demonstration tutorial to illustrate this new functionality?  I started a new page linked off of <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/wiki/tutorials\" rel=\"nofollow\">#!/osrf/vrx/wiki/tutorials</a> - under Thruster Articulation.</p>\n<p>Also, would it be within the scope of this PR to extend the teleop functionality to allow for controlling thruster angle (see <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/wiki/tutorials/Driving\" rel=\"nofollow\">Driving tutorial</a>). It would be slick if we could use a gamepad to control the thruster commands and their angle.  I\u2019m imagining to keep it simple you\u2019d have one axis of the gamepad send ROS commands to both of the thruster angle topics - so the two thrusters would move in unison.  </p>\n<p>Otherwise, looks great to me.  I think the teams will be excited to have this new function.</p>", "type": "rendered"}, "created_on": "2019-06-12T21:36:28.714901+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": "2019-06-12T21:36:28.721354+00:00", "type": "pullrequest_comment", "id": 105505596}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105505140.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105505140"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "Could we add a boolean parameter <enableAngle> - if true, would allow changing thrust angle via ROS API - if false, would disable this functionality \\(fixed thrust angle\\)?   The default would be false.\n\nThis may be an important capability as we define the set of \u2018standard\u2019 propulsion configurations for VRX.  For example, we may not what them to have four thrusters that all articulate.  ", "markup": "markdown", "html": "<p>Could we add a boolean parameter &lt;enableAngle&gt; - if true, would allow changing thrust angle via ROS API - if false, would disable this functionality (fixed thrust angle)?   The default would be false.</p>\n<p>This may be an important capability as we define the set of \u2018standard\u2019 propulsion configurations for VRX.  For example, we may not what them to have four thrusters that all articulate.  </p>", "type": "rendered"}, "created_on": "2019-06-12T21:31:17.431702+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": "2019-06-12T21:31:17.439168+00:00", "type": "pullrequest_comment", "id": 105505140}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105504345.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105504345"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "Probably just my opinion, but giving the context, for this logging would recommend using gzwarn, gzerr, gzdbg, etc. instead of the the ROS logging. I think that is consistent with the  SDF parsing in the other plugins.", "markup": "markdown", "html": "<p>Probably just my opinion, but giving the context, for this logging would recommend using gzwarn, gzerr, gzdbg, etc. instead of the the ROS logging. I think that is consistent with the  SDF parsing in the other plugins.</p>", "type": "rendered"}, "created_on": "2019-06-12T21:21:41.625904+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "inline": {}, "updated_on": "2019-06-12T21:21:41.637007+00:00", "type": "pullrequest_comment", "id": 105504345}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105503999.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105503999"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "Should add <maxAngle> tags to example.", "markup": "markdown", "html": "<p>Should add &lt;maxAngle&gt; tags to example.</p>", "type": "rendered"}, "created_on": "2019-06-12T21:18:00.211938+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "inline": {}, "updated_on": "2019-06-12T21:18:00.219992+00:00", "type": "pullrequest_comment", "id": 105503999}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105503761.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105503761"}}, "parent": {"id": 105167789, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105167789.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105167789"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "* Setting the maxAngle parameter seems clear and valid to me.  I think clipping/clamp is the most intuitive behavior.\n* Based on a quick visual check the rotation joint looks correct to me.\n\n", "markup": "markdown", "html": "<ul>\n<li>Setting the maxAngle parameter seems clear and valid to me.  I think clipping/clamp is the most intuitive behavior.</li>\n<li>Based on a quick visual check the rotation joint looks correct to me.</li>\n</ul>", "type": "rendered"}, "created_on": "2019-06-12T21:15:49.510978+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": "2019-06-12T21:15:49.522077+00:00", "type": "pullrequest_comment", "id": 105503761}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105503495.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105503495"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "Should add <maxAngle> as an optional topic.  Looks like default is pi/2.", "markup": "markdown", "html": "<p>Should add &lt;maxAngle&gt; as an optional topic.  Looks like default is pi/2.</p>", "type": "rendered"}, "created_on": "2019-06-12T21:13:02.409483+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "inline": {}, "updated_on": "2019-06-12T21:13:02.469634+00:00", "type": "pullrequest_comment", "id": 105503495}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105503243.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105503243"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "* Should clarify that <cmdTopic> is the thrust command , typically within \\[-1.0 , 1.0\\]\n* Should probably add <angleTopic> and description as a required topic.\n\n", "markup": "markdown", "html": "<ul>\n<li>Should clarify that &lt;cmdTopic&gt; is the thrust command , typically within [-1.0 , 1.0]</li>\n<li>Should probably add &lt;angleTopic&gt; and description as a required topic.</li>\n</ul>", "type": "rendered"}, "created_on": "2019-06-12T21:10:29.503808+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "inline": {}, "updated_on": "2019-06-12T21:10:29.510733+00:00", "type": "pullrequest_comment", "id": 105503243}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105502518.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105502518"}}, "parent": {"id": 105167723, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105167723.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105167723"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "* There is a lint tool for Gazebo - see `sh tools/code_check.sh ` at [http://gazebosim.org/tutorials?tut=contrib\\_code&cat=development#Style](http://gazebosim.org/tutorials?tut=contrib_code&cat=development#Style)  \n  We\u2019ve been toying with the idea of customizing that and including it within VRX as a way to help with style consistency.\n* Doing a quick visual check the PID settings look good to me.  They are definitely snappy - maybe quicker than a typical electromechanical implementation, but I think that is a good place to start.\n\n      \n\n\n\n", "markup": "markdown", "html": "<ul>\n<li>There is a lint tool for Gazebo - see <code>sh tools/code_check.sh</code> at <a data-is-external-link=\"true\" href=\"http://gazebosim.org/tutorials?tut=contrib_code&amp;cat=development#Style\" rel=\"nofollow\">http://gazebosim.org/tutorials?tut=contrib_code&amp;cat=development#Style</a><br />\n  We\u2019ve been toying with the idea of customizing that and including it within VRX as a way to help with style consistency.</li>\n<li>Doing a quick visual check the PID settings look good to me.  They are definitely snappy - maybe quicker than a typical electromechanical implementation, but I think that is a good place to start.</li>\n</ul>", "type": "rendered"}, "created_on": "2019-06-12T21:03:11.407405+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": "2019-06-12T21:03:11.418012+00:00", "type": "pullrequest_comment", "id": 105502518}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105501191.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105501191"}}, "parent": {"id": 105167662, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105167662.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105167662"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "Agreed - I like the idea of having a PID controller for the joint as that is analogous to the physical implementation.  Theoretically folks could re-tune the PID gains to get representative of the empirical physical response.", "markup": "markdown", "html": "<p>Agreed - I like the idea of having a PID controller for the joint as that is analogous to the physical implementation.  Theoretically folks could re-tune the PID gains to get representative of the empirical physical response.</p>", "type": "rendered"}, "created_on": "2019-06-12T20:49:48.410107+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": "2019-06-12T20:49:48.420342+00:00", "type": "pullrequest_comment", "id": 105501191}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105167789.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105167789"}}, "parent": {"id": 105167723, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105167723.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105167723"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "* Is the method of setting the maxAngle clear and valid?\n* Is the rotation joint visually valid?\n\n", "markup": "markdown", "html": "<ul>\n<li>Is the method of setting the maxAngle clear and valid?</li>\n<li>Is the rotation joint visually valid?</li>\n</ul>", "type": "rendered"}, "created_on": "2019-06-11T00:27:27.818767+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-11T00:27:27.932613+00:00", "type": "pullrequest_comment", "id": 105167789}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105167723.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105167723"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "This PR should be complete. Please let me know if there is any room for improvement. \\(is there a C\\+\\+ lint tool to ensure my changes match the desired style?\\) \\(is the PID setting of angle valid?\\)", "markup": "markdown", "html": "<p>This PR should be complete. Please let me know if there is any room for improvement. (is there a C++ lint tool to ensure my changes match the desired style?) (is the PID setting of angle valid?)</p>", "type": "rendered"}, "created_on": "2019-06-11T00:26:03.136362+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-11T00:26:03.189764+00:00", "type": "pullrequest_comment", "id": 105167723}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105167662.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105167662"}}, "parent": {"id": 105024047, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105024047.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105024047"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "I have implemented the PID force method in [0437021](#!/osrf/vrx/commits/043702102adc09fd8168593b63ee96b9f3e5fee1?at=default). I tuned the PID controller to respond quite quickly. Overall I believe it is the more \u201ccorrect\u201d solution, as SetPosition\\(\\) for the old Gazebo version might reset the velocity of the joint to 0 each update.", "markup": "markdown", "html": "<p>I have implemented the PID force method in <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/commits/043702102adc09fd8168593b63ee96b9f3e5fee1?at=default\" rel=\"nofollow\">0437021</a>. I tuned the PID controller to respond quite quickly. Overall I believe it is the more \u201ccorrect\u201d solution, as SetPosition() for the old Gazebo version might reset the velocity of the joint to 0 each update.</p>", "type": "rendered"}, "created_on": "2019-06-11T00:24:33.924734+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-11T00:24:33.933596+00:00", "type": "pullrequest_comment", "id": 105167662}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105167590.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105167590"}}, "parent": {"id": 105024345, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105024345.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105024345"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "Implemented PID force method, works quite well.", "markup": "markdown", "html": "<p>Implemented PID force method, works quite well.</p>", "type": "rendered"}, "created_on": "2019-06-11T00:23:03.127093+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-11T00:23:03.138339+00:00", "type": "pullrequest_comment", "id": 105167590}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"update": {"description": "**Description of Issue**\r\n\r\nWe\u2019d like to extend both the [usv\\_gazebo\\_thrust\\_plugin](#!/osrf/vrx/src/default/usv_gazebo_plugins/src/usv_gazebo_thrust_plugin.cc) Gazebo model plugin and the [engine.xacro](#!/osrf/vrx/src/default/wamv_description/urdf/engine.xacro) model so that users can change the thrust angle via a ROS API.\r\n\r\n* The thrust plugin would subscribe to a ROS topic, e.g., \u201cleft\\_ thrust\\_angle\u201d, that would set the angular displacement of the thruster.\r\n\r\n    * The angle, in radians, would be relative to the nominal thruster attitude.\r\n    \r\n* The configuration should allow for angle limits \\(e.g., \\+/- pi/2\\) to be set.\r\n* A new rotation joint should be included in the engine model to facilitate the rotation\r\n\r\n    * The plugin would also set the joint rotation so that the visual model reflects the vectored thrust.\r\n    \r\n\r\n**Design Questions**\r\n\r\n1. How should max angle be set? Currently done by changing `<maxAngle>NUMBER</maxAngle>` in `wamv_gazebo_thruster_config.xacro`\r\n2. Thrust commands currently have a `lastCmdTime` to track the time of last command signal and a `cmdTimeout` to describe how long each command should last for before not putting a force anymore. Should there be something similar for angle? eg. if publish `left_thrust_angle=pi/3` and then stop publishing angle, should the angle remain pi/3 until set otherwise, or should it \u201creset\u201d back to `left_thrust_angle=0` if it does not receive angle messages? Currently there is no \u201creset\u201d, it remains at the last published angle\r\n3. What to do if |published angle| > maxAngle? eg. if publish `left_thrust_angle=5*pi/4`, but we have `<maxAngle>${pi/2}</maxAngle>`, what should it do? Output error/warning message and ignore message \\(keep same angle as it previously was\\)? Or clip it \\(if it is >pi/2, then clip to pi/2. If it is <-pi/2, then clip to -pi/2\\).\r\n4. If published angle = 7\\*pi/4 and maxAngle=pi/2, should this be interpreted as -pi/4 or clipped to pi/2 or output error message and ignore? Currently doing clipping.", "title": "Issue#96 Add Thrust Angle and Rotation Joint", "destination": {"commit": {"hash": "5b8b5fa0e650", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/5b8b5fa0e650.json"}, "html": {"href": "#!/osrf/vrx/commits/5b8b5fa0e650"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "28c7583fbddb", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/28c7583fbddb.json"}, "html": {"href": "#!/osrf/vrx/commits/28c7583fbddb"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "Issue#96-add-vector-thrust"}}, "state": "OPEN", "author": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "date": "2019-06-10T23:58:52.059202+00:00"}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"update": {"description": "**Description of Issue**\r\n\r\nWe\u2019d like to extend both the [usv\\_gazebo\\_thrust\\_plugin](#!/osrf/vrx/src/default/usv_gazebo_plugins/src/usv_gazebo_thrust_plugin.cc) Gazebo model plugin and the [engine.xacro](#!/osrf/vrx/src/default/wamv_description/urdf/engine.xacro) model so that users can change the thrust angle via a ROS API.\r\n\r\n* The thrust plugin would subscribe to a ROS topic, e.g., \u201cleft\\_ thrust\\_angle\u201d, that would set the angular displacement of the thruster.\r\n\r\n    * The angle, in radians, would be relative to the nominal thruster attitude.\r\n    \r\n* The configuration should allow for angle limits \\(e.g., \\+/- pi/2\\) to be set.\r\n* A new rotation joint should be included in the engine model to facilitate the rotation\r\n\r\n    * The plugin would also set the joint rotation so that the visual model reflects the vectored thrust.\r\n    \r\n\r\n**Design Questions**\r\n\r\n1. How should max angle be set? Currently done by changing `<maxAngle>NUMBER</maxAngle>` in `wamv_gazebo_thruster_config.xacro`\r\n2. Thrust commands currently have a `lastCmdTime` to track the time of last command signal and a `cmdTimeout` to describe how long each command should last for before not putting a force anymore. Should there be something similar for angle? eg. if publish `left_thrust_angle=pi/3` and then stop publishing angle, should the angle remain pi/3 until set otherwise, or should it \u201creset\u201d back to `left_thrust_angle=0` if it does not receive angle messages? Currently there is no \u201creset\u201d, it remains at the last published angle\r\n3. What to do if |published angle| > maxAngle? eg. if publish `left_thrust_angle=5*pi/4`, but we have `<maxAngle>${pi/2}</maxAngle>`, what should it do? Output error/warning message and ignore message \\(keep same angle as it previously was\\)? Or clip it \\(if it is >pi/2, then clip to pi/2. If it is <-pi/2, then clip to -pi/2\\).\r\n4. If published angle = 7\\*pi/4 and maxAngle=pi/2, should this be interpreted as -pi/4 or clipped to pi/2 or output error message and ignore? Currently doing clipping.", "title": "Issue#96 Add Thrust Angle and Rotation Joint", "destination": {"commit": {"hash": "5b8b5fa0e650", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/5b8b5fa0e650.json"}, "html": {"href": "#!/osrf/vrx/commits/5b8b5fa0e650"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "01648b42a6f9", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/01648b42a6f9.json"}, "html": {"href": "#!/osrf/vrx/commits/01648b42a6f9"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "Issue#96-add-vector-thrust"}}, "state": "OPEN", "author": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "date": "2019-06-10T23:52:04.569471+00:00"}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"update": {"description": "**Description of Issue**\r\n\r\nWe\u2019d like to extend both the [usv\\_gazebo\\_thrust\\_plugin](#!/osrf/vrx/src/default/usv_gazebo_plugins/src/usv_gazebo_thrust_plugin.cc) Gazebo model plugin and the [engine.xacro](#!/osrf/vrx/src/default/wamv_description/urdf/engine.xacro) model so that users can change the thrust angle via a ROS API.\r\n\r\n* The thrust plugin would subscribe to a ROS topic, e.g., \u201cleft\\_ thrust\\_angle\u201d, that would set the angular displacement of the thruster.\r\n\r\n    * The angle, in radians, would be relative to the nominal thruster attitude.\r\n    \r\n* The configuration should allow for angle limits \\(e.g., \\+/- pi/2\\) to be set.\r\n* A new rotation joint should be included in the engine model to facilitate the rotation\r\n\r\n    * The plugin would also set the joint rotation so that the visual model reflects the vectored thrust.\r\n    \r\n\r\n**Design Questions**\r\n\r\n1. How should max angle be set? Currently done by changing `<maxAngle>NUMBER</maxAngle>` in `wamv_gazebo_thruster_config.xacro`\r\n2. Thrust commands currently have a `lastCmdTime` to track the time of last command signal and a `cmdTimeout` to describe how long each command should last for before not putting a force anymore. Should there be something similar for angle? eg. if publish `left_thrust_angle=pi/3` and then stop publishing angle, should the angle remain pi/3 until set otherwise, or should it \u201creset\u201d back to `left_thrust_angle=0` if it does not receive angle messages? Currently there is no \u201creset\u201d, it remains at the last published angle\r\n3. What to do if |published angle| > maxAngle? eg. if publish `left_thrust_angle=5*pi/4`, but we have `<maxAngle>${pi/2}</maxAngle>`, what should it do? Output error/warning message and ignore message \\(keep same angle as it previously was\\)? Or clip it \\(if it is >pi/2, then clip to pi/2. If it is <-pi/2, then clip to -pi/2\\).\r\n4. If published angle = 7\\*pi/4 and maxAngle=pi/2, should this be interpreted as -pi/4 or clipped to pi/2 or output error message and ignore? Currently doing clipping.", "title": "Issue#96 Add Thrust Angle and Rotation Joint", "destination": {"commit": {"hash": "5b8b5fa0e650", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/5b8b5fa0e650.json"}, "html": {"href": "#!/osrf/vrx/commits/5b8b5fa0e650"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "043702102adc", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/043702102adc.json"}, "html": {"href": "#!/osrf/vrx/commits/043702102adc"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "Issue#96-add-vector-thrust"}}, "state": "OPEN", "author": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "date": "2019-06-10T23:38:36.706618+00:00"}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105024345.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105024345"}}, "parent": {"id": 105023221, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105023221.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105023221"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "I have tried using `SetAngle()` but it did not work either. \n\n```\n      // Set the thruster engine joint angle\n      #if GAZEBO_MAJOR_VERSION >= 8\n        this->thrusters[i].engineJoint->SetPosition(0, this->thrusters[i].currAngle, true);\n      #else\n        this->thrusters[i].engineJoint->SetAngle(0, gazebo::math::Angle(this->thrusters[i].currAngle));\n      #endif\n```\n\nI ended up using `SetPosition()`, which worked\n\n```\n      // Set the thruster engine joint angle\n      #if GAZEBO_MAJOR_VERSION >= 8\n        this->thrusters[i].engineJoint->SetPosition(0, this->thrusters[i].currAngle, true);\n      #else\n        this->thrusters[i].engineJoint->SetPosition(0, this->thrusters[i].currAngle);\n      #endif\n```\n\nbut I am not sure if the stationary effect still happens. I will try exploring the PID force method, which would fix this issue.", "markup": "markdown", "html": "<p>I have tried using <code>SetAngle()</code> but it did not work either. </p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"o\">//</span> <span class=\"nt\">Set</span> <span class=\"nt\">the</span> <span class=\"nt\">thruster</span> <span class=\"nt\">engine</span> <span class=\"nt\">joint</span> <span class=\"nt\">angle</span>\n      <span class=\"p\">#</span><span class=\"nn\">if</span> <span class=\"nt\">GAZEBO_MAJOR_VERSION</span> <span class=\"o\">&gt;=</span> <span class=\"nt\">8</span>\n        <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">thrusters</span><span class=\"cp\">[</span><span class=\"nx\">i</span><span class=\"cp\">]</span><span class=\"p\">.</span><span class=\"nc\">engineJoint-</span><span class=\"o\">&gt;</span><span class=\"nt\">SetPosition</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"o\">,</span> <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">thrusters</span><span class=\"cp\">[</span><span class=\"nx\">i</span><span class=\"cp\">]</span><span class=\"p\">.</span><span class=\"nc\">currAngle</span><span class=\"o\">,</span> <span class=\"nt\">true</span><span class=\"o\">);</span>\n      <span class=\"p\">#</span><span class=\"nn\">else</span>\n        <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">thrusters</span><span class=\"cp\">[</span><span class=\"nx\">i</span><span class=\"cp\">]</span><span class=\"p\">.</span><span class=\"nc\">engineJoint-</span><span class=\"o\">&gt;</span><span class=\"nt\">SetAngle</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"o\">,</span> <span class=\"nt\">gazebo</span><span class=\"p\">::</span><span class=\"nd\">math</span><span class=\"p\">::</span><span class=\"nd\">Angle</span><span class=\"o\">(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">thrusters</span><span class=\"cp\">[</span><span class=\"nx\">i</span><span class=\"cp\">]</span><span class=\"p\">.</span><span class=\"nc\">currAngle</span><span class=\"o\">));</span>\n      <span class=\"p\">#</span><span class=\"nn\">endif</span>\n</pre></div>\n\n\n<p>I ended up using <code>SetPosition()</code>, which worked</p>\n<div class=\"codehilite\"><pre><span></span>      // Set the thruster engine joint angle\n      #if GAZEBO_MAJOR_VERSION &gt;= 8\n        this-&gt;thrusters[i].engineJoint-&gt;SetPosition(0, this-&gt;thrusters[i].currAngle, true);\n      #else\n        this-&gt;thrusters[i].engineJoint-&gt;SetPosition(0, this-&gt;thrusters[i].currAngle);\n      #endif\n</pre></div>\n\n\n<p>but I am not sure if the stationary effect still happens. I will try exploring the PID force method, which would fix this issue.</p>", "type": "rendered"}, "created_on": "2019-06-09T22:38:22.963606+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-09T22:38:22.971907+00:00", "type": "pullrequest_comment", "id": 105024345}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"update": {"description": "**Description of Issue**\r\n\r\nWe\u2019d like to extend both the [usv\\_gazebo\\_thrust\\_plugin](#!/osrf/vrx/src/default/usv_gazebo_plugins/src/usv_gazebo_thrust_plugin.cc) Gazebo model plugin and the [engine.xacro](#!/osrf/vrx/src/default/wamv_description/urdf/engine.xacro) model so that users can change the thrust angle via a ROS API.\r\n\r\n* The thrust plugin would subscribe to a ROS topic, e.g., \u201cleft\\_ thrust\\_angle\u201d, that would set the angular displacement of the thruster.\r\n\r\n    * The angle, in radians, would be relative to the nominal thruster attitude.\r\n    \r\n* The configuration should allow for angle limits \\(e.g., \\+/- pi/2\\) to be set.\r\n* A new rotation joint should be included in the engine model to facilitate the rotation\r\n\r\n    * The plugin would also set the joint rotation so that the visual model reflects the vectored thrust.\r\n    \r\n\r\n**Design Questions**\r\n\r\n1. How should max angle be set? Currently done by changing `<maxAngle>NUMBER</maxAngle>` in `wamv_gazebo_thruster_config.xacro`\r\n2. Thrust commands currently have a `lastCmdTime` to track the time of last command signal and a `cmdTimeout` to describe how long each command should last for before not putting a force anymore. Should there be something similar for angle? eg. if publish `left_thrust_angle=pi/3` and then stop publishing angle, should the angle remain pi/3 until set otherwise, or should it \u201creset\u201d back to `left_thrust_angle=0` if it does not receive angle messages? Currently there is no \u201creset\u201d, it remains at the last published angle\r\n3. What to do if |published angle| > maxAngle? eg. if publish `left_thrust_angle=5*pi/4`, but we have `<maxAngle>${pi/2}</maxAngle>`, what should it do? Output error/warning message and ignore message \\(keep same angle as it previously was\\)? Or clip it \\(if it is >pi/2, then clip to pi/2. If it is <-pi/2, then clip to -pi/2\\).\r\n4. If published angle = 7\\*pi/4 and maxAngle=pi/2, should this be interpreted as -pi/4 or clipped to pi/2 or output error message and ignore? Currently doing clipping.", "title": "Issue#96 Add Thrust Angle and Rotation Joint", "destination": {"commit": {"hash": "5b8b5fa0e650", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/5b8b5fa0e650.json"}, "html": {"href": "#!/osrf/vrx/commits/5b8b5fa0e650"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f7d9e49b98b1", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/f7d9e49b98b1.json"}, "html": {"href": "#!/osrf/vrx/commits/f7d9e49b98b1"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "Issue#96-add-vector-thrust"}}, "state": "OPEN", "author": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "date": "2019-06-09T22:31:11.574473+00:00"}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105024047.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105024047"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "in [http://answers.gazebosim.org/question/14793/how-to-set-a-joint-position-and-and-a-joint-force-at-the-same-time-is-it-feasible-with-the-current-api/](http://answers.gazebosim.org/question/14793/how-to-set-a-joint-position-and-and-a-joint-force-at-the-same-time-is-it-feasible-with-the-current-api), it is mentioned that\n\n_In general, you don't want to use \\`SetPosition\\` on a joint. The \\`SetPosition\\` function bypasses the physics engine, and performs some teleportation of child links. You should apply forces to joints and write a controller to achieve desired joint angles_\n\nI feel that my implementation is working and is all we need, but do you think it is better to use forces with PID control to move joints or simply move them the way I have?\n\nPID control of joints: [http://answers.gazebosim.org/question/2341/set-and-get-position-of-gazebo-model-using-ros-plugin/](http://answers.gazebosim.org/question/2341/set-and-get-position-of-gazebo-model-using-ros-plugin/)", "markup": "markdown", "html": "<p>in <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/14793/how-to-set-a-joint-position-and-and-a-joint-force-at-the-same-time-is-it-feasible-with-the-current-api\" rel=\"nofollow\">http://answers.gazebosim.org/question/14793/how-to-set-a-joint-position-and-and-a-joint-force-at-the-same-time-is-it-feasible-with-the-current-api/</a>, it is mentioned that</p>\n<p><em>In general, you don't want to use `SetPosition` on a joint. The `SetPosition` function bypasses the physics engine, and performs some teleportation of child links. You should apply forces to joints and write a controller to achieve desired joint angles</em></p>\n<p>I feel that my implementation is working and is all we need, but do you think it is better to use forces with PID control to move joints or simply move them the way I have?</p>\n<p>PID control of joints: <a data-is-external-link=\"true\" href=\"http://answers.gazebosim.org/question/2341/set-and-get-position-of-gazebo-model-using-ros-plugin/\" rel=\"nofollow\">http://answers.gazebosim.org/question/2341/set-and-get-position-of-gazebo-model-using-ros-plugin/</a></p>", "type": "rendered"}, "created_on": "2019-06-09T22:17:18.525869+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-09T22:23:52.083837+00:00", "type": "pullrequest_comment", "id": 105024047}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"update": {"description": "**Description of Issue**\r\n\r\nWe\u2019d like to extend both the [usv\\_gazebo\\_thrust\\_plugin](#!/osrf/vrx/src/default/usv_gazebo_plugins/src/usv_gazebo_thrust_plugin.cc) Gazebo model plugin and the [engine.xacro](#!/osrf/vrx/src/default/wamv_description/urdf/engine.xacro) model so that users can change the thrust angle via a ROS API.\r\n\r\n* The thrust plugin would subscribe to a ROS topic, e.g., \u201cleft\\_ thrust\\_angle\u201d, that would set the angular displacement of the thruster.\r\n\r\n    * The angle, in radians, would be relative to the nominal thruster attitude.\r\n    \r\n* The configuration should allow for angle limits \\(e.g., \\+/- pi/2\\) to be set.\r\n* A new rotation joint should be included in the engine model to facilitate the rotation\r\n\r\n    * The plugin would also set the joint rotation so that the visual model reflects the vectored thrust.\r\n    \r\n\r\n**Design Questions**\r\n\r\n1. How should max angle be set? Currently done by changing `<maxAngle>NUMBER</maxAngle>` in `wamv_gazebo_thruster_config.xacro`\r\n2. Thrust commands currently have a `lastCmdTime` to track the time of last command signal and a `cmdTimeout` to describe how long each command should last for before not putting a force anymore. Should there be something similar for angle? eg. if publish `left_thrust_angle=pi/3` and then stop publishing angle, should the angle remain pi/3 until set otherwise, or should it \u201creset\u201d back to `left_thrust_angle=0` if it does not receive angle messages? Currently there is no \u201creset\u201d, it remains at the last published angle\r\n3. What to do if |published angle| > maxAngle? eg. if publish `left_thrust_angle=5*pi/4`, but we have `<maxAngle>${pi/2}</maxAngle>`, what should it do? Output error/warning message and ignore message \\(keep same angle as it previously was\\)? Or clip it \\(if it is >pi/2, then clip to pi/2. If it is <-pi/2, then clip to -pi/2\\).\r\n4. If published angle = 7\\*pi/4 and maxAngle=pi/2, should this be interpreted as -pi/4 or clipped to pi/2 or output error message and ignore? Currently doing clipping.", "title": "Issue#96 Add Thrust Angle and Rotation Joint", "destination": {"commit": {"hash": "5b8b5fa0e650", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/5b8b5fa0e650.json"}, "html": {"href": "#!/osrf/vrx/commits/5b8b5fa0e650"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c6004035dde8", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/c6004035dde8.json"}, "html": {"href": "#!/osrf/vrx/commits/c6004035dde8"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "Issue#96-add-vector-thrust"}}, "state": "OPEN", "author": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "date": "2019-06-09T22:23:12.422492+00:00"}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105023221.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105023221"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "Another TODO is to resolve the build issues. Essentially, Gazebo 7 and 9 seem to use different methods for setting joint angles. I believe:\n\n* Gazebo 7 uses `void gazebo::physics::Joint::SetAngle(unsigned int _index, math::Angle _angle)` OR `virtual bool gazebo::physics::Joint::SetPosition(unsigned int _index, double _position)`\n* Gazebo 9 uses `virtual bool void gazebo::physics::Joint::SetPosition(const unsigned int _index, const double _position, const bool _preserveWorldVelocity=false)`\n\nI need to set `const bool _preserveWorldVelocity` to `true` so that the boat is not stationary \\(maintains its previous velocity. If not set, default false => the boat was immobile\\). I am not sure what behavior happens in Gazebo 7 without having this parameters. The api no longer matches, so I likely need to have a `#if GAZEBO_MAJOR_VERSION >= 8` statement to do this right, but I may need some support ensuring it not only builds but actually works on Gazebo 7. Thank you\n\n[http://osrf-distributions.s3.amazonaws.com/gazebo/api/4.0.0/classgazebo\\_1\\_1physics\\_1\\_1Joint.html#a5dd5194c47634dde3daf11344b120c32](http://osrf-distributions.s3.amazonaws.com/gazebo/api/4.0.0/classgazebo_1_1physics_1_1Joint.html#a5dd5194c47634dde3daf11344b120c32)\n\n[https://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo\\_1\\_1physics\\_1\\_1Joint.html#ad02e021e1745f416f45e13024925714a](https://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1Joint.html#ad02e021e1745f416f45e13024925714a)", "markup": "markdown", "html": "<p>Another TODO is to resolve the build issues. Essentially, Gazebo 7 and 9 seem to use different methods for setting joint angles. I believe:</p>\n<ul>\n<li>Gazebo 7 uses <code>void gazebo::physics::Joint::SetAngle(unsigned int _index, math::Angle _angle)</code> OR <code>virtual bool gazebo::physics::Joint::SetPosition(unsigned int _index, double _position)</code></li>\n<li>Gazebo 9 uses <code>virtual bool void gazebo::physics::Joint::SetPosition(const unsigned int _index, const double _position, const bool _preserveWorldVelocity=false)</code></li>\n</ul>\n<p>I need to set <code>const bool _preserveWorldVelocity</code> to <code>true</code> so that the boat is not stationary (maintains its previous velocity. If not set, default false =&gt; the boat was immobile). I am not sure what behavior happens in Gazebo 7 without having this parameters. The api no longer matches, so I likely need to have a <code>#if GAZEBO_MAJOR_VERSION &gt;= 8</code> statement to do this right, but I may need some support ensuring it not only builds but actually works on Gazebo 7. Thank you</p>\n<p><a data-is-external-link=\"true\" href=\"http://osrf-distributions.s3.amazonaws.com/gazebo/api/4.0.0/classgazebo_1_1physics_1_1Joint.html#a5dd5194c47634dde3daf11344b120c32\" rel=\"nofollow\">http://osrf-distributions.s3.amazonaws.com/gazebo/api/4.0.0/classgazebo_1_1physics_1_1Joint.html#a5dd5194c47634dde3daf11344b120c32</a></p>\n<p><a data-is-external-link=\"true\" href=\"https://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1Joint.html#ad02e021e1745f416f45e13024925714a\" rel=\"nofollow\">https://osrf-distributions.s3.amazonaws.com/gazebo/api/dev/classgazebo_1_1physics_1_1Joint.html#ad02e021e1745f416f45e13024925714a</a></p>", "type": "rendered"}, "created_on": "2019-06-09T21:15:42.492405+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-09T22:04:17.207183+00:00", "type": "pullrequest_comment", "id": 105023221}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"update": {"description": "**Description of Issue**\r\n\r\nWe\u2019d like to extend both the [usv\\_gazebo\\_thrust\\_plugin](#!/osrf/vrx/src/default/usv_gazebo_plugins/src/usv_gazebo_thrust_plugin.cc) Gazebo model plugin and the [engine.xacro](#!/osrf/vrx/src/default/wamv_description/urdf/engine.xacro) model so that users can change the thrust angle via a ROS API.\r\n\r\n* The thrust plugin would subscribe to a ROS topic, e.g., \u201cleft\\_ thrust\\_angle\u201d, that would set the angular displacement of the thruster.\r\n\r\n    * The angle, in radians, would be relative to the nominal thruster attitude.\r\n    \r\n* The configuration should allow for angle limits \\(e.g., \\+/- pi/2\\) to be set.\r\n* A new rotation joint should be included in the engine model to facilitate the rotation\r\n\r\n    * The plugin would also set the joint rotation so that the visual model reflects the vectored thrust.\r\n    \r\n\r\n**Design Questions**\r\n\r\n1. How should max angle be set? Currently done by changing `<maxAngle>NUMBER</maxAngle>` in `wamv_gazebo_thruster_config.xacro`\r\n2. Thrust commands currently have a `lastCmdTime` to track the time of last command signal and a `cmdTimeout` to describe how long each command should last for before not putting a force anymore. Should there be something similar for angle? eg. if publish `left_thrust_angle=pi/3` and then stop publishing angle, should the angle remain pi/3 until set otherwise, or should it \u201creset\u201d back to `left_thrust_angle=0` if it does not receive angle messages? Currently there is no \u201creset\u201d, it remains at the last published angle\r\n3. What to do if |published angle| > maxAngle? eg. if publish `left_thrust_angle=5*pi/4`, but we have `<maxAngle>${pi/2}</maxAngle>`, what should it do? Output error/warning message and ignore message \\(keep same angle as it previously was\\)? Or clip it \\(if it is >pi/2, then clip to pi/2. If it is <-pi/2, then clip to -pi/2\\).\r\n4. If published angle = 7\\*pi/4 and maxAngle=pi/2, should this be interpreted as -pi/4 or clipped to pi/2 or output error message and ignore? Currently doing clipping.", "title": "Issue#96 Add Thrust Angle and Rotation Joint", "destination": {"commit": {"hash": "5b8b5fa0e650", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/5b8b5fa0e650.json"}, "html": {"href": "#!/osrf/vrx/commits/5b8b5fa0e650"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ca84d540be92", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/ca84d540be92.json"}, "html": {"href": "#!/osrf/vrx/commits/ca84d540be92"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "Issue#96-add-vector-thrust"}}, "state": "OPEN", "author": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "date": "2019-06-09T21:55:42.318927+00:00"}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105023080.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105023080"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "**Visually how should the joint rotation look?**\n\nIn [ca84d54](#!/osrf/vrx/commits/ca84d540be92894f13cff217dd3832d20a05b4ba?at=default), the entire engine joint is rotated as shown below \\(using pi/2 maxAngle clipping\\) notice that a \\+ve angle represents a counter-clockwise \\(ccw\\) rotatoin and a -ve angle represents a clockwise \\(cw\\) rotation.\n\n![](data/bitbucket.org/repo/BgXLzgM/images/1428711604-Thrust_Angle_2.png)\n\u200c\n\n![](data/bitbucket.org/repo/BgXLzgM/images/1816953020-Set_Thrust_Angle_1.png)\n\u200c\n\n![](data/bitbucket.org/repo/BgXLzgM/images/3365972240-Thrust_Angle_3.png)\n", "markup": "markdown", "html": "<p><strong>Visually how should the joint rotation look?</strong></p>\n<p>In <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/commits/ca84d540be92894f13cff217dd3832d20a05b4ba?at=default\" rel=\"nofollow\">ca84d54</a>, the entire engine joint is rotated as shown below (using pi/2 maxAngle clipping) notice that a +ve angle represents a counter-clockwise (ccw) rotatoin and a -ve angle represents a clockwise (cw) rotation.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/1428711604-Thrust_Angle_2.png\" />\n\u200c</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/1816953020-Set_Thrust_Angle_1.png\" />\n\u200c</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/3365972240-Thrust_Angle_3.png\" /></p>", "type": "rendered"}, "created_on": "2019-06-09T21:04:10.148732+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-09T21:54:51.162500+00:00", "type": "pullrequest_comment", "id": 105023080}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105023712.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105023712"}}, "parent": {"id": 105023080, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105023080.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105023080"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "I tested leaving the engine link stationary and rotating the propelling link around, but it did not look very good. \n\n![](data/bitbucket.org/repo/BgXLzgM/images/3002633930-Moving_propeller_Joint.png)\nThe issue is because the cylinder part is part of the engine.dae file, not the propeller, as shown below. This could be resolved by removing the cylinder from the engine.dae file and making it a new .dae file that better aligns with the propeller as it moves around, but I do not think it is worth doing. \n\n![](data/bitbucket.org/repo/BgXLzgM/images/162865701-Engine_Joint.png)\n", "markup": "markdown", "html": "<p>I tested leaving the engine link stationary and rotating the propelling link around, but it did not look very good. </p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/3002633930-Moving_propeller_Joint.png\" />\nThe issue is because the cylinder part is part of the engine.dae file, not the propeller, as shown below. This could be resolved by removing the cylinder from the engine.dae file and making it a new .dae file that better aligns with the propeller as it moves around, but I do not think it is worth doing. </p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/162865701-Engine_Joint.png\" /></p>", "type": "rendered"}, "created_on": "2019-06-09T21:53:16.014968+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-09T21:53:16.022958+00:00", "type": "pullrequest_comment", "id": 105023712}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108/comments/105023131.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108/_/diff#comment-105023131"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}, "content": {"raw": "For the revolute joint,  I currently have the limit tag : `<limit lower=\"${-pi}\" upper=\"${pi}\" effort=\"10\" velocity=\"10\"/>`\n\n* Lower and upper are chosen to be -pi and pi. The ACTUAL upper and lower limits are controlled by the `<maxAngle>`. This simply allows full range of motion at a joint level, but then through subscribing to `<name>_thrust_angle`, the actual angle is limited to \\[-maxAngle, maxAngle\\]\n* Effort and velocity were chosen arbitrarily to be 10, as I did not have a reference to the mechanism of the rotation. Please let me know if we have more information about this or if this important. \n\n", "markup": "markdown", "html": "<p>For the revolute joint,  I currently have the limit tag : <code>&lt;limit lower=\"${-pi}\" upper=\"${pi}\" effort=\"10\" velocity=\"10\"/&gt;</code></p>\n<ul>\n<li>Lower and upper are chosen to be -pi and pi. The ACTUAL upper and lower limits are controlled by the <code>&lt;maxAngle&gt;</code>. This simply allows full range of motion at a joint level, but then through subscribing to <code>&lt;name&gt;_thrust_angle</code>, the actual angle is limited to [-maxAngle, maxAngle]</li>\n<li>Effort and velocity were chosen arbitrarily to be 10, as I did not have a reference to the mechanism of the rotation. Please let me know if we have more information about this or if this important. </li>\n</ul>", "type": "rendered"}, "created_on": "2019-06-09T21:08:28.212610+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-09T21:08:28.219447+00:00", "type": "pullrequest_comment", "id": 105023131}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"update": {"description": "STILL IN DEVELOPMENT. NOT READY FOR MERGING.\r\n\r\n**Description of Issue**\r\n\r\nWe\u2019d like to extend both the [usv\\_gazebo\\_thrust\\_plugin](#!/osrf/vrx/src/default/usv_gazebo_plugins/src/usv_gazebo_thrust_plugin.cc) Gazebo model plugin and the [engine.xacro](#!/osrf/vrx/src/default/wamv_description/urdf/engine.xacro) model so that users can change the thrust angle via a ROS API.\r\n\r\n* The thrust plugin would subscribe to a ROS topic, e.g., \u201cleft\\_ thrust\\_angle\u201d, that would set the angular displacement of the thruster.\r\n\r\n    * The angle, in radians, would be relative to the nominal thruster attitude.\r\n    \r\n* The configuration should allow for angle limits \\(e.g., \\+/- pi/2\\) to be set.\r\n* A new rotation joint should be included in the engine model to facilitate the rotation\r\n\r\n    * The plugin would also set the joint rotation so that the visual model reflects the vectored thrust.\r\n    \r\n\r\n**Design Questions**\r\n\r\n1. How should max angle be set? Currently done by changing `<maxAngle>NUMBER</maxAngle>` in `wamv_gazebo_thruster_config.xacro`\r\n2. Thrust commands currently have a `lastCmdTime` to track the time of last command signal and a `cmdTimeout` to describe how long each command should last for before not putting a force anymore. Should there be something similar for angle? eg. if publish `left_thrust_angle=pi/3` and then stop publishing angle, should the angle remain pi/3 until set otherwise, or should it \u201creset\u201d back to `left_thrust_angle=0` if it does not receive angle messages? Currently there is no \u201creset\u201d, it remains at the last published angle\r\n3. What to do if |published angle| > maxAngle? eg. if publish `left_thrust_angle=5*pi/4`, but we have `<maxAngle>${pi/2}</maxAngle>`, what should it do? Output error/warning message and ignore message \\(keep same angle as it previously was\\)? Or clip it \\(if it is >pi/2, then clip to pi/2. If it is <-pi/2, then clip to -pi/2\\). \r\n4. If published angle = 7\\*pi/4 and maxAngle=pi/2, should this be interpreted as -pi/4 or clipped to pi/2 or output error message and ignore? Currently doing clipping.", "title": "Issue#96 Add Thrust Angle and Rotation Joint", "destination": {"commit": {"hash": "5b8b5fa0e650", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/5b8b5fa0e650.json"}, "html": {"href": "#!/osrf/vrx/commits/5b8b5fa0e650"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ca84d540be92", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/ca84d540be92.json"}, "html": {"href": "#!/osrf/vrx/commits/ca84d540be92"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "Issue#96-add-vector-thrust"}}, "state": "OPEN", "author": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "date": "2019-06-09T20:54:40.710108+00:00"}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"update": {"description": "STILL IN DEVELOPMENT. NOT READY FOR MERGING.\r\n\r\n**Description of Issue**\r\n\r\nWe\u2019d like to extend both the [usv\\_gazebo\\_thrust\\_plugin](#!/osrf/vrx/src/default/usv_gazebo_plugins/src/usv_gazebo_thrust_plugin.cc) Gazebo model plugin and the [engine.xacro](#!/osrf/vrx/src/default/wamv_description/urdf/engine.xacro) model so that users can change the thrust angle via a ROS API.\r\n\r\n* The thrust plugin would subscribe to a ROS topic, e.g., \u201cleft\\_ thrust\\_angle\u201d, that would set the angular displacement of the thruster.\r\n\r\n    * The angle, in radians, would be relative to the nominal thruster attitude.\r\n    \r\n* The configuration should allow for angle limits \\(e.g., \\+/- pi/2\\) to be set.\r\n* A new rotation joint should be included in the engine model to facilitate the rotation\r\n\r\n    * The plugin would also set the joint rotation so that the visual model reflects the vectored thrust.\r\n    \r\n\r\n**Design Questions**\r\n\r\n1. How should max angle be set? Currently done by changing `<maxAngle>NUMBER</maxAngle>` in `wamv_gazebo_thruster_config.xacro`\r\n2. Thrust commands currently have a `lastCmdTime` to track the time of last command signal and a `cmdTimeout` to describe how long each command should last for before not putting a force anymore. Should there be something similar for angle? eg. if publish `left_thrust_angle=pi/3` and then stop publishing angle, should the angle remain pi/3 until set otherwise, or should it \u201creset\u201d back to `left_thrust_angle=0` if it does not receive angle messages? Currently there is no \u201creset\u201d, it remains at the last published angle\r\n3. What to do if |published angle| > maxAngle? eg. if publish `left_thrust_angle=5*pi/4`, but we have `<maxAngle>${pi/2}</maxAngle>`, what should it do? Output error/warning message and ignore message \\(keep same angle as it previously was\\)? Or clip it \\(if it is >pi/2, then clip to pi/2. If it is <-pi/2, then clip to -pi/2\\). \r\n4. If published angle = 7\\*pi/4 and maxAngle=pi/2, should this be interpreted as -pi/4 or clipped to pi/2 or output error message and ignore? Currently doing clipping.", "title": "Issue#96 Add Thrust Angle and Rotation Joint", "destination": {"commit": {"hash": "5b8b5fa0e650", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/5b8b5fa0e650.json"}, "html": {"href": "#!/osrf/vrx/commits/5b8b5fa0e650"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8e5597921ffd", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/8e5597921ffd.json"}, "html": {"href": "#!/osrf/vrx/commits/8e5597921ffd"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "Issue#96-add-vector-thrust"}}, "state": "OPEN", "author": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "date": "2019-06-09T17:37:33.827640+00:00"}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}, {"update": {"description": "STILL IN DEVELOPMENT. NOT READY FOR MERGING.\r\n\r\n**Description of Issue**\r\n\r\nWe\u2019d like to extend both the [usv\\_gazebo\\_thrust\\_plugin](#!/osrf/vrx/src/default/usv_gazebo_plugins/src/usv_gazebo_thrust_plugin.cc) Gazebo model plugin and the [engine.xacro](#!/osrf/vrx/src/default/wamv_description/urdf/engine.xacro) model so that users can change the thrust angle via a ROS API.\r\n\r\n* The thrust plugin would subscribe to a ROS topic, e.g., \u201cleft\\_ thrust\\_angle\u201d, that would set the angular displacement of the thruster.\r\n\r\n    * The angle, in radians, would be relative to the nominal thruster attitude.\r\n    \r\n* The configuration should allow for angle limits \\(e.g., \\+/- pi/2\\) to be set.\r\n* A new rotation joint should be included in the engine model to facilitate the rotation\r\n\r\n    * The plugin would also set the joint rotation so that the visual model reflects the vectored thrust.\r\n    \r\n\r\n**Design Questions**\r\n\r\n1. How should max angle be set? Currently done by changing `<maxAngle>NUMBER</maxAngle>` in `wamv_gazebo_thruster_config.xacro`\r\n2. Thrust commands currently have a `lastCmdTime` to track the time of last command signal and a `cmdTimeout` to describe how long each command should last for before not putting a force anymore. Should there be something similar for angle? eg. if publish `left_thrust_angle=pi/3` and then stop publishing angle, should the angle remain pi/3 until set otherwise, or should it \u201creset\u201d back to `left_thrust_angle=0` if it does not receive angle messages? Currently there is no \u201creset\u201d, it remains at the last published angle\r\n3. What to do if |published angle| > maxAngle? eg. if publish `left_thrust_angle=5*pi/4`, but we have `<maxAngle>${pi/2}</maxAngle>`, what should it do? Output error/warning message and ignore message \\(keep same angle as it previously was\\)? Or clip it \\(if it is >pi/2, then clip to pi/2. If it is <-pi/2, then clip to -pi/2\\). \r\n4. If published angle = 7\\*pi/4 and maxAngle=pi/2, should this be interpreted as -pi/4 or clipped to pi/2 or output error message and ignore? Currently doing clipping.", "title": "Issue#96 Add Thrust Angle and Rotation Joint", "destination": {"commit": {"hash": "5b8b5fa0e650", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/5b8b5fa0e650.json"}, "html": {"href": "#!/osrf/vrx/commits/5b8b5fa0e650"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8e5597921ffd", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/vrx/commit/8e5597921ffd.json"}, "html": {"href": "#!/osrf/vrx/commits/8e5597921ffd"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "branch": {"name": "Issue#96-add-vector-thrust"}}, "state": "OPEN", "author": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "date": "2019-06-09T17:37:33.794425+00:00"}, "pull_request": {"type": "pullrequest", "id": 108, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/108.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/108"}}, "title": "Issue#96 Add Thrust Angle and Rotation Joint"}}]}
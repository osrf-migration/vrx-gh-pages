{"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/114/comments/106208704.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/114/_/diff#comment-106208704"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 114, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/114.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/114"}}, "title": "Wave visual / physics refactor"}, "content": {"raw": "I did some scaling tests to evaluate the potential for scaling issues with the new implementation. There seems to be no functional difference between the current default \\(no synchronization\\) and implementation in this PR.\n\nHere are the details\u2026\n\n**Setup**\n\nCreated two catkin workspaces\n\n1. **vrx\\_ws** Containing this `wave_visualization_refactor` branch\n2. **vrx\\_nosync\\_ws** Containing the temporary `unsync_wave_visualization_compare` branch, which is essentially the default branch, but with some added world/launch files to allow for an apples-apples comparison.\n\nModified the `generate_avoid_obstacles_buoys` script to allow for automatically populating a model with surmark46104 markers \\(the aX obstacles do not have a buoyancy plugin in the current default\\). Run the script to generate the model files in both workspaces:\n\n```\ncd ~/vrx_ws/src/vrx/vrx_gazebo/scripts\n./generate_avoid_obstacles_buoys --L 500 --a3 0 --a5 0 --a7 0 --surmark46104 0 | tee ~/vrx_ws/src/vrx/vrx_gazebo/models/robotx_2018_qualifying_avoid_obstacles_buoys/model.sdf | tee ~/vrx_nosync_ws/src/vrx/vrx_gazebo/models/robotx_2018_qualifying_avoid_obstacles_buoys/model.sdf \n```\n\n**Execution**\n\nRun this in each workspace sequentially: `roslaunch wave_gazebo ocean_world_buoys.launch`\n\nRecord the CPU and memory usage reported by `htop`\n\n* Started with just an empty world - no WAM-V, no buoys\n* Added WAM-V\n* Then added buoys\n\n**Results**\n\nTabulated results are below, but here are my takaways:\n\n* Keep in mind that in the nosync \\(default\\) case the buoys have a buoyant force, but it is from a flat ocean - the waves to not affect the buoy.\n* The implementation of this PR uses a very, very small amount of additional resources, effectively equivalent to the current default.\n* The incremental resources required for buoyant models is very small.\n* Simulating the WAM-V, with the sensors, is the demanding component.\n* Scaling to 100 buoyant objects is reasonable for both implementations. Unsurprisingly scaling to 1000 buoyant objects is not reasonable.\n\n    * This should be more than sufficient for VRX.\n    \n\n![](data/bitbucket.org/repo/BgXLzgM/images/3297527468-sync_scale_testing.png)\n", "markup": "markdown", "html": "<p>I did some scaling tests to evaluate the potential for scaling issues with the new implementation. There seems to be no functional difference between the current default (no synchronization) and implementation in this PR.</p>\n<p>Here are the details\u2026</p>\n<p><strong>Setup</strong></p>\n<p>Created two catkin workspaces</p>\n<ol>\n<li><strong>vrx_ws</strong> Containing this <code>wave_visualization_refactor</code> branch</li>\n<li><strong>vrx_nosync_ws</strong> Containing the temporary <code>unsync_wave_visualization_compare</code> branch, which is essentially the default branch, but with some added world/launch files to allow for an apples-apples comparison.</li>\n</ol>\n<p>Modified the <code>generate_avoid_obstacles_buoys</code> script to allow for automatically populating a model with surmark46104 markers (the aX obstacles do not have a buoyancy plugin in the current default). Run the script to generate the model files in both workspaces:</p>\n<div class=\"codehilite\"><pre><span></span>cd ~/vrx_ws/src/vrx/vrx_gazebo/scripts\n./generate_avoid_obstacles_buoys --L 500 --a3 0 --a5 0 --a7 0 --surmark46104 0 | tee ~/vrx_ws/src/vrx/vrx_gazebo/models/robotx_2018_qualifying_avoid_obstacles_buoys/model.sdf | tee ~/vrx_nosync_ws/src/vrx/vrx_gazebo/models/robotx_2018_qualifying_avoid_obstacles_buoys/model.sdf \n</pre></div>\n\n\n<p><strong>Execution</strong></p>\n<p>Run this in each workspace sequentially: <code>roslaunch wave_gazebo ocean_world_buoys.launch</code></p>\n<p>Record the CPU and memory usage reported by <code>htop</code></p>\n<ul>\n<li>Started with just an empty world - no WAM-V, no buoys</li>\n<li>Added WAM-V</li>\n<li>Then added buoys</li>\n</ul>\n<p><strong>Results</strong></p>\n<p>Tabulated results are below, but here are my takaways:</p>\n<ul>\n<li>Keep in mind that in the nosync (default) case the buoys have a buoyant force, but it is from a flat ocean - the waves to not affect the buoy.</li>\n<li>The implementation of this PR uses a very, very small amount of additional resources, effectively equivalent to the current default.</li>\n<li>The incremental resources required for buoyant models is very small.</li>\n<li>Simulating the WAM-V, with the sensors, is the demanding component.</li>\n<li>\n<p>Scaling to 100 buoyant objects is reasonable for both implementations. Unsurprisingly scaling to 1000 buoyant objects is not reasonable.</p>\n<ul>\n<li>This should be more than sufficient for VRX.</li>\n</ul>\n</li>\n</ul>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/3297527468-sync_scale_testing.png\" /></p>", "type": "rendered"}, "created_on": "2019-06-19T00:44:41.011912+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": "2019-07-01T16:52:13.265998+00:00", "type": "pullrequest_comment", "id": 106208704}
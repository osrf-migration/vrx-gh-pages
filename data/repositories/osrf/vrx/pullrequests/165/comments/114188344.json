{"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/165/comments/114188344.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/165/_/diff#comment-114188344"}}, "parent": {"id": 114172268, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/165/comments/114172268.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/165/_/diff#comment-114172268"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 165, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/165.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/165"}}, "title": "Issue#122 Ocean Reflections"}, "content": {"raw": "I tried out using the SensorManager, using\n\n`gazebo::sensors::SensorManager::Instance()` and trying out these functions with vrx.launch \\(has sensors\\)\n\n```\n      /// \\brief Get all the sensor types\n      /// \\param[out] All the sensor types.\n      public: void GetSensorTypes(std::vector<std::string> &_types)\n\n      /// \\return Vector of all the sensors.\n      public: Sensor_V GetSensors() const;\n\n      /// \\brief Get whether there's at least one sensor container running.\n      /// \\return True if running.\n      public: bool Running() const;\n```\n\nThey showed 0 sensors and not running. I ran that check in the OnRender function checking continuously, perhaps I need to init or there is a different way for me to access the sensors.\n\n\u200c\n\nI also tried adding `gazebo::sensors::SensorManager::Instance()::Init()` in Load\\(\\) with no change.", "markup": "markdown", "html": "<p>I tried out using the SensorManager, using</p>\n<p><code>gazebo::sensors::SensorManager::Instance()</code> and trying out these functions with vrx.launch (has sensors)</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">brief</span> <span class=\"nt\">Get</span> <span class=\"nt\">all</span> <span class=\"nt\">the</span> <span class=\"nt\">sensor</span> <span class=\"nt\">types</span>\n      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">param</span><span class=\"cp\">[</span><span class=\"nx\">out</span><span class=\"cp\">]</span> <span class=\"nt\">All</span> <span class=\"nt\">the</span> <span class=\"nt\">sensor</span> <span class=\"nt\">types</span><span class=\"o\">.</span>\n      <span class=\"nt\">public</span><span class=\"o\">:</span> <span class=\"nt\">void</span> <span class=\"nt\">GetSensorTypes</span><span class=\"o\">(</span><span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">vector</span><span class=\"o\">&lt;</span><span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"nt\">_types</span><span class=\"o\">)</span>\n\n      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">return</span> <span class=\"nt\">Vector</span> <span class=\"nt\">of</span> <span class=\"nt\">all</span> <span class=\"nt\">the</span> <span class=\"nt\">sensors</span><span class=\"o\">.</span>\n      <span class=\"nt\">public</span><span class=\"o\">:</span> <span class=\"nt\">Sensor_V</span> <span class=\"nt\">GetSensors</span><span class=\"o\">()</span> <span class=\"nt\">const</span><span class=\"o\">;</span>\n\n      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">brief</span> <span class=\"nt\">Get</span> <span class=\"nt\">whether</span> <span class=\"nt\">there</span><span class=\"err\">&#39;</span><span class=\"nt\">s</span> <span class=\"nt\">at</span> <span class=\"nt\">least</span> <span class=\"nt\">one</span> <span class=\"nt\">sensor</span> <span class=\"nt\">container</span> <span class=\"nt\">running</span><span class=\"o\">.</span>\n      <span class=\"o\">///</span> <span class=\"err\">\\</span><span class=\"nt\">return</span> <span class=\"nt\">True</span> <span class=\"nt\">if</span> <span class=\"nt\">running</span><span class=\"o\">.</span>\n      <span class=\"nt\">public</span><span class=\"o\">:</span> <span class=\"nt\">bool</span> <span class=\"nt\">Running</span><span class=\"o\">()</span> <span class=\"nt\">const</span><span class=\"o\">;</span>\n</pre></div>\n\n\n<p>They showed 0 sensors and not running. I ran that check in the OnRender function checking continuously, perhaps I need to init or there is a different way for me to access the sensors.</p>\n<p>\u200c</p>\n<p>I also tried adding <code>gazebo::sensors::SensorManager::Instance()::Init()</code> in Load() with no change.</p>", "type": "rendered"}, "created_on": "2019-08-23T06:15:06.233055+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-23T06:19:12.856643+00:00", "type": "pullrequest_comment", "id": 114188344}
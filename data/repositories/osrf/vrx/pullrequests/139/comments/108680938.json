{"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/139/comments/108680938.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/139/_/diff#comment-108680938"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 139, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/139.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/139"}}, "title": "Compliance refactor"}, "content": {"raw": "Here is my original email to the team on this issue and the associated tutorial - posted here for posterity.\n\n---\n\nWith the current thruster configuration scenario \\(as described in wiki and the Technical Guide\\) we run the risk of getting perhaps unintended solutions. For example, a team could put all four thrusters in the stern, effectively giving themselves double the control authority. However, it is a positive to allow the teams the flexibility to configure their system to be as close as possible to their actual vehicle.\n\nHere is one alternative we might consider. \n\n![](data/bitbucket.org/repo/BgXLzgM/images/2936587970-wamv_thruster_zones.png)\nIf we define a set of multiple compliant \"zones\" for placing thrusters where **teams can use up to four thrusters and no more than one thruster in each zone**. See the attached image with five zones. This would allow teams the flexibility to determine their type of propulsion configuration \\(H, T, X, etc.\\) and to modify the specific location and orientation of the thrusters.\n\nBelow are some comments on the wiki. I don't think finalizing the configuration wiki is on the critical path for getting the release done today, but here are some thoughts that might help clarify and help the teams as they start working on through the examples.\n\n* Pointing to `wamv_description/urdf/thrusters/ `for descriptions is a bit confusing. The engine.xacro defines the visual elements, but perhaps more importantly, the plugin parameters are over in [#!/osrf/vrx/src/default/wamv\\_gazebo/urdf/thruster\\_layouts/wamv\\_gazebo\\_thruster\\_config.xacro](#!/osrf/vrx/src/default/wamv_gazebo/urdf/thruster_layouts/wamv_gazebo_thruster_config.xacro)\n\n    * Not sure if there is a clean way to describe this to folks - could consider centralizing the descriptions in one place for release 1.2?\n    \n* I'm not sure what we mean by \"all possible thruster and sensor configurations are in compliance\"?\n* Should we limit the orientation of thruster placement to yaw only? I don't think we want to deal with pitch and roll for thrusters.\n* Could the example YAML config files be included in the repo? Then your demo would have two parts - Part 1 would illustrate calling the generator script for the existing files \\(this could only support working from source or provide a wget commend to download the yaml files\\). Part 2 could describe how folks could do the same for their own files.\n\n    * Would we have config file examples in the repo to generate our typical H, T and X configurations?\n    \n* I'm curious why configure\\_wamv.py is written as a ROS node \\(using ROS parameters as input and a launch file\\) - instead of as a standalone script? I'm assuming this has something to do with the automated evaluation workflow.\n* I would have the thruster example generate something that is more typical of RobotX. Using the example of three thrusters at the stern suggests that this would be a reasonable custom configuration.\n\n", "markup": "markdown", "html": "<p>Here is my original email to the team on this issue and the associated tutorial - posted here for posterity.</p>\n<hr />\n<p>With the current thruster configuration scenario (as described in wiki and the Technical Guide) we run the risk of getting perhaps unintended solutions. For example, a team could put all four thrusters in the stern, effectively giving themselves double the control authority. However, it is a positive to allow the teams the flexibility to configure their system to be as close as possible to their actual vehicle.</p>\n<p>Here is one alternative we might consider. </p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/2936587970-wamv_thruster_zones.png\" />\nIf we define a set of multiple compliant \"zones\" for placing thrusters where <strong>teams can use up to four thrusters and no more than one thruster in each zone</strong>. See the attached image with five zones. This would allow teams the flexibility to determine their type of propulsion configuration (H, T, X, etc.) and to modify the specific location and orientation of the thrusters.</p>\n<p>Below are some comments on the wiki. I don't think finalizing the configuration wiki is on the critical path for getting the release done today, but here are some thoughts that might help clarify and help the teams as they start working on through the examples.</p>\n<ul>\n<li>\n<p>Pointing to <code>wamv_description/urdf/thrusters/</code>for descriptions is a bit confusing. The engine.xacro defines the visual elements, but perhaps more importantly, the plugin parameters are over in <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/src/default/wamv_gazebo/urdf/thruster_layouts/wamv_gazebo_thruster_config.xacro\" rel=\"nofollow\">#!/osrf/vrx/src/default/wamv_gazebo/urdf/thruster_layouts/wamv_gazebo_thruster_config.xacro</a></p>\n<ul>\n<li>Not sure if there is a clean way to describe this to folks - could consider centralizing the descriptions in one place for release 1.2?</li>\n</ul>\n</li>\n<li>\n<p>I'm not sure what we mean by \"all possible thruster and sensor configurations are in compliance\"?</p>\n</li>\n<li>Should we limit the orientation of thruster placement to yaw only? I don't think we want to deal with pitch and roll for thrusters.</li>\n<li>\n<p>Could the example YAML config files be included in the repo? Then your demo would have two parts - Part 1 would illustrate calling the generator script for the existing files (this could only support working from source or provide a wget commend to download the yaml files). Part 2 could describe how folks could do the same for their own files.</p>\n<ul>\n<li>Would we have config file examples in the repo to generate our typical H, T and X configurations?</li>\n</ul>\n</li>\n<li>\n<p>I'm curious why configure_wamv.py is written as a ROS node (using ROS parameters as input and a launch file) - instead of as a standalone script? I'm assuming this has something to do with the automated evaluation workflow.</p>\n</li>\n<li>I would have the thruster example generate something that is more typical of RobotX. Using the example of three thrusters at the stern suggests that this would be a reasonable custom configuration.</li>\n</ul>", "type": "rendered"}, "created_on": "2019-07-10T00:24:11.892443+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": "2019-07-10T00:24:11.899079+00:00", "type": "pullrequest_comment", "id": 108680938}
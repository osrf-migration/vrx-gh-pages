{"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/104/comments/104855863.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/104/_/diff#comment-104855863"}}, "parent": {"id": 104826625, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/104/comments/104826625.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/104/_/diff#comment-104826625"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 104, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/104.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/104"}}, "title": "Issue#97 yaml thruster configuration"}, "content": {"raw": "@{5ce2e28709c5fa0fd9fb0c6c} so far, I have implemented the `generate_thrusters` PR to near identically mirror the `generate_sensors` behavior. The main design decisions are:\n\n* How could a user generate sensors AND thrusters? Should it be a `generate_thrusters_and_sensors` approach? I feel that there could be okay, but if other types of parts need to be added, then `generate_thrusters_and_sensors_and_parts` is not nice. Perhaps we could simplify generate\\_thrusters and generate\\_sensors behavior to simply output the `my_senors.xacro` file and not immediately output the `my_wamv.urdf` file. This way the flow could be:\n\n1. Generate xacro files for thrusters and sensors\n\n`roslaunch vrx_gazebo generate_sensors.launch requested:=/home/tylerlum/my_wamv/sensor_config.yaml xacro_target:=/home/tylerlum/my_wamv/my_sensors.xacro`\n\n`roslaunch vrx_gazebo generate_sensors.launch requested:=/home/tylerlum/my_wamv/thruster_config.yaml xacro_target:=/home/tylerlum/my_wamv/my_thrusters.xacro`\n\n2\\. Compile urdf\n\n`rosrun xacro xacro --inorder -o /home/tylerlum/my_wamv/my_wamv_sensors_and_thrusters.urdf '/home/tylerlum/vrx_ws/src/vrx/wamv_gazebo/urdf/wamv_gazebo.urdf.xacro' yaml_sensor_generation:=true sensor_xacro_file:=/home/tylerlum/my_wamv/my_sensors.xacro yaml_thruster_generation:=true thruster_xacro_file:=/home/tylerlum/my_wamv/my_thrusters.xacro`\n\n3\\. Use urdf\n\n`roslaunch vrx_gazebo sandisland.launch urdf:=/home/tylerlum/my_wamv/my_wamv_sensors_and_thrusters.urdf`\n\n\u200c\n\nOR we could make a high level launch file that takes in optional yaml files as parameters\n\n1. Generate urdf\n\n`roslaunch vrx_gazebo generate_wamv.launch sensor_yaml:=/home/tylerlum/my_wamv/sensor_config.yaml thruster_yaml:=/home/tylerlum/my_wamv/thruster_config.yaml wamv_target:=/home/tylerlum/my_wamv/my_wamv.urdf`\n\nThis would have `sensor_yaml` and `thruster_yaml` as optional parameters. If set, they use `generate_thrusters` or `generate_sensors` to make the xacro files, then use them both with the rosrun xacro command above. The `xacro_target` s could default be set to be stored in the same directory as the yaml file and with the same file name.\n\n2\\. Use urdf\n\n`roslaunch vrx_gazebo sandisland.launch urdf:=/home/tylerlum/my_wamv/my_wamv.urdf`", "markup": "markdown", "html": "<p><span class=\"ap-mention\" data-atlassian-id=\"5ce2e28709c5fa0fd9fb0c6c\">@Marshall Rawson</span> so far, I have implemented the <code>generate_thrusters</code> PR to near identically mirror the <code>generate_sensors</code> behavior. The main design decisions are:</p>\n<ul>\n<li>How could a user generate sensors AND thrusters? Should it be a <code>generate_thrusters_and_sensors</code> approach? I feel that there could be okay, but if other types of parts need to be added, then <code>generate_thrusters_and_sensors_and_parts</code> is not nice. Perhaps we could simplify generate_thrusters and generate_sensors behavior to simply output the <code>my_senors.xacro</code> file and not immediately output the <code>my_wamv.urdf</code> file. This way the flow could be:</li>\n</ul>\n<ol>\n<li>Generate xacro files for thrusters and sensors</li>\n</ol>\n<p><code>roslaunch vrx_gazebo generate_sensors.launch requested:=/home/tylerlum/my_wamv/sensor_config.yaml xacro_target:=/home/tylerlum/my_wamv/my_sensors.xacro</code></p>\n<p><code>roslaunch vrx_gazebo generate_sensors.launch requested:=/home/tylerlum/my_wamv/thruster_config.yaml xacro_target:=/home/tylerlum/my_wamv/my_thrusters.xacro</code></p>\n<p>2. Compile urdf</p>\n<p><code>rosrun xacro xacro --inorder -o /home/tylerlum/my_wamv/my_wamv_sensors_and_thrusters.urdf '/home/tylerlum/vrx_ws/src/vrx/wamv_gazebo/urdf/wamv_gazebo.urdf.xacro' yaml_sensor_generation:=true sensor_xacro_file:=/home/tylerlum/my_wamv/my_sensors.xacro yaml_thruster_generation:=true thruster_xacro_file:=/home/tylerlum/my_wamv/my_thrusters.xacro</code></p>\n<p>3. Use urdf</p>\n<p><code>roslaunch vrx_gazebo sandisland.launch urdf:=/home/tylerlum/my_wamv/my_wamv_sensors_and_thrusters.urdf</code></p>\n<p>\u200c</p>\n<p>OR we could make a high level launch file that takes in optional yaml files as parameters</p>\n<ol>\n<li>Generate urdf</li>\n</ol>\n<p><code>roslaunch vrx_gazebo generate_wamv.launch sensor_yaml:=/home/tylerlum/my_wamv/sensor_config.yaml thruster_yaml:=/home/tylerlum/my_wamv/thruster_config.yaml wamv_target:=/home/tylerlum/my_wamv/my_wamv.urdf</code></p>\n<p>This would have <code>sensor_yaml</code> and <code>thruster_yaml</code> as optional parameters. If set, they use <code>generate_thrusters</code> or <code>generate_sensors</code> to make the xacro files, then use them both with the rosrun xacro command above. The <code>xacro_target</code> s could default be set to be stored in the same directory as the yaml file and with the same file name.</p>\n<p>2. Use urdf</p>\n<p><code>roslaunch vrx_gazebo sandisland.launch urdf:=/home/tylerlum/my_wamv/my_wamv.urdf</code></p>", "type": "rendered"}, "created_on": "2019-06-06T22:14:38.383013+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-06T22:14:38.406952+00:00", "type": "pullrequest_comment", "id": 104855863}
{"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113475148.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113475148"}}, "parent": {"id": 113474866, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113474866.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113474866"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "My current issue is getting the C\\+\\+ code to properly work with the material scripts. Referencing the Fresnel example, here is the relevant part of the code:\n\n**C\\+\\+ Code**\n\n```\n\tvoid setupWater()\n\t{\n\t\t// create our reflection & refraction render textures, and setup their render targets\n\t\tfor (unsigned int i = 0; i < 2; i++)\n\t\t{\n\t\t\tTexturePtr tex = TextureManager::getSingleton().createManual(i == 0 ? \"refraction\" : \"reflection\",\n\t\t\t\tResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, TEX_TYPE_2D, 512, 512, 0, PF_R8G8B8, TU_RENDERTARGET);\n\n\t\t\tRenderTarget* rtt = tex->getBuffer()->getRenderTarget();\n\t\t\trtt->addViewport(mCamera)->setOverlaysEnabled(false);\n\t\t\trtt->addListener(this);\n\n\t\t\tif (i == 0) mRefractionTarget = rtt;\n\t\t\telse mReflectionTarget = rtt;\n\t\t}\n\n\t\t// create our water plane mesh\n        mWaterPlane = Plane(Vector3::UNIT_Y, 0);\n        MeshManager::getSingleton().createPlane(\"water\", ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,\n            mWaterPlane, 700, 1300, 10, 10, true, 1, 3, 5, Vector3::UNIT_Z);\n\n\t\t// create a water entity using our mesh, give it the shader material, and attach it to the origin\n        mWater = mSceneMgr->createEntity(\"Water\", \"water\");\n        mWater->setMaterialName(\"Examples/FresnelReflectionRefraction\");\n        mSceneMgr->getRootSceneNode()->attachObject(mWater);\n\t}\n```\n\n**Material Script**\n\n```\nmaterial Examples/FresnelReflectionRefraction\n{\n\t// ps_2_0 / arbfp1\n\ttechnique\n\t{\n\t\tpass \n\t\t{\n\t\t\t\n\t\t\tvertex_program_ref Examples/FresnelRefractReflectVP\n\t\t\t{\n\t\t\t\tparam_named_auto worldViewProjMatrix worldviewproj_matrix\n\t\t\t\tparam_named_auto eyePosition camera_position_object_space\n\t\t\t\tparam_named_auto timeVal time 0.05\n\t\t\t\tparam_named scroll float 1  \n\t\t\t\tparam_named scale float 1 \n\t\t\t\tparam_named noise float 1 \n\t\t\t\t// scroll and noisePos will need updating per frame\n\t\t\t}\n\t\t\tfragment_program_ref Examples/FresnelRefractReflectFP\n\t\t\t{\n\t\t\t\tparam_named fresnelBias float -0.1 \n\t\t\t\tparam_named fresnelScale float 1.8 \n\t\t\t\tparam_named fresnelPower float 8  \n\t\t\t\tparam_named tintColour float4 0 0.05 0.05 1\n\t\t\t\tparam_named noiseScale float 0.05 \n\t\t\t}\n\t\t\t// Noise\n\t\t\ttexture_unit\n\t\t\t{\n\t\t\t\t// Perlin noise volume\n\t\t\t\ttexture waves2.dds\n\t\t\t\t// min / mag filtering, no mip\n\t\t\t\tfiltering linear linear none\n\t\t\t}\n\t\t\t// Reflection\n\t\t\ttexture_unit\n\t\t\t{\n\t\t\t\t// Will be filled in at runtime\n\t\t\t\ttexture reflection\n\t\t\t\ttex_address_mode clamp\n\t\t\t}\n\t\t\t// Refraction\n\t\t\ttexture_unit\n\t\t\t{\n\t\t\t\t// Will be filled in at runtime\n\t\t\t\ttexture refraction\n\t\t\t\ttex_address_mode clamp\n\t\t\t}\n\t\t}\t\t\n\t}\n}\n```\n\nIgnoring the fact that they make 2 textures \\(one for reflection and one for reflection\\), I am doing about the same thing.", "markup": "markdown", "html": "<p>My current issue is getting the C++ code to properly work with the material scripts. Referencing the Fresnel example, here is the relevant part of the code:</p>\n<p><strong>C++ Code</strong></p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"nb\">void</span> <span class=\"n\">setupWater</span>()\n    {\n        // <span class=\"n\">create</span> <span class=\"k\">our</span> <span class=\"n\">reflection</span> &amp; <span class=\"n\">refraction</span> <span class=\"n\">render</span> <span class=\"n\">textures</span>, <span class=\"o\">and</span> <span class=\"n\">setup</span> <span class=\"n\">their</span> <span class=\"n\">render</span> <span class=\"n\">targets</span>\n        <span class=\"k\">for</span> (<span class=\"n\">unsigned</span> <span class=\"nb\">int</span> <span class=\"n\">i</span> = <span class=\"mi\">0</span>; <span class=\"n\">i</span> &lt; <span class=\"mi\">2</span>; <span class=\"n\">i</span>++)\n        {\n            <span class=\"n\">TexturePtr</span> <span class=\"n\">tex</span> = <span class=\"n\">TextureManager::getSingleton</span>().<span class=\"n\">createManual</span>(<span class=\"n\">i</span> == <span class=\"mi\">0</span> ? <span class=\"s\">&quot;refraction&quot;</span> : <span class=\"s\">&quot;reflection&quot;</span>,\n                <span class=\"n\">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</span>, <span class=\"n\">TEX_TYPE_2D</span>, <span class=\"mi\">512</span>, <span class=\"mi\">512</span>, <span class=\"mi\">0</span>, <span class=\"n\">PF_R8G8B8</span>, <span class=\"n\">TU_RENDERTARGET</span>);\n\n            <span class=\"n\">RenderTarget</span>* <span class=\"n\">rtt</span> = <span class=\"n\">tex-</span>&gt;<span class=\"n\">getBuffer</span>()-&gt;<span class=\"n\">getRenderTarget</span>();\n            <span class=\"n\">rtt-</span>&gt;<span class=\"n\">addViewport</span>(<span class=\"n\">mCamera</span>)-&gt;<span class=\"n\">setOverlaysEnabled</span>(<span class=\"n\">false</span>);\n            <span class=\"n\">rtt-</span>&gt;<span class=\"n\">addListener</span>(<span class=\"n\">this</span>);\n\n            <span class=\"k\">if</span> (<span class=\"n\">i</span> == <span class=\"mi\">0</span>) <span class=\"n\">mRefractionTarget</span> = <span class=\"n\">rtt</span>;\n            <span class=\"k\">else</span> <span class=\"n\">mReflectionTarget</span> = <span class=\"n\">rtt</span>;\n        }\n\n        // <span class=\"n\">create</span> <span class=\"k\">our</span> <span class=\"n\">water</span> <span class=\"n\">plane</span> <span class=\"n\">mesh</span>\n        <span class=\"n\">mWaterPlane</span> = <span class=\"n\">Plane</span>(<span class=\"n\">Vector3::UNIT_Y</span>, <span class=\"mi\">0</span>);\n        <span class=\"n\">MeshManager::getSingleton</span>().<span class=\"n\">createPlane</span>(<span class=\"s\">&quot;water&quot;</span>, <span class=\"n\">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</span>,\n            <span class=\"n\">mWaterPlane</span>, <span class=\"mi\">700</span>, <span class=\"mi\">1300</span>, <span class=\"mi\">10</span>, <span class=\"mi\">10</span>, <span class=\"nb\">true</span>, <span class=\"mi\">1</span>, <span class=\"mi\">3</span>, <span class=\"mi\">5</span>, <span class=\"n\">Vector3::UNIT_Z</span>);\n\n        // <span class=\"n\">create</span> <span class=\"n\">a</span> <span class=\"n\">water</span> <span class=\"n\">entity</span> <span class=\"n\">using</span> <span class=\"k\">our</span> <span class=\"n\">mesh</span>, <span class=\"n\">give</span> <span class=\"n\">it</span> <span class=\"n\">the</span> <span class=\"n\">shader</span> <span class=\"n\">material</span>, <span class=\"o\">and</span> <span class=\"n\">attach</span> <span class=\"n\">it</span> <span class=\"nb\">to</span> <span class=\"n\">the</span> <span class=\"n\">origin</span>\n        <span class=\"n\">mWater</span> = <span class=\"n\">mSceneMgr-</span>&gt;<span class=\"n\">createEntity</span>(<span class=\"s\">&quot;Water&quot;</span>, <span class=\"s\">&quot;water&quot;</span>);\n        <span class=\"n\">mWater-</span>&gt;<span class=\"n\">setMaterialName</span>(<span class=\"s\">&quot;Examples/FresnelReflectionRefraction&quot;</span>);\n        <span class=\"n\">mSceneMgr-</span>&gt;<span class=\"n\">getRootSceneNode</span>()-&gt;<span class=\"n\">attachObject</span>(<span class=\"n\">mWater</span>);\n    }\n</pre></div>\n\n\n<p><strong>Material Script</strong></p>\n<div class=\"codehilite\"><pre><span></span>material Examples/FresnelReflectionRefraction\n{\n    // ps_2_0 / arbfp1\n    technique\n    {\n        pass \n        {\n\n            vertex_program_ref Examples/FresnelRefractReflectVP\n            {\n                param_named_auto worldViewProjMatrix worldviewproj_matrix\n                param_named_auto eyePosition camera_position_object_space\n                param_named_auto timeVal time 0.05\n                param_named scroll float 1  \n                param_named scale float 1 \n                param_named noise float 1 \n                // scroll and noisePos will need updating per frame\n            }\n            fragment_program_ref Examples/FresnelRefractReflectFP\n            {\n                param_named fresnelBias float -0.1 \n                param_named fresnelScale float 1.8 \n                param_named fresnelPower float 8  \n                param_named tintColour float4 0 0.05 0.05 1\n                param_named noiseScale float 0.05 \n            }\n            // Noise\n            texture_unit\n            {\n                // Perlin noise volume\n                texture waves2.dds\n                // min / mag filtering, no mip\n                filtering linear linear none\n            }\n            // Reflection\n            texture_unit\n            {\n                // Will be filled in at runtime\n                texture reflection\n                tex_address_mode clamp\n            }\n            // Refraction\n            texture_unit\n            {\n                // Will be filled in at runtime\n                texture refraction\n                tex_address_mode clamp\n            }\n        }       \n    }\n}\n</pre></div>\n\n\n<p>Ignoring the fact that they make 2 textures (one for reflection and one for reflection), I am doing about the same thing.</p>", "type": "rendered"}, "created_on": "2019-08-18T21:44:18.352473+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-18T21:44:18.364716+00:00", "type": "pullrequest_comment", "id": 113475148}
{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113474031.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113474031"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "\u200c\n\n![](data/bitbucket.org/repo/BgXLzgM/images/2461074460-image.png)\nFigure 5: In changeset 1530:dc471a8b98b8, rewrote code to match [https://bitbucket.org/sinbad/ogre/src/v1-6-0/Samples/RenderToTexture/src/RenderToTexture.cpp](https://bitbucket.org/sinbad/ogre/src/v1-6-0/Samples/RenderToTexture/src/RenderToTexture.cpp), worked likely because I added both attached both plane and plane entity.", "markup": "markdown", "html": "<p>\u200c</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/2461074460-image.png\" />\nFigure 5: In changeset 1530:<a href=\"#!/osrf/vrx/commits/dc471a8b98b8\" rel=\"nofollow\" class=\"ap-connect-link\">dc471a8b98b8</a>, rewrote code to match <a data-is-external-link=\"true\" href=\"https://bitbucket.org/sinbad/ogre/src/v1-6-0/Samples/RenderToTexture/src/RenderToTexture.cpp\" rel=\"nofollow\">https://bitbucket.org/sinbad/ogre/src/v1-6-0/Samples/RenderToTexture/src/RenderToTexture.cpp</a>, worked likely because I added both attached both plane and plane entity.</p>", "type": "rendered"}, "created_on": "2019-08-18T19:51:52.959788+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-18T21:18:35.447530+00:00", "type": "pullrequest_comment", "id": 113474031}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113474349.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113474349"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "![](data/bitbucket.org/repo/BgXLzgM/images/987389172-image.png)\n1531:75057d2d1ee6", "markup": "markdown", "html": "<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/987389172-image.png\" />\n1531:<a href=\"#!/osrf/vrx/commits/75057d2d1ee6\" rel=\"nofollow\" class=\"ap-connect-link\">75057d2d1ee6</a></p>", "type": "rendered"}, "created_on": "2019-08-18T20:21:40.714593+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-18T20:21:40.722521+00:00", "type": "pullrequest_comment", "id": 113474349}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113474396.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113474396"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "![](data/bitbucket.org/repo/BgXLzgM/images/1631182957-image.png)\n![](data/bitbucket.org/repo/BgXLzgM/images/3834559695-image.png)\n\u200c\n\n1532:d6e7a4b85e00", "markup": "markdown", "html": "<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/1631182957-image.png\" />\n<img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/3834559695-image.png\" />\n\u200c</p>\n<p>1532:<a href=\"#!/osrf/vrx/commits/d6e7a4b85e00\" rel=\"nofollow\" class=\"ap-connect-link\">d6e7a4b85e00</a></p>", "type": "rendered"}, "created_on": "2019-08-18T20:25:17.134929+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-18T20:25:17.141640+00:00", "type": "pullrequest_comment", "id": 113474396}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113474866.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113474866"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "![](data/bitbucket.org/repo/BgXLzgM/images/2625910028-image.png)\n1535:cc551c07cc0e attempt to have ocean\\_waves material script have the same texture as the reflection texture, but does not work. I must be doing something wrong because the fresnel example is able to do this \\(fill in details of material script texture at runtime in the C\\+\\+ code\\)", "markup": "markdown", "html": "<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/2625910028-image.png\" />\n1535:<a href=\"#!/osrf/vrx/commits/cc551c07cc0e\" rel=\"nofollow\" class=\"ap-connect-link\">cc551c07cc0e</a> attempt to have ocean_waves material script have the same texture as the reflection texture, but does not work. I must be doing something wrong because the fresnel example is able to do this (fill in details of material script texture at runtime in the C++ code)</p>", "type": "rendered"}, "created_on": "2019-08-18T21:17:01.480857+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-18T21:17:01.490064+00:00", "type": "pullrequest_comment", "id": 113474866}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113475148.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113475148"}}, "parent": {"id": 113474866, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113474866.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113474866"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "My current issue is getting the C\\+\\+ code to properly work with the material scripts. Referencing the Fresnel example, here is the relevant part of the code:\n\n**C\\+\\+ Code**\n\n```\n\tvoid setupWater()\n\t{\n\t\t// create our reflection & refraction render textures, and setup their render targets\n\t\tfor (unsigned int i = 0; i < 2; i++)\n\t\t{\n\t\t\tTexturePtr tex = TextureManager::getSingleton().createManual(i == 0 ? \"refraction\" : \"reflection\",\n\t\t\t\tResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, TEX_TYPE_2D, 512, 512, 0, PF_R8G8B8, TU_RENDERTARGET);\n\n\t\t\tRenderTarget* rtt = tex->getBuffer()->getRenderTarget();\n\t\t\trtt->addViewport(mCamera)->setOverlaysEnabled(false);\n\t\t\trtt->addListener(this);\n\n\t\t\tif (i == 0) mRefractionTarget = rtt;\n\t\t\telse mReflectionTarget = rtt;\n\t\t}\n\n\t\t// create our water plane mesh\n        mWaterPlane = Plane(Vector3::UNIT_Y, 0);\n        MeshManager::getSingleton().createPlane(\"water\", ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,\n            mWaterPlane, 700, 1300, 10, 10, true, 1, 3, 5, Vector3::UNIT_Z);\n\n\t\t// create a water entity using our mesh, give it the shader material, and attach it to the origin\n        mWater = mSceneMgr->createEntity(\"Water\", \"water\");\n        mWater->setMaterialName(\"Examples/FresnelReflectionRefraction\");\n        mSceneMgr->getRootSceneNode()->attachObject(mWater);\n\t}\n```\n\n**Material Script**\n\n```\nmaterial Examples/FresnelReflectionRefraction\n{\n\t// ps_2_0 / arbfp1\n\ttechnique\n\t{\n\t\tpass \n\t\t{\n\t\t\t\n\t\t\tvertex_program_ref Examples/FresnelRefractReflectVP\n\t\t\t{\n\t\t\t\tparam_named_auto worldViewProjMatrix worldviewproj_matrix\n\t\t\t\tparam_named_auto eyePosition camera_position_object_space\n\t\t\t\tparam_named_auto timeVal time 0.05\n\t\t\t\tparam_named scroll float 1  \n\t\t\t\tparam_named scale float 1 \n\t\t\t\tparam_named noise float 1 \n\t\t\t\t// scroll and noisePos will need updating per frame\n\t\t\t}\n\t\t\tfragment_program_ref Examples/FresnelRefractReflectFP\n\t\t\t{\n\t\t\t\tparam_named fresnelBias float -0.1 \n\t\t\t\tparam_named fresnelScale float 1.8 \n\t\t\t\tparam_named fresnelPower float 8  \n\t\t\t\tparam_named tintColour float4 0 0.05 0.05 1\n\t\t\t\tparam_named noiseScale float 0.05 \n\t\t\t}\n\t\t\t// Noise\n\t\t\ttexture_unit\n\t\t\t{\n\t\t\t\t// Perlin noise volume\n\t\t\t\ttexture waves2.dds\n\t\t\t\t// min / mag filtering, no mip\n\t\t\t\tfiltering linear linear none\n\t\t\t}\n\t\t\t// Reflection\n\t\t\ttexture_unit\n\t\t\t{\n\t\t\t\t// Will be filled in at runtime\n\t\t\t\ttexture reflection\n\t\t\t\ttex_address_mode clamp\n\t\t\t}\n\t\t\t// Refraction\n\t\t\ttexture_unit\n\t\t\t{\n\t\t\t\t// Will be filled in at runtime\n\t\t\t\ttexture refraction\n\t\t\t\ttex_address_mode clamp\n\t\t\t}\n\t\t}\t\t\n\t}\n}\n```\n\nIgnoring the fact that they make 2 textures \\(one for reflection and one for reflection\\), I am doing about the same thing.", "markup": "markdown", "html": "<p>My current issue is getting the C++ code to properly work with the material scripts. Referencing the Fresnel example, here is the relevant part of the code:</p>\n<p><strong>C++ Code</strong></p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"nb\">void</span> <span class=\"n\">setupWater</span>()\n    {\n        // <span class=\"n\">create</span> <span class=\"k\">our</span> <span class=\"n\">reflection</span> &amp; <span class=\"n\">refraction</span> <span class=\"n\">render</span> <span class=\"n\">textures</span>, <span class=\"o\">and</span> <span class=\"n\">setup</span> <span class=\"n\">their</span> <span class=\"n\">render</span> <span class=\"n\">targets</span>\n        <span class=\"k\">for</span> (<span class=\"n\">unsigned</span> <span class=\"nb\">int</span> <span class=\"n\">i</span> = <span class=\"mi\">0</span>; <span class=\"n\">i</span> &lt; <span class=\"mi\">2</span>; <span class=\"n\">i</span>++)\n        {\n            <span class=\"n\">TexturePtr</span> <span class=\"n\">tex</span> = <span class=\"n\">TextureManager::getSingleton</span>().<span class=\"n\">createManual</span>(<span class=\"n\">i</span> == <span class=\"mi\">0</span> ? <span class=\"s\">&quot;refraction&quot;</span> : <span class=\"s\">&quot;reflection&quot;</span>,\n                <span class=\"n\">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</span>, <span class=\"n\">TEX_TYPE_2D</span>, <span class=\"mi\">512</span>, <span class=\"mi\">512</span>, <span class=\"mi\">0</span>, <span class=\"n\">PF_R8G8B8</span>, <span class=\"n\">TU_RENDERTARGET</span>);\n\n            <span class=\"n\">RenderTarget</span>* <span class=\"n\">rtt</span> = <span class=\"n\">tex-</span>&gt;<span class=\"n\">getBuffer</span>()-&gt;<span class=\"n\">getRenderTarget</span>();\n            <span class=\"n\">rtt-</span>&gt;<span class=\"n\">addViewport</span>(<span class=\"n\">mCamera</span>)-&gt;<span class=\"n\">setOverlaysEnabled</span>(<span class=\"n\">false</span>);\n            <span class=\"n\">rtt-</span>&gt;<span class=\"n\">addListener</span>(<span class=\"n\">this</span>);\n\n            <span class=\"k\">if</span> (<span class=\"n\">i</span> == <span class=\"mi\">0</span>) <span class=\"n\">mRefractionTarget</span> = <span class=\"n\">rtt</span>;\n            <span class=\"k\">else</span> <span class=\"n\">mReflectionTarget</span> = <span class=\"n\">rtt</span>;\n        }\n\n        // <span class=\"n\">create</span> <span class=\"k\">our</span> <span class=\"n\">water</span> <span class=\"n\">plane</span> <span class=\"n\">mesh</span>\n        <span class=\"n\">mWaterPlane</span> = <span class=\"n\">Plane</span>(<span class=\"n\">Vector3::UNIT_Y</span>, <span class=\"mi\">0</span>);\n        <span class=\"n\">MeshManager::getSingleton</span>().<span class=\"n\">createPlane</span>(<span class=\"s\">&quot;water&quot;</span>, <span class=\"n\">ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME</span>,\n            <span class=\"n\">mWaterPlane</span>, <span class=\"mi\">700</span>, <span class=\"mi\">1300</span>, <span class=\"mi\">10</span>, <span class=\"mi\">10</span>, <span class=\"nb\">true</span>, <span class=\"mi\">1</span>, <span class=\"mi\">3</span>, <span class=\"mi\">5</span>, <span class=\"n\">Vector3::UNIT_Z</span>);\n\n        // <span class=\"n\">create</span> <span class=\"n\">a</span> <span class=\"n\">water</span> <span class=\"n\">entity</span> <span class=\"n\">using</span> <span class=\"k\">our</span> <span class=\"n\">mesh</span>, <span class=\"n\">give</span> <span class=\"n\">it</span> <span class=\"n\">the</span> <span class=\"n\">shader</span> <span class=\"n\">material</span>, <span class=\"o\">and</span> <span class=\"n\">attach</span> <span class=\"n\">it</span> <span class=\"nb\">to</span> <span class=\"n\">the</span> <span class=\"n\">origin</span>\n        <span class=\"n\">mWater</span> = <span class=\"n\">mSceneMgr-</span>&gt;<span class=\"n\">createEntity</span>(<span class=\"s\">&quot;Water&quot;</span>, <span class=\"s\">&quot;water&quot;</span>);\n        <span class=\"n\">mWater-</span>&gt;<span class=\"n\">setMaterialName</span>(<span class=\"s\">&quot;Examples/FresnelReflectionRefraction&quot;</span>);\n        <span class=\"n\">mSceneMgr-</span>&gt;<span class=\"n\">getRootSceneNode</span>()-&gt;<span class=\"n\">attachObject</span>(<span class=\"n\">mWater</span>);\n    }\n</pre></div>\n\n\n<p><strong>Material Script</strong></p>\n<div class=\"codehilite\"><pre><span></span>material Examples/FresnelReflectionRefraction\n{\n    // ps_2_0 / arbfp1\n    technique\n    {\n        pass \n        {\n\n            vertex_program_ref Examples/FresnelRefractReflectVP\n            {\n                param_named_auto worldViewProjMatrix worldviewproj_matrix\n                param_named_auto eyePosition camera_position_object_space\n                param_named_auto timeVal time 0.05\n                param_named scroll float 1  \n                param_named scale float 1 \n                param_named noise float 1 \n                // scroll and noisePos will need updating per frame\n            }\n            fragment_program_ref Examples/FresnelRefractReflectFP\n            {\n                param_named fresnelBias float -0.1 \n                param_named fresnelScale float 1.8 \n                param_named fresnelPower float 8  \n                param_named tintColour float4 0 0.05 0.05 1\n                param_named noiseScale float 0.05 \n            }\n            // Noise\n            texture_unit\n            {\n                // Perlin noise volume\n                texture waves2.dds\n                // min / mag filtering, no mip\n                filtering linear linear none\n            }\n            // Reflection\n            texture_unit\n            {\n                // Will be filled in at runtime\n                texture reflection\n                tex_address_mode clamp\n            }\n            // Refraction\n            texture_unit\n            {\n                // Will be filled in at runtime\n                texture refraction\n                tex_address_mode clamp\n            }\n        }       \n    }\n}\n</pre></div>\n\n\n<p>Ignoring the fact that they make 2 textures (one for reflection and one for reflection), I am doing about the same thing.</p>", "type": "rendered"}, "created_on": "2019-08-18T21:44:18.352473+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-18T21:44:18.364716+00:00", "type": "pullrequest_comment", "id": 113475148}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113475159.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113475159"}}, "parent": {"id": 113474866, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113474866.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113474866"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "![](data/bitbucket.org/repo/BgXLzgM/images/1406574087-image.png)\n1537:95f8316d98e8 - Try to change plane material to use existing reflection material and only edit the texture, but does not work", "markup": "markdown", "html": "<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/1406574087-image.png\" />\n1537:<a href=\"#!/osrf/vrx/commits/95f8316d98e8\" rel=\"nofollow\" class=\"ap-connect-link\">95f8316d98e8</a> - Try to change plane material to use existing reflection material and only edit the texture, but does not work</p>", "type": "rendered"}, "created_on": "2019-08-18T21:45:28.356300+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-18T21:45:28.364288+00:00", "type": "pullrequest_comment", "id": 113475159}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113475205.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113475205"}}, "parent": {"id": 113474866, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113474866.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113474866"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "**C\\+\\+ Code**\n\n```\n// Create Plane for reflection texture\nthis->data->plane = new Ogre::MovablePlane(\"Plane\");\nthis->data->plane->d = 0;\nthis->data->plane->normal = Ogre::Vector3::UNIT_Z;\nOgre::MeshManager::getSingleton().createPlane(\n  \"PlaneMesh\",\n  Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,\n  *(this->data->plane),\n  512, 512, 1, 1,\n  true,\n  1, 1, 1,\n  Ogre::Vector3::UNIT_Y);\n(this->data->planeEntity = this->data->scene->OgreSceneManager()->\n createEntity(\"PlaneMesh\"));\n(this->data->planeNode = this->data->scene->OgreSceneManager()->\n getRootSceneNode()->createChildSceneNode());\nthis->data->planeNode->attachObject(this->data->planeEntity);\nthis->data->planeNode->attachObject(this->data->plane);\n\n// QUESTION: Create render texture, if I give it the same name as\n// the texture in scripts/waves.material, it would not work for some reason\nOgre::TexturePtr rttTexture =\n  Ogre::TextureManager::getSingleton().createManual(\n    \"mytexture\",\n    Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,\n    Ogre::TEX_TYPE_2D,\n    512, 512,\n    0,\n    Ogre::PF_R8G8B8,\n    Ogre::TU_RENDERTARGET);\nthis->data->renderTarget = rttTexture->getBuffer()->getRenderTarget();\n\n// Setup camera\nthis->data->camera = this->data->scene->GetUserCamera(0)->OgreCamera();\n\n// Setup render texture\nthis->data->renderTarget->addViewport(this->data->camera);\nthis->data->renderTarget->getViewport(0)->setClearEveryFrame(true);\n(this->data->renderTarget->getViewport(0)->\n setBackgroundColour(Ogre::ColourValue::Black));\n\nthis->data->renderTarget->addListener(this);\n\n// Camera reflection and clip plane setup\nthis->data->camera->enableReflection(this->data->plane);\nthis->data->camera->enableCustomNearClipPlane(this->data->plane);\nthis->data->planeEntity->setMaterialName(\"reflection\");\n```\n\n\u200c\n\n**Material Script**\n\n```\nvertex_program reflectionV glsl\n{\n  source ../programs/reflection.vert\n}\n\nfragment_program reflectionF glsl\n{\n  source ../programs/reflection.frag\n  default_params\n  {\n    param_named reflectMap int 0\n  }\n}\n\nmaterial reflection\n{\n  technique GLSL\n  {\n    pass\n    {\n      // Not use shaders yet to simplify\n      scene_blend alpha_blend\n      texture_unit\n      {\n        texture mytexture\n        tex_address_mode clamp\n      }\n    }\n  }\n}\n```\n\nI have the `reflection` material in the material script with a texture `mytexture` that is not fully defined. Then in the C\\+\\+ code, I try to edit the texture `mytexture` with the camera's render texture and then give the plane the `reflection` material.\n\nIn the Fresnel example, they have a `Examples/FresnelReflectionRefraction`material in the material script with a texture `reflection` that is not fully defined. Then in the C\\+\\+ code, they try to edit the texture `reflection` with the camera's render texture and then give the plane the `Examples/FresnelReflectionRefraction` material.\n\nI feel that I am doing the same thing in principle, but maybe I am missing an important step? Or something related to the resource group?", "markup": "markdown", "html": "<p><strong>C++ Code</strong></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">//</span> <span class=\"nt\">Create</span> <span class=\"nt\">Plane</span> <span class=\"nt\">for</span> <span class=\"nt\">reflection</span> <span class=\"nt\">texture</span>\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">plane</span> <span class=\"o\">=</span> <span class=\"nt\">new</span> <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">MovablePlane</span><span class=\"o\">(</span><span class=\"s2\">&quot;Plane&quot;</span><span class=\"o\">);</span>\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">plane-</span><span class=\"o\">&gt;</span><span class=\"nt\">d</span> <span class=\"o\">=</span> <span class=\"nt\">0</span><span class=\"o\">;</span>\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">plane-</span><span class=\"o\">&gt;</span><span class=\"nt\">normal</span> <span class=\"o\">=</span> <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">Vector3</span><span class=\"p\">::</span><span class=\"nd\">UNIT_Z</span><span class=\"o\">;</span>\n<span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">MeshManager</span><span class=\"p\">::</span><span class=\"nd\">getSingleton</span><span class=\"o\">()</span><span class=\"p\">.</span><span class=\"nc\">createPlane</span><span class=\"o\">(</span>\n  <span class=\"s2\">&quot;PlaneMesh&quot;</span><span class=\"o\">,</span>\n  <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">ResourceGroupManager</span><span class=\"p\">::</span><span class=\"nd\">DEFAULT_RESOURCE_GROUP_NAME</span><span class=\"o\">,</span>\n  <span class=\"o\">*(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">plane</span><span class=\"o\">),</span>\n  <span class=\"nt\">512</span><span class=\"o\">,</span> <span class=\"nt\">512</span><span class=\"o\">,</span> <span class=\"nt\">1</span><span class=\"o\">,</span> <span class=\"nt\">1</span><span class=\"o\">,</span>\n  <span class=\"nt\">true</span><span class=\"o\">,</span>\n  <span class=\"nt\">1</span><span class=\"o\">,</span> <span class=\"nt\">1</span><span class=\"o\">,</span> <span class=\"nt\">1</span><span class=\"o\">,</span>\n  <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">Vector3</span><span class=\"p\">::</span><span class=\"nd\">UNIT_Y</span><span class=\"o\">);</span>\n<span class=\"o\">(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">planeEntity</span> <span class=\"o\">=</span> <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">scene-</span><span class=\"o\">&gt;</span><span class=\"nt\">OgreSceneManager</span><span class=\"o\">()</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span>\n <span class=\"nt\">createEntity</span><span class=\"o\">(</span><span class=\"s2\">&quot;PlaneMesh&quot;</span><span class=\"o\">));</span>\n<span class=\"o\">(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">planeNode</span> <span class=\"o\">=</span> <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">scene-</span><span class=\"o\">&gt;</span><span class=\"nt\">OgreSceneManager</span><span class=\"o\">()</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span>\n <span class=\"nt\">getRootSceneNode</span><span class=\"o\">()</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span><span class=\"nt\">createChildSceneNode</span><span class=\"o\">());</span>\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">planeNode-</span><span class=\"o\">&gt;</span><span class=\"nt\">attachObject</span><span class=\"o\">(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">planeEntity</span><span class=\"o\">);</span>\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">planeNode-</span><span class=\"o\">&gt;</span><span class=\"nt\">attachObject</span><span class=\"o\">(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">plane</span><span class=\"o\">);</span>\n\n<span class=\"o\">//</span> <span class=\"nt\">QUESTION</span><span class=\"o\">:</span> <span class=\"nt\">Create</span> <span class=\"nt\">render</span> <span class=\"nt\">texture</span><span class=\"o\">,</span> <span class=\"nt\">if</span> <span class=\"nt\">I</span> <span class=\"nt\">give</span> <span class=\"nt\">it</span> <span class=\"nt\">the</span> <span class=\"nt\">same</span> <span class=\"nt\">name</span> <span class=\"nt\">as</span>\n<span class=\"o\">//</span> <span class=\"nt\">the</span> <span class=\"nt\">texture</span> <span class=\"nt\">in</span> <span class=\"nt\">scripts</span><span class=\"o\">/</span><span class=\"nt\">waves</span><span class=\"p\">.</span><span class=\"nc\">material</span><span class=\"o\">,</span> <span class=\"nt\">it</span> <span class=\"nt\">would</span> <span class=\"nt\">not</span> <span class=\"nt\">work</span> <span class=\"nt\">for</span> <span class=\"nt\">some</span> <span class=\"nt\">reason</span>\n<span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">TexturePtr</span> <span class=\"nt\">rttTexture</span> <span class=\"o\">=</span>\n  <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">TextureManager</span><span class=\"p\">::</span><span class=\"nd\">getSingleton</span><span class=\"o\">()</span><span class=\"p\">.</span><span class=\"nc\">createManual</span><span class=\"o\">(</span>\n    <span class=\"s2\">&quot;mytexture&quot;</span><span class=\"o\">,</span>\n    <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">ResourceGroupManager</span><span class=\"p\">::</span><span class=\"nd\">DEFAULT_RESOURCE_GROUP_NAME</span><span class=\"o\">,</span>\n    <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">TEX_TYPE_2D</span><span class=\"o\">,</span>\n    <span class=\"nt\">512</span><span class=\"o\">,</span> <span class=\"nt\">512</span><span class=\"o\">,</span>\n    <span class=\"nt\">0</span><span class=\"o\">,</span>\n    <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">PF_R8G8B8</span><span class=\"o\">,</span>\n    <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">TU_RENDERTARGET</span><span class=\"o\">);</span>\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">renderTarget</span> <span class=\"o\">=</span> <span class=\"nt\">rttTexture-</span><span class=\"o\">&gt;</span><span class=\"nt\">getBuffer</span><span class=\"o\">()</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span><span class=\"nt\">getRenderTarget</span><span class=\"o\">();</span>\n\n<span class=\"o\">//</span> <span class=\"nt\">Setup</span> <span class=\"nt\">camera</span>\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">camera</span> <span class=\"o\">=</span> <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">scene-</span><span class=\"o\">&gt;</span><span class=\"nt\">GetUserCamera</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"o\">)</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span><span class=\"nt\">OgreCamera</span><span class=\"o\">();</span>\n\n<span class=\"o\">//</span> <span class=\"nt\">Setup</span> <span class=\"nt\">render</span> <span class=\"nt\">texture</span>\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">renderTarget-</span><span class=\"o\">&gt;</span><span class=\"nt\">addViewport</span><span class=\"o\">(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">camera</span><span class=\"o\">);</span>\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">renderTarget-</span><span class=\"o\">&gt;</span><span class=\"nt\">getViewport</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"o\">)</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span><span class=\"nt\">setClearEveryFrame</span><span class=\"o\">(</span><span class=\"nt\">true</span><span class=\"o\">);</span>\n<span class=\"o\">(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">renderTarget-</span><span class=\"o\">&gt;</span><span class=\"nt\">getViewport</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"o\">)</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span>\n <span class=\"nt\">setBackgroundColour</span><span class=\"o\">(</span><span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">ColourValue</span><span class=\"p\">::</span><span class=\"nd\">Black</span><span class=\"o\">));</span>\n\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">renderTarget-</span><span class=\"o\">&gt;</span><span class=\"nt\">addListener</span><span class=\"o\">(</span><span class=\"nt\">this</span><span class=\"o\">);</span>\n\n<span class=\"o\">//</span> <span class=\"nt\">Camera</span> <span class=\"nt\">reflection</span> <span class=\"nt\">and</span> <span class=\"nt\">clip</span> <span class=\"nt\">plane</span> <span class=\"nt\">setup</span>\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">camera-</span><span class=\"o\">&gt;</span><span class=\"nt\">enableReflection</span><span class=\"o\">(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">plane</span><span class=\"o\">);</span>\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">camera-</span><span class=\"o\">&gt;</span><span class=\"nt\">enableCustomNearClipPlane</span><span class=\"o\">(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">plane</span><span class=\"o\">);</span>\n<span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">planeEntity-</span><span class=\"o\">&gt;</span><span class=\"nt\">setMaterialName</span><span class=\"o\">(</span><span class=\"s2\">&quot;reflection&quot;</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>\u200c</p>\n<p><strong>Material Script</strong></p>\n<div class=\"codehilite\"><pre><span></span>vertex_program reflectionV glsl\n{\n  source ../programs/reflection.vert\n}\n\nfragment_program reflectionF glsl\n{\n  source ../programs/reflection.frag\n  default_params\n  {\n    param_named reflectMap int 0\n  }\n}\n\nmaterial reflection\n{\n  technique GLSL\n  {\n    pass\n    {\n      // Not use shaders yet to simplify\n      scene_blend alpha_blend\n      texture_unit\n      {\n        texture mytexture\n        tex_address_mode clamp\n      }\n    }\n  }\n}\n</pre></div>\n\n\n<p>I have the <code>reflection</code> material in the material script with a texture <code>mytexture</code> that is not fully defined. Then in the C++ code, I try to edit the texture <code>mytexture</code> with the camera's render texture and then give the plane the <code>reflection</code> material.</p>\n<p>In the Fresnel example, they have a <code>Examples/FresnelReflectionRefraction</code>material in the material script with a texture <code>reflection</code> that is not fully defined. Then in the C++ code, they try to edit the texture <code>reflection</code> with the camera's render texture and then give the plane the <code>Examples/FresnelReflectionRefraction</code> material.</p>\n<p>I feel that I am doing the same thing in principle, but maybe I am missing an important step? Or something related to the resource group?</p>", "type": "rendered"}, "created_on": "2019-08-18T21:50:59.551163+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-18T21:50:59.561242+00:00", "type": "pullrequest_comment", "id": 113475205}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113475218.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113475218"}}, "parent": {"id": 113475205, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113475205.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113475205"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "I found the following exceptions in the ogre.log\n\n```\n14:42:57: OGRE EXCEPTION(2:InvalidParametersException): Parameter called reflectMap does not exist.  in GpuProgramParameters::_findNamedConstantDefinition at /build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/OgreGpuProgramParams.cpp (line 1719)\n14:42:57: Compiler error: invalid parameters in /home/tylerlum/vrx_ws/src/vrx/wave_gazebo/world_models/ocean_waves/materials/scripts/waves.material(11): setting of constant failed\n14:42:57: OGRE EXCEPTION(6:FileNotFoundException): Cannot locate resource mytexture in resource group General or any other group. in ResourceGroupManager::openResource at /build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/OgreResourceGroupManager.cpp (line 756)\n14:42:57: Error loading texture mytexture. Texture layer will be blank. Loading the texture failed with the following exception: OGRE EXCEPTION(6:FileNotFoundException): Cannot locate resource mytexture in resource group General or any other group. in ResourceGroupManager::openResource at /build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/OgreResourceGroupManager.cpp (line 756)\n14:42:57: OGRE EXCEPTION(6:FileNotFoundException): Cannot locate resource mytexture in resource group General or any other group. in ResourceGroupManager::openResource at /build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/OgreResourceGroupManager.cpp (line 756)\n14:42:57: Error loading texture mytexture. Texture layer will be blank. Loading the texture failed with the following exception: OGRE EXCEPTION(6:FileNotFoundException): Cannot locate resource mytexture in resource group General or any other group. in ResourceGroupManager::openResource at /build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/OgreResourceGroupManager.cpp (line 756)\n```", "markup": "markdown", "html": "<p>I found the following exceptions in the ogre.log</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">42</span><span class=\"o\">:</span><span class=\"mi\">57</span><span class=\"o\">:</span> <span class=\"n\">OGRE</span> <span class=\"n\">EXCEPTION</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">InvalidParametersException</span><span class=\"o\">):</span> <span class=\"n\">Parameter</span> <span class=\"n\">called</span> <span class=\"n\">reflectMap</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">exist</span><span class=\"o\">.</span>  <span class=\"k\">in</span> <span class=\"n\">GpuProgramParameters</span><span class=\"o\">::</span><span class=\"n\">_findNamedConstantDefinition</span> <span class=\"n\">at</span> <span class=\"sr\">/build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/</span><span class=\"n\">OgreGpuProgramParams</span><span class=\"o\">.</span><span class=\"na\">cpp</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"mi\">1719</span><span class=\"o\">)</span>\n<span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">42</span><span class=\"o\">:</span><span class=\"mi\">57</span><span class=\"o\">:</span> <span class=\"n\">Compiler</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">parameters</span> <span class=\"k\">in</span> <span class=\"sr\">/home/tylerlum/vrx_ws/src/vrx/wave_gazebo/world_models/ocean_waves/materials/scripts/</span><span class=\"n\">waves</span><span class=\"o\">.</span><span class=\"na\">material</span><span class=\"o\">(</span><span class=\"mi\">11</span><span class=\"o\">):</span> <span class=\"n\">setting</span> <span class=\"n\">of</span> <span class=\"n\">constant</span> <span class=\"n\">failed</span>\n<span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">42</span><span class=\"o\">:</span><span class=\"mi\">57</span><span class=\"o\">:</span> <span class=\"n\">OGRE</span> <span class=\"n\">EXCEPTION</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"n\">FileNotFoundException</span><span class=\"o\">):</span> <span class=\"n\">Cannot</span> <span class=\"n\">locate</span> <span class=\"n\">resource</span> <span class=\"n\">mytexture</span> <span class=\"k\">in</span> <span class=\"n\">resource</span> <span class=\"n\">group</span> <span class=\"n\">General</span> <span class=\"n\">or</span> <span class=\"n\">any</span> <span class=\"n\">other</span> <span class=\"n\">group</span><span class=\"o\">.</span> <span class=\"k\">in</span> <span class=\"n\">ResourceGroupManager</span><span class=\"o\">::</span><span class=\"n\">openResource</span> <span class=\"n\">at</span> <span class=\"sr\">/build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/</span><span class=\"n\">OgreResourceGroupManager</span><span class=\"o\">.</span><span class=\"na\">cpp</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"mi\">756</span><span class=\"o\">)</span>\n<span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">42</span><span class=\"o\">:</span><span class=\"mi\">57</span><span class=\"o\">:</span> <span class=\"n\">Error</span> <span class=\"n\">loading</span> <span class=\"n\">texture</span> <span class=\"n\">mytexture</span><span class=\"o\">.</span> <span class=\"n\">Texture</span> <span class=\"n\">layer</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">blank</span><span class=\"o\">.</span> <span class=\"n\">Loading</span> <span class=\"n\">the</span> <span class=\"n\">texture</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">OGRE</span> <span class=\"n\">EXCEPTION</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"n\">FileNotFoundException</span><span class=\"o\">):</span> <span class=\"n\">Cannot</span> <span class=\"n\">locate</span> <span class=\"n\">resource</span> <span class=\"n\">mytexture</span> <span class=\"k\">in</span> <span class=\"n\">resource</span> <span class=\"n\">group</span> <span class=\"n\">General</span> <span class=\"n\">or</span> <span class=\"n\">any</span> <span class=\"n\">other</span> <span class=\"n\">group</span><span class=\"o\">.</span> <span class=\"k\">in</span> <span class=\"n\">ResourceGroupManager</span><span class=\"o\">::</span><span class=\"n\">openResource</span> <span class=\"n\">at</span> <span class=\"sr\">/build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/</span><span class=\"n\">OgreResourceGroupManager</span><span class=\"o\">.</span><span class=\"na\">cpp</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"mi\">756</span><span class=\"o\">)</span>\n<span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">42</span><span class=\"o\">:</span><span class=\"mi\">57</span><span class=\"o\">:</span> <span class=\"n\">OGRE</span> <span class=\"n\">EXCEPTION</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"n\">FileNotFoundException</span><span class=\"o\">):</span> <span class=\"n\">Cannot</span> <span class=\"n\">locate</span> <span class=\"n\">resource</span> <span class=\"n\">mytexture</span> <span class=\"k\">in</span> <span class=\"n\">resource</span> <span class=\"n\">group</span> <span class=\"n\">General</span> <span class=\"n\">or</span> <span class=\"n\">any</span> <span class=\"n\">other</span> <span class=\"n\">group</span><span class=\"o\">.</span> <span class=\"k\">in</span> <span class=\"n\">ResourceGroupManager</span><span class=\"o\">::</span><span class=\"n\">openResource</span> <span class=\"n\">at</span> <span class=\"sr\">/build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/</span><span class=\"n\">OgreResourceGroupManager</span><span class=\"o\">.</span><span class=\"na\">cpp</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"mi\">756</span><span class=\"o\">)</span>\n<span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">42</span><span class=\"o\">:</span><span class=\"mi\">57</span><span class=\"o\">:</span> <span class=\"n\">Error</span> <span class=\"n\">loading</span> <span class=\"n\">texture</span> <span class=\"n\">mytexture</span><span class=\"o\">.</span> <span class=\"n\">Texture</span> <span class=\"n\">layer</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">blank</span><span class=\"o\">.</span> <span class=\"n\">Loading</span> <span class=\"n\">the</span> <span class=\"n\">texture</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">OGRE</span> <span class=\"n\">EXCEPTION</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"n\">FileNotFoundException</span><span class=\"o\">):</span> <span class=\"n\">Cannot</span> <span class=\"n\">locate</span> <span class=\"n\">resource</span> <span class=\"n\">mytexture</span> <span class=\"k\">in</span> <span class=\"n\">resource</span> <span class=\"n\">group</span> <span class=\"n\">General</span> <span class=\"n\">or</span> <span class=\"n\">any</span> <span class=\"n\">other</span> <span class=\"n\">group</span><span class=\"o\">.</span> <span class=\"k\">in</span> <span class=\"n\">ResourceGroupManager</span><span class=\"o\">::</span><span class=\"n\">openResource</span> <span class=\"n\">at</span> <span class=\"sr\">/build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/</span><span class=\"n\">OgreResourceGroupManager</span><span class=\"o\">.</span><span class=\"na\">cpp</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"mi\">756</span><span class=\"o\">)</span>\n</pre></div>", "type": "rendered"}, "created_on": "2019-08-18T21:52:10.135489+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-18T21:52:10.143694+00:00", "type": "pullrequest_comment", "id": 113475218}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113475331.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113475331"}}, "parent": {"id": 113475218, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113475218.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113475218"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "[https://forums.ogre3d.org/viewtopic.php?t=48096](https://forums.ogre3d.org/viewtopic.php?t=48096) likely need to parse resources.cfg", "markup": "markdown", "html": "<p><a data-is-external-link=\"true\" href=\"https://forums.ogre3d.org/viewtopic.php?t=48096\" rel=\"nofollow\">https://forums.ogre3d.org/viewtopic.php?t=48096</a> likely need to parse resources.cfg</p>", "type": "rendered"}, "created_on": "2019-08-18T22:04:01.725204+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-18T22:04:01.736218+00:00", "type": "pullrequest_comment", "id": 113475331}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113607317.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113607317"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "I\u2019m catching up on the changes here. There\u2019s quite a bit going on. It looks like the latest commit is not what I should be looking at?\n\nOne suggestion, do you mind moving your code to a separate model and visual plugin? That way it\u2019s easier to review the changes and make comments.", "markup": "markdown", "html": "<p>I\u2019m catching up on the changes here. There\u2019s quite a bit going on. It looks like the latest commit is not what I should be looking at?</p>\n<p>One suggestion, do you mind moving your code to a separate model and visual plugin? That way it\u2019s easier to review the changes and make comments.</p>", "type": "rendered"}, "created_on": "2019-08-19T17:35:11.316441+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2019-08-19T17:35:11.324587+00:00", "type": "pullrequest_comment", "id": 113607317}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113607436.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113607436"}}, "parent": {"id": 113607317, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113607317.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113607317"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "Yes, thanks for reviewing. I tried making a new Visual plugin, but I was having issues setting it up. I put the visual plugin in the model\u2019s visual tags, but it was not showing up and not even entering the load function. I can try again to move it to another model/plugin. In the meantime, the comments above explain the status of various commits. Could you please review 1532:[d6e7a4b85e00](#!/osrf/vrx/commits/d6e7a4b85e00) \\(working setup with very basic reflection\\) and 1537:[95f8316d98e8](#!/osrf/vrx/commits/95f8316d98e8) \\(not working setup, can\u2019t find material\\) Thank you!", "markup": "markdown", "html": "<p>Yes, thanks for reviewing. I tried making a new Visual plugin, but I was having issues setting it up. I put the visual plugin in the model\u2019s visual tags, but it was not showing up and not even entering the load function. I can try again to move it to another model/plugin. In the meantime, the comments above explain the status of various commits. Could you please review 1532:<a data-is-external-link=\"true\" href=\"#!/osrf/vrx/commits/d6e7a4b85e00\" rel=\"nofollow\">d6e7a4b85e00</a> (working setup with very basic reflection) and 1537:<a data-is-external-link=\"true\" href=\"#!/osrf/vrx/commits/95f8316d98e8\" rel=\"nofollow\">95f8316d98e8</a> (not working setup, can\u2019t find material) Thank you!</p>", "type": "rendered"}, "created_on": "2019-08-19T17:36:17.027301+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-19T17:39:01.947667+00:00", "type": "pullrequest_comment", "id": 113607436}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113611650.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113611650"}}, "parent": {"id": 113607436, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113607436.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113607436"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "I have created a simple example plugin that I am having issues starting. Could you take a look and let me know if you see something wrong? Thank you! [https://github.com/tylerlum/gazebo\\_plugin\\_setup/tree/master](https://github.com/tylerlum/gazebo_plugin_setup/tree/master)", "markup": "markdown", "html": "<p>I have created a simple example plugin that I am having issues starting. Could you take a look and let me know if you see something wrong? Thank you! <a data-is-external-link=\"true\" href=\"https://github.com/tylerlum/gazebo_plugin_setup/tree/master\" rel=\"nofollow\">https://github.com/tylerlum/gazebo_plugin_setup/tree/master</a></p>", "type": "rendered"}, "created_on": "2019-08-19T18:12:04.902183+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-19T18:12:04.913079+00:00", "type": "pullrequest_comment", "id": 113611650}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113611893.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113611893"}}, "parent": {"id": 113611650, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113611650.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113611650"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "great, I\u2019ll take a look, thanks", "markup": "markdown", "html": "<p>great, I\u2019ll take a look, thanks</p>", "type": "rendered"}, "created_on": "2019-08-19T18:14:17.954757+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2019-08-19T18:14:17.964817+00:00", "type": "pullrequest_comment", "id": 113611893}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113632378.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113632378"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "1540:0bc8f5210299 Comment out shader and most of material \\(near empty material\\), in C\\+\\+ get material and give it a texture, but will not run  \nWhat I did was make the material `reflection` essentiall empty \\(no texture, no shader\\). Then in plugin, I get the material `reflection` added a new texture `mytexture2` and then set `reflection` material onto the plane.  This was to fix the resource issue when the texture was not found.\n\nERROR when running `roslaunch vrx_gazebo sandisland.launch verbose:=true`\n\n```\ngzclient: /build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/OgreTextureUnitState.cpp:160: Ogre::TextureUnitState& Ogre::TextureUnitState::operator=(const Ogre::TextureUnitState&): Assertion `mEffects.empty()' failed.\nAborted (core dumped)\n[gazebo_gui-3] process has died [pid 20756, exit code 134, cmd /opt/ros/melodic/lib/gazebo_ros/gzclient --verbose __name:=gazebo_gui __log:=/home/tylerlum/.ros/log/7b958694-c2c6-11e9-b515-dcfb48e97aeb/gazebo_gui-3.log].\nlog file: /home/tylerlum/.ros/log/7b958694-c2c6-11e9-b515-dcfb48e97aeb/gazebo_gui-3*.log\n```", "markup": "markdown", "html": "<p>1540:<a href=\"#!/osrf/vrx/commits/0bc8f5210299\" rel=\"nofollow\" class=\"ap-connect-link\">0bc8f5210299</a> Comment out shader and most of material (near empty material), in C++ get material and give it a texture, but will not run<br />\nWhat I did was make the material <code>reflection</code> essentiall empty (no texture, no shader). Then in plugin, I get the material <code>reflection</code> added a new texture <code>mytexture2</code> and then set <code>reflection</code> material onto the plane.  This was to fix the resource issue when the texture was not found.</p>\n<p>ERROR when running <code>roslaunch vrx_gazebo sandisland.launch verbose:=true</code></p>\n<div class=\"codehilite\"><pre><span></span>gzclient: /build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/OgreTextureUnitState.cpp:160: Ogre::TextureUnitState&amp; Ogre::TextureUnitState::operator=(const Ogre::TextureUnitState&amp;): Assertion `mEffects.empty()&#39; failed.\nAborted (core dumped)\n[gazebo_gui-3] process has died [pid 20756, exit code 134, cmd /opt/ros/melodic/lib/gazebo_ros/gzclient --verbose __name:=gazebo_gui __log:=/home/tylerlum/.ros/log/7b958694-c2c6-11e9-b515-dcfb48e97aeb/gazebo_gui-3.log].\nlog file: /home/tylerlum/.ros/log/7b958694-c2c6-11e9-b515-dcfb48e97aeb/gazebo_gui-3*.log\n</pre></div>", "type": "rendered"}, "created_on": "2019-08-19T21:29:05.804787+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-19T21:29:05.811679+00:00", "type": "pullrequest_comment", "id": 113632378}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113632490.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113632490"}}, "parent": {"id": 113632378, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113632378.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113632378"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "Added many print lines to investigate when the runtime issue occurs. It happens outside any of the functions defined in the plugin.", "markup": "markdown", "html": "<p>Added many print lines to investigate when the runtime issue occurs. It happens outside any of the functions defined in the plugin.</p>", "type": "rendered"}, "created_on": "2019-08-19T21:30:02.806630+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-19T21:30:02.816097+00:00", "type": "pullrequest_comment", "id": 113632490}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113651604.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113651604"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "In 1547:2f9414884e09, I have a very simple vertex and fragment shader. However, it is still not working.\n\n![](data/bitbucket.org/repo/BgXLzgM/images/1211094543-image.png)\nThis is what the plane looks like \\(does not have projectiveTexturing turned on, so it simply puts the image of the user camera onto the surface\\) The big black blob is actually the WAM-V in the texture. ProjectiveTexturing had to be turned off because it would not allow shader use, as per Ogre Manual:\n\n```\nvoid Ogre::TextureUnitState::setProjectiveTexturing    (    bool     enabled,\nconst Frustum *     projectionSettings = 0 \n)        \nEnables or disables projective texturing on this texture unit.\n\nRemarks\nProjective texturing allows you to generate texture coordinates based on a Frustum, which gives the impression that a texture is being projected onto the surface. Note that once you have called this method, the texture unit continues to monitor the Frustum you passed in and the projection will change if you can alter it. It also means that you must ensure that the Frustum object you pass a pointer to remains in existence for as long as this TextureUnitState does.\nThis effect cannot be combined with other texture generation effects, such as environment mapping. It also has no effect on passes which have a vertex program enabled - projective texturing has to be done in the vertex program instead.\n```\n\n**C\\+\\+ Code** I am simply creating a new texture called `mytexture`, setting it up with the user camera for render-to-texture, then adding this texture to the texture unit in the `reflection` material.\n\n```\n    Ogre::TexturePtr rttTexture =\n      Ogre::TextureManager::getSingleton().createManual(\n        \"mytexture\",\n        Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,\n        Ogre::TEX_TYPE_2D,\n        512, 512,\n        0,\n        Ogre::PF_R8G8B8,\n        Ogre::TU_RENDERTARGET);\n    this->data->renderTarget = rttTexture->getBuffer()->getRenderTarget();\n\n    // Setup camera\n    this->data->camera = this->data->scene->GetUserCamera(0)->OgreCamera();\n\n    // Setup render texture\n    this->data->renderTarget->addViewport(this->data->camera);\n    this->data->renderTarget->getViewport(0)->setClearEveryFrame(true);\n    (this->data->renderTarget->getViewport(0)->\n     setBackgroundColour(Ogre::ColourValue::Black));\n\n    Ogre::MaterialPtr renderMaterial = Ogre::MaterialManager::getSingleton().getByName(\"reflection\");\n    Ogre::TextureUnitState* t = (renderMaterial->getTechnique(0)->getPass(0)->getTextureUnitState(0));\n    t->setTexture(rttTexture);\n\n    t->setTextureAddressingMode(Ogre::TextureUnitState::TAM_CLAMP);\n    this->data->renderTarget->addListener(this);\n\n    // Camera reflection and clip plane setup\n    this->data->planeEntity->setMaterialName(\"reflection\");\n```\n\n**Material Script** I have a material called `reflection` that has a simple vertex and fragment shader. It has a texture\\_unit with its texture not yet defined, as it will be defined at runtime.\n\n```\nvertex_program reflectionV glsl\n{\n  source ../programs/reflection.vert\n}\n\nfragment_program reflectionF glsl\n{\n  source ../programs/reflection.frag\n}\n\nmaterial reflection\n{\n  technique GLSL\n  {\n    pass\n    {\n      scene_blend alpha_blend\n      vertex_program_ref reflectionV\n      {\n      }\n\n      fragment_program_ref reflectionF\n      {\n        param_named reflectMap int 0\n      }\n\n      texture_unit\n      {\n        // Will be filled in at runtime\n        // texture mytexture\n        tex_address_mode clamp\n      }\n    }\n  }\n}\n```\n\nI get the following output in ~/.gazebo/ogre.log\n\n```\n20:16:27: OGRE EXCEPTION(2:InvalidParametersException): Parameter called reflectMap does not exist.  in GpuProgramParameters::_findNamedConstantDefinition at /build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/OgreGpuProgramParams.cpp (line 1719)\n```\n\nThe strange thing is if I put random text into `reflection.vert` or `reflection.frag`, then it doesn\u2019t even have any errors. I believe the shaders are not even being run. I am not sure why.", "markup": "markdown", "html": "<p>In 1547:<a href=\"#!/osrf/vrx/commits/2f9414884e09\" rel=\"nofollow\" class=\"ap-connect-link\">2f9414884e09</a>, I have a very simple vertex and fragment shader. However, it is still not working.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/1211094543-image.png\" />\nThis is what the plane looks like (does not have projectiveTexturing turned on, so it simply puts the image of the user camera onto the surface) The big black blob is actually the WAM-V in the texture. ProjectiveTexturing had to be turned off because it would not allow shader use, as per Ogre Manual:</p>\n<div class=\"codehilite\"><pre><span></span>void Ogre::TextureUnitState::setProjectiveTexturing    (    bool     enabled,\nconst Frustum *     projectionSettings = 0 \n)        \nEnables or disables projective texturing on this texture unit.\n\nRemarks\nProjective texturing allows you to generate texture coordinates based on a Frustum, which gives the impression that a texture is being projected onto the surface. Note that once you have called this method, the texture unit continues to monitor the Frustum you passed in and the projection will change if you can alter it. It also means that you must ensure that the Frustum object you pass a pointer to remains in existence for as long as this TextureUnitState does.\nThis effect cannot be combined with other texture generation effects, such as environment mapping. It also has no effect on passes which have a vertex program enabled - projective texturing has to be done in the vertex program instead.\n</pre></div>\n\n\n<p><strong>C++ Code</strong> I am simply creating a new texture called <code>mytexture</code>, setting it up with the user camera for render-to-texture, then adding this texture to the texture unit in the <code>reflection</code> material.</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">TexturePtr</span> <span class=\"nt\">rttTexture</span> <span class=\"o\">=</span>\n      <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">TextureManager</span><span class=\"p\">::</span><span class=\"nd\">getSingleton</span><span class=\"o\">()</span><span class=\"p\">.</span><span class=\"nc\">createManual</span><span class=\"o\">(</span>\n        <span class=\"s2\">&quot;mytexture&quot;</span><span class=\"o\">,</span>\n        <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">ResourceGroupManager</span><span class=\"p\">::</span><span class=\"nd\">DEFAULT_RESOURCE_GROUP_NAME</span><span class=\"o\">,</span>\n        <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">TEX_TYPE_2D</span><span class=\"o\">,</span>\n        <span class=\"nt\">512</span><span class=\"o\">,</span> <span class=\"nt\">512</span><span class=\"o\">,</span>\n        <span class=\"nt\">0</span><span class=\"o\">,</span>\n        <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">PF_R8G8B8</span><span class=\"o\">,</span>\n        <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">TU_RENDERTARGET</span><span class=\"o\">);</span>\n    <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">renderTarget</span> <span class=\"o\">=</span> <span class=\"nt\">rttTexture-</span><span class=\"o\">&gt;</span><span class=\"nt\">getBuffer</span><span class=\"o\">()</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span><span class=\"nt\">getRenderTarget</span><span class=\"o\">();</span>\n\n    <span class=\"o\">//</span> <span class=\"nt\">Setup</span> <span class=\"nt\">camera</span>\n    <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">camera</span> <span class=\"o\">=</span> <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">scene-</span><span class=\"o\">&gt;</span><span class=\"nt\">GetUserCamera</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"o\">)</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span><span class=\"nt\">OgreCamera</span><span class=\"o\">();</span>\n\n    <span class=\"o\">//</span> <span class=\"nt\">Setup</span> <span class=\"nt\">render</span> <span class=\"nt\">texture</span>\n    <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">renderTarget-</span><span class=\"o\">&gt;</span><span class=\"nt\">addViewport</span><span class=\"o\">(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">camera</span><span class=\"o\">);</span>\n    <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">renderTarget-</span><span class=\"o\">&gt;</span><span class=\"nt\">getViewport</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"o\">)</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span><span class=\"nt\">setClearEveryFrame</span><span class=\"o\">(</span><span class=\"nt\">true</span><span class=\"o\">);</span>\n    <span class=\"o\">(</span><span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">renderTarget-</span><span class=\"o\">&gt;</span><span class=\"nt\">getViewport</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"o\">)</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span>\n     <span class=\"nt\">setBackgroundColour</span><span class=\"o\">(</span><span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">ColourValue</span><span class=\"p\">::</span><span class=\"nd\">Black</span><span class=\"o\">));</span>\n\n    <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">MaterialPtr</span> <span class=\"nt\">renderMaterial</span> <span class=\"o\">=</span> <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">MaterialManager</span><span class=\"p\">::</span><span class=\"nd\">getSingleton</span><span class=\"o\">()</span><span class=\"p\">.</span><span class=\"nc\">getByName</span><span class=\"o\">(</span><span class=\"s2\">&quot;reflection&quot;</span><span class=\"o\">);</span>\n    <span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">TextureUnitState</span><span class=\"o\">*</span> <span class=\"nt\">t</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nt\">renderMaterial-</span><span class=\"o\">&gt;</span><span class=\"nt\">getTechnique</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"o\">)</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span><span class=\"nt\">getPass</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"o\">)</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span><span class=\"nt\">getTextureUnitState</span><span class=\"o\">(</span><span class=\"nt\">0</span><span class=\"o\">));</span>\n    <span class=\"nt\">t-</span><span class=\"o\">&gt;</span><span class=\"nt\">setTexture</span><span class=\"o\">(</span><span class=\"nt\">rttTexture</span><span class=\"o\">);</span>\n\n    <span class=\"nt\">t-</span><span class=\"o\">&gt;</span><span class=\"nt\">setTextureAddressingMode</span><span class=\"o\">(</span><span class=\"nt\">Ogre</span><span class=\"p\">::</span><span class=\"nd\">TextureUnitState</span><span class=\"p\">::</span><span class=\"nd\">TAM_CLAMP</span><span class=\"o\">);</span>\n    <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">renderTarget-</span><span class=\"o\">&gt;</span><span class=\"nt\">addListener</span><span class=\"o\">(</span><span class=\"nt\">this</span><span class=\"o\">);</span>\n\n    <span class=\"o\">//</span> <span class=\"nt\">Camera</span> <span class=\"nt\">reflection</span> <span class=\"nt\">and</span> <span class=\"nt\">clip</span> <span class=\"nt\">plane</span> <span class=\"nt\">setup</span>\n    <span class=\"nt\">this-</span><span class=\"o\">&gt;</span><span class=\"nt\">data-</span><span class=\"o\">&gt;</span><span class=\"nt\">planeEntity-</span><span class=\"o\">&gt;</span><span class=\"nt\">setMaterialName</span><span class=\"o\">(</span><span class=\"s2\">&quot;reflection&quot;</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p><strong>Material Script</strong> I have a material called <code>reflection</code> that has a simple vertex and fragment shader. It has a texture_unit with its texture not yet defined, as it will be defined at runtime.</p>\n<div class=\"codehilite\"><pre><span></span>vertex_program reflectionV glsl\n{\n  source ../programs/reflection.vert\n}\n\nfragment_program reflectionF glsl\n{\n  source ../programs/reflection.frag\n}\n\nmaterial reflection\n{\n  technique GLSL\n  {\n    pass\n    {\n      scene_blend alpha_blend\n      vertex_program_ref reflectionV\n      {\n      }\n\n      fragment_program_ref reflectionF\n      {\n        param_named reflectMap int 0\n      }\n\n      texture_unit\n      {\n        // Will be filled in at runtime\n        // texture mytexture\n        tex_address_mode clamp\n      }\n    }\n  }\n}\n</pre></div>\n\n\n<p>I get the following output in ~/.gazebo/ogre.log</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">20</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">27</span><span class=\"o\">:</span> <span class=\"n\">OGRE</span> <span class=\"n\">EXCEPTION</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">InvalidParametersException</span><span class=\"o\">):</span> <span class=\"n\">Parameter</span> <span class=\"n\">called</span> <span class=\"n\">reflectMap</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">exist</span><span class=\"o\">.</span>  <span class=\"k\">in</span> <span class=\"n\">GpuProgramParameters</span><span class=\"o\">::</span><span class=\"n\">_findNamedConstantDefinition</span> <span class=\"n\">at</span> <span class=\"sr\">/build/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/</span><span class=\"n\">OgreGpuProgramParams</span><span class=\"o\">.</span><span class=\"na\">cpp</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"mi\">1719</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>The strange thing is if I put random text into <code>reflection.vert</code> or <code>reflection.frag</code>, then it doesn\u2019t even have any errors. I believe the shaders are not even being run. I am not sure why.</p>", "type": "rendered"}, "created_on": "2019-08-20T03:28:39.523126+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-20T03:35:35.976944+00:00", "type": "pullrequest_comment", "id": 113651604}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113652023.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113652023"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "Also, do I need to write `#version 130` at the top? It is not done in the old shaders/material script, but I am not sure if it makes a difference. I have not been able to ever get the render-to-texture texture to be worked with in the shaders. I have only been able to either play around with the shaders manually, without a render texture OR not use any shaders and then use t->setProjectiveTexturing\\(\\) to get a very simple reflection working, as shown in the comments above. ", "markup": "markdown", "html": "<p>Also, do I need to write <code>#version 130</code> at the top? It is not done in the old shaders/material script, but I am not sure if it makes a difference. I have not been able to ever get the render-to-texture texture to be worked with in the shaders. I have only been able to either play around with the shaders manually, without a render texture OR not use any shaders and then use t-&gt;setProjectiveTexturing() to get a very simple reflection working, as shown in the comments above. </p>", "type": "rendered"}, "created_on": "2019-08-20T03:37:31.991220+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-20T03:37:32.000046+00:00", "type": "pullrequest_comment", "id": 113652023}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113652697.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113652697"}}, "parent": {"id": 113652023, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113652023.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113652023"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "does it help if you define `reflectMap` in fragment\\_program instead?\n\n```\nfragment_program reflectionF glsl\n{\n  source ../programs/reflection.frag\n  default_params\n  {\n    param_named reflectMap int 0\n  }\n}\n```\n\nOne way to verify if your shaders are loaded is to just set the output color in your fragment shaders to something like:\n\n```\ngl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n```\n\nIf the shaders are loaded correctly then the plane should appear red", "markup": "markdown", "html": "<p>does it help if you define <code>reflectMap</code> in fragment_program instead?</p>\n<div class=\"codehilite\"><pre><span></span>fragment_program reflectionF glsl\n{\n  source ../programs/reflection.frag\n  default_params\n  {\n    param_named reflectMap int 0\n  }\n}\n</pre></div>\n\n\n<p>One way to verify if your shaders are loaded is to just set the output color in your fragment shaders to something like:</p>\n<div class=\"codehilite\"><pre><span></span>gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n</pre></div>\n\n\n<p>If the shaders are loaded correctly then the plane should appear red</p>", "type": "rendered"}, "created_on": "2019-08-20T03:50:12.637097+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2019-08-20T03:50:12.646355+00:00", "type": "pullrequest_comment", "id": 113652697}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113652853.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113652853"}}, "parent": {"id": 113652697, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113652697.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113652697"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "I made the change in 1548:656f4e40b75a, it did not appear any different.", "markup": "markdown", "html": "<p>I made the change in 1548:<a href=\"#!/osrf/vrx/commits/656f4e40b75a\" rel=\"nofollow\" class=\"ap-connect-link\">656f4e40b75a</a>, it did not appear any different.</p>", "type": "rendered"}, "created_on": "2019-08-20T03:53:30.010744+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-20T03:53:30.022408+00:00", "type": "pullrequest_comment", "id": 113652853}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113652987.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113652987"}}, "parent": {"id": 113652853, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113652853.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113652853"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "I made the default\\_params change in 1549:cb426c264bf6, no difference either.", "markup": "markdown", "html": "<p>I made the default_params change in 1549:<a href=\"#!/osrf/vrx/commits/cb426c264bf6\" rel=\"nofollow\" class=\"ap-connect-link\">cb426c264bf6</a>, no difference either.</p>", "type": "rendered"}, "created_on": "2019-08-20T03:55:34.655089+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-20T03:55:34.665275+00:00", "type": "pullrequest_comment", "id": 113652987}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113785514.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113785514"}}, "parent": {"id": 113652987, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113652987.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113652987"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "This should help. I see the reflection with these changes:\n\n\u200c\n\n```\ndiff -r cb426c264bf6 wave_gazebo/world_models/ocean_waves/materials/programs/reflection.frag\n--- a/wave_gazebo/world_models/ocean_waves/materials/programs/reflection.frag   Mon Aug 19 20:54:46 2019 -0700\n+++ b/wave_gazebo/world_models/ocean_waves/materials/programs/reflection.frag   Tue Aug 20 11:06:20 2019 -0700\n@@ -8,6 +8,6 @@\n   vec2 final = projectionCoord.xy / projectionCoord.w;\n   vec4 reflectionColour = texture2D(reflectMap, final);\n\n-  //gl_FragColor = reflectionColour;\n-  gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n+  gl_FragColor = reflectionColour;\n+  // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n }\ndiff -r cb426c264bf6 wave_gazebo_plugins/src/WavefieldVisualPlugin.cc\n--- a/wave_gazebo_plugins/src/WavefieldVisualPlugin.cc  Mon Aug 19 20:54:46 2019 -0700\n+++ b/wave_gazebo_plugins/src/WavefieldVisualPlugin.cc  Tue Aug 20 11:06:20 2019 -0700\n@@ -142,10 +142,12 @@\n     this->data->camera = this->data->scene->GetUserCamera(0)->OgreCamera();\n\n     // Setup render texture\n+    this->data->renderTarget->setAutoUpdated(false);\n     this->data->renderTarget->addViewport(this->data->camera);\n     this->data->renderTarget->getViewport(0)->setClearEveryFrame(true);\n-    (this->data->renderTarget->getViewport(0)->\n-     setBackgroundColour(Ogre::ColourValue::Black));\n+    this->data->renderTarget->getViewport(0)->\n+     setBackgroundColour(rendering::Conversions::Convert(\n+     this->data->scene->BackgroundColor()));\n\n     // Ogre::MaterialPtr renderMaterial =\n       // Ogre::MaterialManager::getSingleton().create(\n```\n\n\u200c\n\nI think the important bit is `this->data->renderTarget->setAutoUpdated(false);`. Since we're calling `this->data->renderTarget->update()` manually, we need to tell it to disable auto update.", "markup": "markdown", "html": "<p>This should help. I see the reflection with these changes:</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r cb426c264bf6 wave_gazebo/world_models/ocean_waves/materials/programs/reflection.frag</span>\n<span class=\"gd\">--- a/wave_gazebo/world_models/ocean_waves/materials/programs/reflection.frag   Mon Aug 19 20:54:46 2019 -0700</span>\n<span class=\"gi\">+++ b/wave_gazebo/world_models/ocean_waves/materials/programs/reflection.frag   Tue Aug 20 11:06:20 2019 -0700</span>\n<span class=\"gu\">@@ -8,6 +8,6 @@</span>\n   vec2 final = projectionCoord.xy / projectionCoord.w;\n   vec4 reflectionColour = texture2D(reflectMap, final);\n\n<span class=\"gd\">-  //gl_FragColor = reflectionColour;</span>\n<span class=\"gd\">-  gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span>\n<span class=\"gi\">+  gl_FragColor = reflectionColour;</span>\n<span class=\"gi\">+  // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span>\n }\n<span class=\"gh\">diff -r cb426c264bf6 wave_gazebo_plugins/src/WavefieldVisualPlugin.cc</span>\n<span class=\"gd\">--- a/wave_gazebo_plugins/src/WavefieldVisualPlugin.cc  Mon Aug 19 20:54:46 2019 -0700</span>\n<span class=\"gi\">+++ b/wave_gazebo_plugins/src/WavefieldVisualPlugin.cc  Tue Aug 20 11:06:20 2019 -0700</span>\n<span class=\"gu\">@@ -142,10 +142,12 @@</span>\n     this-&gt;data-&gt;camera = this-&gt;data-&gt;scene-&gt;GetUserCamera(0)-&gt;OgreCamera();\n\n     // Setup render texture\n<span class=\"gi\">+    this-&gt;data-&gt;renderTarget-&gt;setAutoUpdated(false);</span>\n     this-&gt;data-&gt;renderTarget-&gt;addViewport(this-&gt;data-&gt;camera);\n     this-&gt;data-&gt;renderTarget-&gt;getViewport(0)-&gt;setClearEveryFrame(true);\n<span class=\"gd\">-    (this-&gt;data-&gt;renderTarget-&gt;getViewport(0)-&gt;</span>\n<span class=\"gd\">-     setBackgroundColour(Ogre::ColourValue::Black));</span>\n<span class=\"gi\">+    this-&gt;data-&gt;renderTarget-&gt;getViewport(0)-&gt;</span>\n<span class=\"gi\">+     setBackgroundColour(rendering::Conversions::Convert(</span>\n<span class=\"gi\">+     this-&gt;data-&gt;scene-&gt;BackgroundColor()));</span>\n\n     // Ogre::MaterialPtr renderMaterial =\n       // Ogre::MaterialManager::getSingleton().create(\n</pre></div>\n\n\n<p>\u200c</p>\n<p>I think the important bit is <code>this-&gt;data-&gt;renderTarget-&gt;setAutoUpdated(false);</code>. Since we're calling <code>this-&gt;data-&gt;renderTarget-&gt;update()</code> manually, we need to tell it to disable auto update.</p>", "type": "rendered"}, "created_on": "2019-08-20T18:06:59.939738+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2019-08-20T18:08:18.019703+00:00", "type": "pullrequest_comment", "id": 113785514}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113788833.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113788833"}}, "parent": {"id": 113785514, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113785514.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113785514"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "Great! I will try this out thank you.", "markup": "markdown", "html": "<p>Great! I will try this out thank you.</p>", "type": "rendered"}, "created_on": "2019-08-20T18:34:18.234284+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-20T18:34:18.254732+00:00", "type": "pullrequest_comment", "id": 113788833}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113789896.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113789896"}}, "parent": {"id": 113785514, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113785514.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113785514"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "In 1550:a525d4c3dc7c, I applied your changes. However, my issue is that I still get the Ogre exception:\n\n```\n11:41:29: OGRE EXCEPTION(2:InvalidParametersException): Parameter called reflectMap does not exist.  in GpuProgramParameters::_findNamedConstantDefinition at /buil    d/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/OgreGpuProgramParams.cpp (line 1719)\n```\n\nThis is the simulation. The issue is that even if I change `gl_FragColor = reflectionColour;` to `gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);`, it still shows the image below, not a red plane. I must be making a mistake somewhere, as I believe the shader is not even running right now.\n\n![](data/bitbucket.org/repo/BgXLzgM/images/4151455265-image.png)\n", "markup": "markdown", "html": "<p>In 1550:<a href=\"#!/osrf/vrx/commits/a525d4c3dc7c\" rel=\"nofollow\" class=\"ap-connect-link\">a525d4c3dc7c</a>, I applied your changes. However, my issue is that I still get the Ogre exception:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">41</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span> <span class=\"n\">OGRE</span> <span class=\"n\">EXCEPTION</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">InvalidParametersException</span><span class=\"o\">):</span> <span class=\"n\">Parameter</span> <span class=\"n\">called</span> <span class=\"n\">reflectMap</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">exist</span><span class=\"o\">.</span>  <span class=\"k\">in</span> <span class=\"n\">GpuProgramParameters</span><span class=\"o\">::</span><span class=\"n\">_findNamedConstantDefinition</span> <span class=\"n\">at</span> <span class=\"sr\">/buil    d/ogre-1.9-B6QkmW/ogre-1.9-1.9.0+dfsg1/OgreMain/src/</span><span class=\"n\">OgreGpuProgramParams</span><span class=\"o\">.</span><span class=\"na\">cpp</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"mi\">1719</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>This is the simulation. The issue is that even if I change <code>gl_FragColor = reflectionColour;</code> to <code>gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</code>, it still shows the image below, not a red plane. I must be making a mistake somewhere, as I believe the shader is not even running right now.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/4151455265-image.png\" /></p>", "type": "rendered"}, "created_on": "2019-08-20T18:43:25.625755+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-20T18:43:25.634634+00:00", "type": "pullrequest_comment", "id": 113789896}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113789960.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113789960"}}, "parent": {"id": 113789896, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113789896.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113789896"}}, "depth": 6}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "I am going to try to start fresh. Remove all the code and get a very simple shader to run, then start to add things back and see what breaks it. ", "markup": "markdown", "html": "<p>I am going to try to start fresh. Remove all the code and get a very simple shader to run, then start to add things back and see what breaks it. </p>", "type": "rendered"}, "created_on": "2019-08-20T18:43:58.875284+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-20T18:43:58.887528+00:00", "type": "pullrequest_comment", "id": 113789960}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113790976.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113790976"}}, "parent": {"id": 113789896, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113789896.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113789896"}}, "depth": 6}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "hmm I just did a clean build and this is what I get:\n\n![](data/bitbucket.org/repo/BgXLzgM/images/1582777263-vrx_reflection.jpg)\n\u200c\n\nNote that I also got the red plane before making the changes", "markup": "markdown", "html": "<p>hmm I just did a clean build and this is what I get:</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/1582777263-vrx_reflection.jpg\" />\n\u200c</p>\n<p>Note that I also got the red plane before making the changes</p>", "type": "rendered"}, "created_on": "2019-08-20T18:52:09.413559+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2019-08-20T18:53:04.056477+00:00", "type": "pullrequest_comment", "id": 113790976}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113792298.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113792298"}}, "parent": {"id": 113790976, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113790976.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113790976"}}, "depth": 7}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "I see, there must be something strange happening on my end. Thanks for checking it out. I will try to fix it up. ", "markup": "markdown", "html": "<p>I see, there must be something strange happening on my end. Thanks for checking it out. I will try to fix it up. </p>", "type": "rendered"}, "created_on": "2019-08-20T19:03:31.738977+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-20T19:03:31.753198+00:00", "type": "pullrequest_comment", "id": 113792298}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113793634.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113793634"}}, "parent": {"id": 113790976, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113790976.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113790976"}}, "depth": 7}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "I was able to resolve the issue. I believe I put an empty file `reflection.frag` in `/usr/share/gazebo-9/media/materials/programs` when I was trying to resolve the Ogre exception issue, which it kept finding and using instead of my desired one. Once I removed it, it has all been resolved. I am much more confident working on this, now that the shader is working as expected!", "markup": "markdown", "html": "<p>I was able to resolve the issue. I believe I put an empty file <code>reflection.frag</code> in <code>/usr/share/gazebo-9/media/materials/programs</code> when I was trying to resolve the Ogre exception issue, which it kept finding and using instead of my desired one. Once I removed it, it has all been resolved. I am much more confident working on this, now that the shader is working as expected!</p>", "type": "rendered"}, "created_on": "2019-08-20T19:15:16.342395+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-20T19:15:16.353365+00:00", "type": "pullrequest_comment", "id": 113793634}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113805002.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113805002"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "In 1552:4cd6976b914b, I use code very similar to the Fresnel example. I believe the effects are abit too strong, and some of the images look too distorted.\n\n![](data/bitbucket.org/repo/BgXLzgM/images/2040643218-image.png)\n\u200c\n\nIn 1553:286e6763abdc, I remove the Fresnel and noise effects\n\n![](data/bitbucket.org/repo/BgXLzgM/images/3500795833-image.png)\nI will try to find a middle ground and then see if I can add the waves back in.", "markup": "markdown", "html": "<p>In 1552:<a href=\"#!/osrf/vrx/commits/4cd6976b914b\" rel=\"nofollow\" class=\"ap-connect-link\">4cd6976b914b</a>, I use code very similar to the Fresnel example. I believe the effects are abit too strong, and some of the images look too distorted.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/2040643218-image.png\" />\n\u200c</p>\n<p>In 1553:<a href=\"#!/osrf/vrx/commits/286e6763abdc\" rel=\"nofollow\" class=\"ap-connect-link\">286e6763abdc</a>, I remove the Fresnel and noise effects</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/3500795833-image.png\" />\nI will try to find a middle ground and then see if I can add the waves back in.</p>", "type": "rendered"}, "created_on": "2019-08-20T20:59:37.341916+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-20T20:59:37.351333+00:00", "type": "pullrequest_comment", "id": 113805002}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113810549.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113810549"}}, "parent": {"id": 113805002, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113805002.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113805002"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "You can probably play around the the shader parameters \\(the ones specified through `param_named`\\) to adjust the reflection / refraction effects. \n\nOther than that, it\u2019s looking good!", "markup": "markdown", "html": "<p>You can probably play around the the shader parameters (the ones specified through <code>param_named</code>) to adjust the reflection / refraction effects. </p>\n<p>Other than that, it\u2019s looking good!</p>", "type": "rendered"}, "created_on": "2019-08-20T21:58:36.947067+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2019-08-20T21:58:36.957753+00:00", "type": "pullrequest_comment", "id": 113810549}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113817845.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113817845"}}, "parent": {"id": 113810549, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113810549.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113810549"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "Great improvements! Here, you can find a nice dataset of images created from University of Florida during different events. Maybe you can use as a reference to adjust the intensity of reflection/refraction. \n\n[https://ci.mil.ufl.edu/labelme/datasets/navigator-datasets/](https://ci.mil.ufl.edu/labelme/datasets/navigator-datasets/)\n\nFrom a quick inspection, I noticed that it should be more subtle than what I thought. Here\u2019s an example:\n\n[https://ci.mil.ufl.edu/labelme/datasets/navigator-datasets/navigator\\_seecam\\_hawaii\\_2018\\_12\\_12/2018-12-12\\_grinch\\_attempt\\_bag\\_\\_camera\\_front\\_right\\_image\\_raw1325465579948408161.png](https://ci.mil.ufl.edu/labelme/datasets/navigator-datasets/navigator_seecam_hawaii_2018_12_12/2018-12-12_grinch_attempt_bag__camera_front_right_image_raw1325465579948408161.png)", "markup": "markdown", "html": "<p>Great improvements! Here, you can find a nice dataset of images created from University of Florida during different events. Maybe you can use as a reference to adjust the intensity of reflection/refraction. </p>\n<p><a data-is-external-link=\"true\" href=\"https://ci.mil.ufl.edu/labelme/datasets/navigator-datasets/\" rel=\"nofollow\">https://ci.mil.ufl.edu/labelme/datasets/navigator-datasets/</a></p>\n<p>From a quick inspection, I noticed that it should be more subtle than what I thought. Here\u2019s an example:</p>\n<p><a data-is-external-link=\"true\" href=\"https://ci.mil.ufl.edu/labelme/datasets/navigator-datasets/navigator_seecam_hawaii_2018_12_12/2018-12-12_grinch_attempt_bag__camera_front_right_image_raw1325465579948408161.png\" rel=\"nofollow\">https://ci.mil.ufl.edu/labelme/datasets/navigator-datasets/navigator_seecam_hawaii_2018_12_12/2018-12-12_grinch_attempt_bag__camera_front_right_image_raw1325465579948408161.png</a></p>", "type": "rendered"}, "created_on": "2019-08-20T23:54:28.995316+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2019-08-20T23:54:29.005170+00:00", "type": "pullrequest_comment", "id": 113817845}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113818005.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113818005"}}, "parent": {"id": 113817845, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113817845.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113817845"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "Great thank you for the resources. You\u2019re right, in many cases, the reflections are very subtle.", "markup": "markdown", "html": "<p>Great thank you for the resources. You\u2019re right, in many cases, the reflections are very subtle.</p>", "type": "rendered"}, "created_on": "2019-08-20T23:57:43.143086+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-20T23:57:43.151556+00:00", "type": "pullrequest_comment", "id": 113818005}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113820367.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113820367"}}, "parent": {"id": 113817845, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113817845.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113817845"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "Looking through a couple dozen photos, the refraction looks very negligible. The reflection is the only effect. Also, in most cases, the reflections keep a pretty similar in color to the original object, but often more distorted. In lower light, there is little reflection at all\n\n![](data/bitbucket.org/repo/BgXLzgM/images/2688242677-image.png)\n![](data/bitbucket.org/repo/BgXLzgM/images/1187866503-image.png)\n![](data/bitbucket.org/repo/BgXLzgM/images/809891810-image.png)\n![](data/bitbucket.org/repo/BgXLzgM/images/3871952309-image.png)\n\u200c\n\n![](data/bitbucket.org/repo/BgXLzgM/images/2776781596-image.png)\n", "markup": "markdown", "html": "<p>Looking through a couple dozen photos, the refraction looks very negligible. The reflection is the only effect. Also, in most cases, the reflections keep a pretty similar in color to the original object, but often more distorted. In lower light, there is little reflection at all</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/2688242677-image.png\" />\n<img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/1187866503-image.png\" />\n<img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/809891810-image.png\" />\n<img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/3871952309-image.png\" />\n\u200c</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/2776781596-image.png\" /></p>", "type": "rendered"}, "created_on": "2019-08-21T00:46:39.950811+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-21T00:46:39.959965+00:00", "type": "pullrequest_comment", "id": 113820367}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113818352.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113818352"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "When trying to integrate a very simple reflection with the original Gerstner Waves, I did the following steps:\n\n`hg update default`\n\nI then made the following change\n\n```\ndiff -r 252e2f71c1b3 wave_gazebo/world_models/ocean_waves/model.xacro\n--- a/wave_gazebo/world_models/ocean_waves/model.xacro  Thu Aug 08 23:27:45 2019 +0000\n+++ b/wave_gazebo/world_models/ocean_waves/model.xacro  Tue Aug 20 17:02:09 2019 -0700\n@@ -66,9 +66,10 @@\n           </wave>\n         </plugin>\n         <geometry>\n-          <mesh>\n-            <uri>model://ocean_waves/meshes/mesh.dae</uri>\n-          </mesh>\n+          <plane>\n+            <normal>0 0 1</normal>\n+            <size>1000 1000</size>\n+          </plane>\n         </geometry>\n         <material>\n           <script>\n@@ -94,9 +95,10 @@\n           </wave>\n         </plugin>\n         <geometry>\n-          <mesh>\n-            <uri>model://ocean_waves/meshes/mesh_below.dae</uri>\n-          </mesh>\n+          <plane>\n+            <normal>0 0 1</normal>\n+            <size>1000 1000</size>\n+          </plane>\n         </geometry>\n         <material>\n           <script>\n~\n```\n\n![](data/bitbucket.org/repo/BgXLzgM/images/3508927371-image_2.png)\n\u200c\n\nOriginal\n\n---\n\n\u200c\n\n![](data/bitbucket.org/repo/BgXLzgM/images/417087477-image.png)\n\u200c\n\nAfter change \n\n---\n\nThe mesh currently used looks like a very simple plane. Is there any reason why this big change occurs? @{557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5} , should we still replace the mesh with the plane? ", "markup": "markdown", "html": "<p>When trying to integrate a very simple reflection with the original Gerstner Waves, I did the following steps:</p>\n<p><code>hg update default</code></p>\n<p>I then made the following change</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 252e2f71c1b3 wave_gazebo/world_models/ocean_waves/model.xacro</span>\n<span class=\"gd\">--- a/wave_gazebo/world_models/ocean_waves/model.xacro  Thu Aug 08 23:27:45 2019 +0000</span>\n<span class=\"gi\">+++ b/wave_gazebo/world_models/ocean_waves/model.xacro  Tue Aug 20 17:02:09 2019 -0700</span>\n<span class=\"gu\">@@ -66,9 +66,10 @@</span>\n           &lt;/wave&gt;\n         &lt;/plugin&gt;\n         &lt;geometry&gt;\n<span class=\"gd\">-          &lt;mesh&gt;</span>\n<span class=\"gd\">-            &lt;uri&gt;model://ocean_waves/meshes/mesh.dae&lt;/uri&gt;</span>\n<span class=\"gd\">-          &lt;/mesh&gt;</span>\n<span class=\"gi\">+          &lt;plane&gt;</span>\n<span class=\"gi\">+            &lt;normal&gt;0 0 1&lt;/normal&gt;</span>\n<span class=\"gi\">+            &lt;size&gt;1000 1000&lt;/size&gt;</span>\n<span class=\"gi\">+          &lt;/plane&gt;</span>\n         &lt;/geometry&gt;\n         &lt;material&gt;\n           &lt;script&gt;\n<span class=\"gu\">@@ -94,9 +95,10 @@</span>\n           &lt;/wave&gt;\n         &lt;/plugin&gt;\n         &lt;geometry&gt;\n<span class=\"gd\">-          &lt;mesh&gt;</span>\n<span class=\"gd\">-            &lt;uri&gt;model://ocean_waves/meshes/mesh_below.dae&lt;/uri&gt;</span>\n<span class=\"gd\">-          &lt;/mesh&gt;</span>\n<span class=\"gi\">+          &lt;plane&gt;</span>\n<span class=\"gi\">+            &lt;normal&gt;0 0 1&lt;/normal&gt;</span>\n<span class=\"gi\">+            &lt;size&gt;1000 1000&lt;/size&gt;</span>\n<span class=\"gi\">+          &lt;/plane&gt;</span>\n         &lt;/geometry&gt;\n         &lt;material&gt;\n           &lt;script&gt;\n~\n</pre></div>\n\n\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/3508927371-image_2.png\" />\n\u200c</p>\n<p>Original</p>\n<hr />\n<p>\u200c</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/417087477-image.png\" />\n\u200c</p>\n<p>After change </p>\n<hr />\n<p>The mesh currently used looks like a very simple plane. Is there any reason why this big change occurs? <span class=\"ap-mention\" data-atlassian-id=\"557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5\">@Ian Chen</span> , should we still replace the mesh with the plane? </p>", "type": "rendered"}, "created_on": "2019-08-21T00:04:07.851928+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-21T00:04:07.879608+00:00", "type": "pullrequest_comment", "id": 113818352}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113819077.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113819077"}}, "parent": {"id": 113818352, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113818352.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113818352"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "The color matches `shallow_color` defined in Gerstner\\_Waves.frag\n\n![](data/bitbucket.org/repo/BgXLzgM/images/775982409-image.png)\n", "markup": "markdown", "html": "<p>The color matches <code>shallow_color</code> defined in Gerstner_Waves.frag</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/775982409-image.png\" /></p>", "type": "rendered"}, "created_on": "2019-08-21T00:18:50.145852+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-21T00:18:50.154428+00:00", "type": "pullrequest_comment", "id": 113819077}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113820564.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113820564"}}, "parent": {"id": 113818352, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113818352.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113818352"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "The mesh probably has a lot more vertices than the plane created by gazebo so it may not be easy to just swap it with a plane geometry. You may have to use the existing mesh and adapt your code to work with it.  ", "markup": "markdown", "html": "<p>The mesh probably has a lot more vertices than the plane created by gazebo so it may not be easy to just swap it with a plane geometry. You may have to use the existing mesh and adapt your code to work with it.  </p>", "type": "rendered"}, "created_on": "2019-08-21T00:50:53.408007+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2019-08-21T00:50:53.418076+00:00", "type": "pullrequest_comment", "id": 113820564}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/113818506.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-113818506"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "Another Issue is that when the simulation is paused, the water is still moving. I believe @{557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1} had fixed that problem before. I will consult him about how to integrate this correctly.\n\n![](data/bitbucket.org/repo/BgXLzgM/images/2683185252-image_1.png)\n", "markup": "markdown", "html": "<p>Another Issue is that when the simulation is paused, the water is still moving. I believe <span class=\"ap-mention\" data-atlassian-id=\"557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1\">@Brian Bingham</span> had fixed that problem before. I will consult him about how to integrate this correctly.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/2683185252-image_1.png\" /></p>", "type": "rendered"}, "created_on": "2019-08-21T00:07:26.770347+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-08-21T00:08:19.930655+00:00", "type": "pullrequest_comment", "id": 113818506}, {"links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161/comments/114492002.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161/_/diff#comment-114492002"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 161, "links": {"self": {"href": "data/repositories/osrf/vrx/pullrequests/161.json"}, "html": {"href": "#!/osrf/vrx/pull-requests/161"}}, "title": "Learn Gazebo Visual Plugins for Ocean Reflections"}, "content": {"raw": "@{5b96b66385af94340e7cabce} , should we decline this pull request?", "markup": "markdown", "html": "<p><span class=\"ap-mention\" data-atlassian-id=\"5b96b66385af94340e7cabce\">@Tyler Lum</span> , should we decline this pull request?</p>", "type": "rendered"}, "created_on": "2019-08-26T22:50:05.800673+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": "2019-08-26T22:50:05.817703+00:00", "type": "pullrequest_comment", "id": 114492002}], "page": 1, "size": 37}
{"changes": {"state": {"new": "resolved", "old": "new"}}, "links": {"self": {"href": "data/repositories/osrf/vrx/issues/45/changes/53420941.json"}, "html": {"href": "#!/osrf/vrx/issues/45#comment-53420941"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/45.json"}}, "type": "issue", "id": 45, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Docker Image: Non-NVIDIA image seg faults on NVIDIA system"}, "created_on": "2019-08-15T04:31:19.979859+00:00", "user": {"display_name": "Michael McCarrin", "uuid": "{3c3f500d-bbf6-472c-b8f7-627e5eabc226}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3c3f500d-bbf6-472c-b8f7-627e5eabc226%7D"}, "html": {"href": "https://bitbucket.org/%7B3c3f500d-bbf6-472c-b8f7-627e5eabc226%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a50abc93a3175f92c79e7521dfe089c0d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-0.png"}}, "nickname": "m1chaelm", "type": "user", "account_id": "5b2a9176467c9a09caa71ab1"}, "message": {"raw": "This issue can be resolved by forcing the host system to use non-nvidia graphics drivers. So, I think it\u2019s working as expected. What appears to be happening is that systems with Nvidia graphics cards installed are configured to use Nvidia\u2019s proprietary drivers, and the default assumption is that if you are doing this you don\u2019t also need to use the onboard graphics drivers, so these are disabled. The Nvidia-docker image is set up to find the Nvidia drivers, but the non-nvidia image looks for the default onboard graphics drivers, fails to find them because they are disabled, then tries to load the software rendered (swrast) and fails to find that, then crashes.\n\nFixing this so you can run either image on an Nvidia machine would probably mean figuring out how to configure the host so you can run both graphics drivers at the same time without creating a conflict. I don\u2019t think this is something we need to support. If someone really needs to run the non-nvidia image on a machine using Nvidia drivers, the easiest thing to do is to switch to the non-Nvidia drivers first.", "markup": "markdown", "html": "<p>This issue can be resolved by forcing the host system to use non-nvidia graphics drivers. So, I think it\u2019s working as expected. What appears to be happening is that systems with Nvidia graphics cards installed are configured to use Nvidia\u2019s proprietary drivers, and the default assumption is that if you are doing this you don\u2019t also need to use the onboard graphics drivers, so these are disabled. The Nvidia-docker image is set up to find the Nvidia drivers, but the non-nvidia image looks for the default onboard graphics drivers, fails to find them because they are disabled, then tries to load the software rendered (swrast) and fails to find that, then crashes.</p>\n<p>Fixing this so you can run either image on an Nvidia machine would probably mean figuring out how to configure the host so you can run both graphics drivers at the same time without creating a conflict. I don\u2019t think this is something we need to support. If someone really needs to run the non-nvidia image on a machine using Nvidia drivers, the easiest thing to do is to switch to the non-Nvidia drivers first.</p>", "type": "rendered"}, "type": "issue_change", "id": 53420941}
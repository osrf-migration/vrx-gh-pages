{"links": {"self": {"href": "data/repositories/osrf/vrx/issues/71/comments/50935907.json"}, "html": {"href": "#!/osrf/vrx/issues/71#comment-50935907"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/71.json"}}, "type": "issue", "id": 71, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Workflow for docker"}, "content": {"raw": "I think we are actually mostly in agreement about what is supposed to happen, but I may have caused some confusion by loose comments about use-cases and file-system assumptions. After some effort trying to clarify in a comment, I gave up and just implemented the approach I'm attempting to describe in the docker-workflow branch. I think if you wouldn't mind trying it out, that would make discussion less complicated.\n \nUsing that branch the tutorial for building your own image would look like this:\n\n1. hg clone #!/osrf/vrx\n1. cd vrx\n1. docker/build.bash .\n1. docker/run.bash vrx\n\nThe Nvidia version is the same but with the -n options added to the scripts and the altered image name. Users who want to modify the code and rebuild can now just edit the files locally and then re-run the build and run scripts. This doesn't require a mount because COPY will detect the changes and rebuild from the appropriate layer. Overall, it's pretty fast and simple. On my machine it takes about 35 seconds to rebuild.\n\nIn addition, the build process itself is faster because copying the files from the local directory (as opposed to pulling them from mercurial) is nearly instantaneous. Our repository only has about 10MB of data in it, so transferring this in and out of the container from the local file system is basically free.\n\nCurrently, the code in this branch does not delete the copied files from the image. However, I recommend that we do this because 1) it takes almost no time and 2) it avoids confusion in the more-advanced use case where the user wants to bind-mount the repository. It also creates a slightly leaner image (though only by 10 MB, or 1% of the 1GB total, so this probably isn't crucial).\n\nI agree we should make a separate tutorial for the workflow involving the bind mount. It is totally optional but does have some nice advantages.\n\nHopefully this is all clearer than in my first attempt. There are two points in particular I should emphasize just to make sure we are on the same page: \n\n1. These changes will have no impact on the use-case where the user is just running the pre-built image. They will, as before, just download it and run it.\n1. No extra requirements are introduced about the location of the code in the file system. The only thing that is required is that you clone the repository first and run the scripts from the root of the repository instead of from the docker subfolder. This results in:\n    * less data crossing the network overall, since the image is no longer cloning the repository in the build process (including the Docker scripts which were already downloaded), and\n    * a simpler tutorial.", "markup": "markdown", "html": "<p>I think we are actually mostly in agreement about what is supposed to happen, but I may have caused some confusion by loose comments about use-cases and file-system assumptions. After some effort trying to clarify in a comment, I gave up and just implemented the approach I'm attempting to describe in the docker-workflow branch. I think if you wouldn't mind trying it out, that would make discussion less complicated.</p>\n<p>Using that branch the tutorial for building your own image would look like this:</p>\n<ol>\n<li>hg clone <a href=\"#!/osrf/vrx\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/vrx</a></li>\n<li>cd vrx</li>\n<li>docker/build.bash .</li>\n<li>docker/run.bash vrx</li>\n</ol>\n<p>The Nvidia version is the same but with the -n options added to the scripts and the altered image name. Users who want to modify the code and rebuild can now just edit the files locally and then re-run the build and run scripts. This doesn't require a mount because COPY will detect the changes and rebuild from the appropriate layer. Overall, it's pretty fast and simple. On my machine it takes about 35 seconds to rebuild.</p>\n<p>In addition, the build process itself is faster because copying the files from the local directory (as opposed to pulling them from mercurial) is nearly instantaneous. Our repository only has about 10MB of data in it, so transferring this in and out of the container from the local file system is basically free.</p>\n<p>Currently, the code in this branch does not delete the copied files from the image. However, I recommend that we do this because 1) it takes almost no time and 2) it avoids confusion in the more-advanced use case where the user wants to bind-mount the repository. It also creates a slightly leaner image (though only by 10 MB, or 1% of the 1GB total, so this probably isn't crucial).</p>\n<p>I agree we should make a separate tutorial for the workflow involving the bind mount. It is totally optional but does have some nice advantages.</p>\n<p>Hopefully this is all clearer than in my first attempt. There are two points in particular I should emphasize just to make sure we are on the same page: </p>\n<ol>\n<li>These changes will have no impact on the use-case where the user is just running the pre-built image. They will, as before, just download it and run it.</li>\n<li>No extra requirements are introduced about the location of the code in the file system. The only thing that is required is that you clone the repository first and run the scripts from the root of the repository instead of from the docker subfolder. This results in:<ul>\n<li>less data crossing the network overall, since the image is no longer cloning the repository in the build process (including the Docker scripts which were already downloaded), and</li>\n<li>a simpler tutorial.</li>\n</ul>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2019-03-07T08:21:14.931753+00:00", "user": {"display_name": "Michael McCarrin", "uuid": "{3c3f500d-bbf6-472c-b8f7-627e5eabc226}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3c3f500d-bbf6-472c-b8f7-627e5eabc226%7D"}, "html": {"href": "https://bitbucket.org/%7B3c3f500d-bbf6-472c-b8f7-627e5eabc226%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a50abc93a3175f92c79e7521dfe089c0d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-0.png"}}, "nickname": "m1chaelm", "type": "user", "account_id": "5b2a9176467c9a09caa71ab1"}, "updated_on": null, "type": "issue_comment", "id": 50935907}
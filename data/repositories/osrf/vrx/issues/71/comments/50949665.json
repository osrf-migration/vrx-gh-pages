{"links": {"self": {"href": "data/repositories/osrf/vrx/issues/71/comments/50949665.json"}, "html": {"href": "#!/osrf/vrx/issues/71#comment-50949665"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/71.json"}}, "type": "issue", "id": 71, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Workflow for docker"}, "content": {"raw": "Yes, great--thanks for going through it all. Those two options are correct but they are also compatible. This because COPY operates at build time and mount operates at runtime. So, you start with the COPY option to get your image created. (You have to do this because you can't mount things at build time.) Then, when you run your image, you mount the version of the repository you already pulled down. If we mount it to the  vrx_ws/src/vrx directory in the container, the environment in the container will appear exactly the same, but updates to the repository will be instantly available. Likewise, running catkin_make from inside the container will update the container without having to rebuild it, as you point out. I think this gets you the best of both worlds.", "markup": "markdown", "html": "<p>Yes, great--thanks for going through it all. Those two options are correct but they are also compatible. This because COPY operates at build time and mount operates at runtime. So, you start with the COPY option to get your image created. (You have to do this because you can't mount things at build time.) Then, when you run your image, you mount the version of the repository you already pulled down. If we mount it to the  vrx_ws/src/vrx directory in the container, the environment in the container will appear exactly the same, but updates to the repository will be instantly available. Likewise, running catkin_make from inside the container will update the container without having to rebuild it, as you point out. I think this gets you the best of both worlds.</p>", "type": "rendered"}, "created_on": "2019-03-07T21:58:58.197079+00:00", "user": {"display_name": "Michael McCarrin", "uuid": "{3c3f500d-bbf6-472c-b8f7-627e5eabc226}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3c3f500d-bbf6-472c-b8f7-627e5eabc226%7D"}, "html": {"href": "https://bitbucket.org/%7B3c3f500d-bbf6-472c-b8f7-627e5eabc226%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/a50abc93a3175f92c79e7521dfe089c0d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMM-0.png"}}, "nickname": "m1chaelm", "type": "user", "account_id": "5b2a9176467c9a09caa71ab1"}, "updated_on": null, "type": "issue_comment", "id": 50949665}
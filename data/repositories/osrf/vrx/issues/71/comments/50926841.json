{"links": {"self": {"href": "data/repositories/osrf/vrx/issues/71/comments/50926841.json"}, "html": {"href": "#!/osrf/vrx/issues/71#comment-50926841"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/71.json"}}, "type": "issue", "id": 71, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Workflow for docker"}, "content": {"raw": "I agree with the sentiment.  It seems that this gets complicated because we are using a single Dockerfile for (at least) a couple different use cases: (1) automated build of the standard images for dockerhub and (2) user builds of image for use with the latest VRX code.  \n\nIn the comment above, steps 3 and 4 seem like they might be a bit complicated.  For 3, the assumption of filesystem location of the repo could be an issue.  Step 4 (build then delete) seems a bit wasteful.\n\nAs an alternative, would it make sense to have a single Dockerfile for both use cases.  For the automatic docker release builds (our standard release images) VRX is cloned and build within the container (no mounts to the a local filesystem).  For the second use case (building the latest VRX) there is a conditional in the Dockerfile that prevents the VRX clone/build within the container - so VRX isn't built during the container build step, but instead is build by the user.  Then we provide tutorial instructions on steps for the user to run the image and mount  a host directory containing the VRX repo. \n\nIt does look like conditionals within Dockerfiles are a bit clunky  \n\nAffording this second workflow might have the added benefit of giving teams a working example of how to use Docker for setting up their own software - where they will be doing active development.  Since they are going to  need to submit their software via a Docker container, this may help them along that path.", "markup": "markdown", "html": "<p>I agree with the sentiment.  It seems that this gets complicated because we are using a single Dockerfile for (at least) a couple different use cases: (1) automated build of the standard images for dockerhub and (2) user builds of image for use with the latest VRX code.  </p>\n<p>In the comment above, steps 3 and 4 seem like they might be a bit complicated.  For 3, the assumption of filesystem location of the repo could be an issue.  Step 4 (build then delete) seems a bit wasteful.</p>\n<p>As an alternative, would it make sense to have a single Dockerfile for both use cases.  For the automatic docker release builds (our standard release images) VRX is cloned and build within the container (no mounts to the a local filesystem).  For the second use case (building the latest VRX) there is a conditional in the Dockerfile that prevents the VRX clone/build within the container - so VRX isn't built during the container build step, but instead is build by the user.  Then we provide tutorial instructions on steps for the user to run the image and mount  a host directory containing the VRX repo. </p>\n<p>It does look like conditionals within Dockerfiles are a bit clunky  </p>\n<p>Affording this second workflow might have the added benefit of giving teams a working example of how to use Docker for setting up their own software - where they will be doing active development.  Since they are going to  need to submit their software via a Docker container, this may help them along that path.</p>", "type": "rendered"}, "created_on": "2019-03-06T17:54:17.082372+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": null, "type": "issue_comment", "id": 50926841}
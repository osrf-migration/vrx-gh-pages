{"links": {"self": {"href": "data/repositories/osrf/vrx/issues/106/comments/52620726.json"}, "html": {"href": "#!/osrf/vrx/issues/106#comment-52620726"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/106.json"}}, "type": "issue", "id": 106, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "VRX automated evaluation"}, "content": {"raw": "**Description**\n\nThe purpose of ariac-docker is to perform automated evaluation for the ARIAC competition. This involves two docker images:\n\n1. ARIAC server that runs the simulation and exposes a limited ROS interface \\(only expose ARIAC competition relevant parts\\)\n2. ARIAC competitor base that has ARIAC, but not Gazebo. Teams build off of this image.\n\nBased on [https://bitbucket.org/osrf/ariac/wiki/2019/automated\\_evaluation](https://bitbucket.org/osrf/ariac/wiki/2019/automated_evaluation), this requires that teams provide a folder called `<team_name>` with\n\n* `team_config.yaml`: Their team's sensor configuration file. One sensor configuration is used for all trials.\n* `build_team_system.bash`: A bash script that, when invoked from the command-line on a clean Ubuntu system, will install the necessary dependencies and build the team's code.\n* `run_team_system.bash`: A bash script that, when invoked from the command-line on a system that has had `build_team_system.bash` run, will start the team's system and begin interacting with the ARIAC competition trial.\n\nBased on [https://github.com/osrf/ariac-docker/blob/master/README\\_DEVELOPER.md](https://github.com/osrf/ariac-docker/blob/master/README_DEVELOPER.md), the next step is to run a number of bash scripts to:\n\n1. Pull the latest docker images\n2. Prepare the team systems\n3. Run trials for all teams \\(and log results\\)\n4. Generate videos for all teams\n\n**Proposal**\n\nI propose creating a new repository called `vrx-docker`, similar in structure to `ariac-docker`. The `ariac-docker` repository is quite large and complicated. This could be remedied by clearer organization with more directories. However, I believe that a clearer line between the simulator and the competition containerization is appropriate for a number of reasons:\n\n* Competition containerization and simulation are quite independent modules. In my opinion, separating them makes sense because it will keep commits/history/progress more clear, README\u2019s both easy to see and separate \\(one README for VRX simulation, one README for VRX Competition containerization\\) \\(new users may like to open up a repository and see everything they need to know in the README\\)\n* People using VRX for simulation \\(not competition\\) have no interest in our competition containerization code\n* VRX competitors should, for the most part, not need to actually read and understand the competition containerization with much detail, but simply understand the files they need to create, where they must be put, and how to run the competition. Having the containerization code in VRX may be more intimidating and overwhelming rather than helpful, if they try to look at it with much detail.\n* Based on how these bash scripts work, some of the file structure may get complicated \\(where generated files go, where files need to be stored, where scripts need to be called from, etc.\\). If the containerization code is in the same repository, teams will be pulling this from the repository. I see a higher chance that they may move/delete/add files in inappropriate places that could lead to issues in running the competition, which would be very frustrating for teams who simply want to evaluate their work and not worry about these details. If explained correctly, I see teams being able to only go into the competition containerization code to put their `<team_name>` directory in the right folder, follow the README, and get results easily.\n* This will keep the simulation repository much more simple and focused on simulation\n\n**Argument for Same Repository**\n\n* Could be \u201ccleaner\u201d to have only one repository\n* Could still have clear instructions with the Wiki\n* If we put all the competition containerization code in one directory, it will still look quite clean and simple\n* There is already a docker directory \\(but it is not meant for competition, just simulation\\)\n\n![](data/bitbucket.org/repo/BgXLzgM/images/3807109653-ariac-docker.png)\n  \n_Figure 1: The ariac-docker repository is already quite large and complicated._\n\nI would consider adding a `run_trials`, `run_videos`, and `setup` directory to clarify the structure.", "markup": "markdown", "html": "<p><strong>Description</strong></p>\n<p>The purpose of ariac-docker is to perform automated evaluation for the ARIAC competition. This involves two docker images:</p>\n<ol>\n<li>ARIAC server that runs the simulation and exposes a limited ROS interface (only expose ARIAC competition relevant parts)</li>\n<li>ARIAC competitor base that has ARIAC, but not Gazebo. Teams build off of this image.</li>\n</ol>\n<p>Based on <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/ariac/wiki/2019/automated_evaluation\" rel=\"nofollow\">https://bitbucket.org/osrf/ariac/wiki/2019/automated_evaluation</a>, this requires that teams provide a folder called <code>&lt;team_name&gt;</code> with</p>\n<ul>\n<li><code>team_config.yaml</code>: Their team's sensor configuration file. One sensor configuration is used for all trials.</li>\n<li><code>build_team_system.bash</code>: A bash script that, when invoked from the command-line on a clean Ubuntu system, will install the necessary dependencies and build the team's code.</li>\n<li><code>run_team_system.bash</code>: A bash script that, when invoked from the command-line on a system that has had <code>build_team_system.bash</code> run, will start the team's system and begin interacting with the ARIAC competition trial.</li>\n</ul>\n<p>Based on <a data-is-external-link=\"true\" href=\"https://github.com/osrf/ariac-docker/blob/master/README_DEVELOPER.md\" rel=\"nofollow\">https://github.com/osrf/ariac-docker/blob/master/README_DEVELOPER.md</a>, the next step is to run a number of bash scripts to:</p>\n<ol>\n<li>Pull the latest docker images</li>\n<li>Prepare the team systems</li>\n<li>Run trials for all teams (and log results)</li>\n<li>Generate videos for all teams</li>\n</ol>\n<p><strong>Proposal</strong></p>\n<p>I propose creating a new repository called <code>vrx-docker</code>, similar in structure to <code>ariac-docker</code>. The <code>ariac-docker</code> repository is quite large and complicated. This could be remedied by clearer organization with more directories. However, I believe that a clearer line between the simulator and the competition containerization is appropriate for a number of reasons:</p>\n<ul>\n<li>Competition containerization and simulation are quite independent modules. In my opinion, separating them makes sense because it will keep commits/history/progress more clear, README\u2019s both easy to see and separate (one README for VRX simulation, one README for VRX Competition containerization) (new users may like to open up a repository and see everything they need to know in the README)</li>\n<li>People using VRX for simulation (not competition) have no interest in our competition containerization code</li>\n<li>VRX competitors should, for the most part, not need to actually read and understand the competition containerization with much detail, but simply understand the files they need to create, where they must be put, and how to run the competition. Having the containerization code in VRX may be more intimidating and overwhelming rather than helpful, if they try to look at it with much detail.</li>\n<li>Based on how these bash scripts work, some of the file structure may get complicated (where generated files go, where files need to be stored, where scripts need to be called from, etc.). If the containerization code is in the same repository, teams will be pulling this from the repository. I see a higher chance that they may move/delete/add files in inappropriate places that could lead to issues in running the competition, which would be very frustrating for teams who simply want to evaluate their work and not worry about these details. If explained correctly, I see teams being able to only go into the competition containerization code to put their <code>&lt;team_name&gt;</code> directory in the right folder, follow the README, and get results easily.</li>\n<li>This will keep the simulation repository much more simple and focused on simulation</li>\n</ul>\n<p><strong>Argument for Same Repository</strong></p>\n<ul>\n<li>Could be \u201ccleaner\u201d to have only one repository</li>\n<li>Could still have clear instructions with the Wiki</li>\n<li>If we put all the competition containerization code in one directory, it will still look quite clean and simple</li>\n<li>There is already a docker directory (but it is not meant for competition, just simulation)</li>\n</ul>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/BgXLzgM/images/3807109653-ariac-docker.png\" /></p>\n<p><em>Figure 1: The ariac-docker repository is already quite large and complicated.</em></p>\n<p>I would consider adding a <code>run_trials</code>, <code>run_videos</code>, and <code>setup</code> directory to clarify the structure.</p>", "type": "rendered"}, "created_on": "2019-06-17T18:55:49.644113+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-17T19:17:06.888757+00:00", "type": "issue_comment", "id": 52620726}
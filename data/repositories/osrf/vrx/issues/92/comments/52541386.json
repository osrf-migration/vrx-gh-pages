{"links": {"self": {"href": "data/repositories/osrf/vrx/issues/92/comments/52541386.json"}, "html": {"href": "#!/osrf/vrx/issues/92#comment-52541386"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/92.json"}}, "type": "issue", "id": 92, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Wind plugin random seed specification"}, "content": {"raw": "With regards to the questions above starting with \u201cI have a question about how random generators work\u201d.  I took a look at the source code for [ignition::math::Rand](https://bitbucket.org/ignitionrobotics/ign-math/src/default/src/Rand.cc).  It appears to be a wrapper for C\\+\\+ [Pseudo-random number generation library](https://en.cppreference.com/w/cpp/numeric/random).\n\nI suspect that you are correct - that having multiple modules/plugins calling the random number generator may generate non-deterministic random number series for the modules.  I think it might be worth doing a simple example of this - which could be completely independent of VRX.   I can imagine a very simple Gazebo plugin that simply publishes some random numbers at a user-specified update rate.  You could then run a test with running multiple instances of the plugin to see how additional instances affect the random number sequence.\n\nIf that turns out to be true, we may need to find a solution.  A couple of possibilities:\n\n1. Have each plugin configurable with distinct seeds.  I believe this would require setting the seed before each number generation step, which could be costly.\n2. Have multiple random number generators so that each plugin has a distinct generator.  Poking around a bit would suggest that this may not be possible with the C\\+\\+ libraries and we may have to consider something like [Boost.Random](https://www.boost.org/doc/libs/1_66_0/doc/html/boost_random.html).  \n\nLet\u2019s first verify that it is going to be a problem - if so we can discuss solutions.", "markup": "markdown", "html": "<p>With regards to the questions above starting with \u201cI have a question about how random generators work\u201d.  I took a look at the source code for <a data-is-external-link=\"true\" href=\"https://bitbucket.org/ignitionrobotics/ign-math/src/default/src/Rand.cc\" rel=\"nofollow\">ignition::math::Rand</a>.  It appears to be a wrapper for C++ <a data-is-external-link=\"true\" href=\"https://en.cppreference.com/w/cpp/numeric/random\" rel=\"nofollow\">Pseudo-random number generation library</a>.</p>\n<p>I suspect that you are correct - that having multiple modules/plugins calling the random number generator may generate non-deterministic random number series for the modules.  I think it might be worth doing a simple example of this - which could be completely independent of VRX.   I can imagine a very simple Gazebo plugin that simply publishes some random numbers at a user-specified update rate.  You could then run a test with running multiple instances of the plugin to see how additional instances affect the random number sequence.</p>\n<p>If that turns out to be true, we may need to find a solution.  A couple of possibilities:</p>\n<ol>\n<li>Have each plugin configurable with distinct seeds.  I believe this would require setting the seed before each number generation step, which could be costly.</li>\n<li>Have multiple random number generators so that each plugin has a distinct generator.  Poking around a bit would suggest that this may not be possible with the C++ libraries and we may have to consider something like <a data-is-external-link=\"true\" href=\"https://www.boost.org/doc/libs/1_66_0/doc/html/boost_random.html\" rel=\"nofollow\">Boost.Random</a>.  </li>\n</ol>\n<p>Let\u2019s first verify that it is going to be a problem - if so we can discuss solutions.</p>", "type": "rendered"}, "created_on": "2019-06-12T00:29:21.252554+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": null, "type": "issue_comment", "id": 52541386}
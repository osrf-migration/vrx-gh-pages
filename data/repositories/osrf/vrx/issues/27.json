{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "links": {"attachments": {"href": "data/repositories/osrf/vrx/issues/27/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/vrx/issues/27.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/vrx/issues/27/watch"}, "comments": {"href": "data/repositories/osrf/vrx/issues/27/comments_page=1.json"}, "html": {"href": "#!/osrf/vrx/issues/27/add-3d-lidar-support"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/vrx/issues/27/vote"}}, "reporter": {"display_name": "Kevin Allen", "uuid": "{29f672ad-72f4-434e-bb0e-c6f2f69974f2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B29f672ad-72f4-434e-bb0e-c6f2f69974f2%7D"}, "html": {"href": "https://bitbucket.org/%7B29f672ad-72f4-434e-bb0e-c6f2f69974f2%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/355d0415f6040ffb168f44275ac2ee2fd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsKA-1.png"}}, "nickname": "kev-the-dev", "type": "user", "account_id": "5b04a6cf8a69f52b3ba2e5db"}, "title": "Add 3D LIDAR support", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Add simulation xacro and (if needed) plugins for simulating a 3D scanning LIDAR, similar to a [Velodyne puck](https://velodynelidar.com/vlp-16.html). \r\n\r\nThis will be useful for the RobotX teams which use a sensor like this and could be a standard sensor for the virtual competition.\r\n\r\nGazebo7 supports the simulation of sensors like this using the gpu_sensor. For getting this sensor to interface with ROS, there are a few options:\r\n\r\n* The [velodyne_simulator](http://wiki.ros.org/velodyne_simulator) contains a plugin to simulate a velodyne, publishing the same output as the real velodyne driver. Downside: somewhat specific to velodyne sensor\r\n\r\n* gazebo_ros_block_laser plugin in [gazebo_ros_pkgs](https://github.com/ros-simulation/gazebo_ros_pkgs). Downsides: publishes the legacy PointCloud message instead of PointCloud2 (which may make it incompatible with some higher level software) and it does NOT support gpu based simulation.\r\n\r\n* The gazebo_ros_ray_sensor plugin in my recent [Pull Request to gazebo_ros_pkgs](https://github.com/ros-simulation/gazebo_ros_pkgs/pull/778/files#diff-6450cfd8fcaf96c62b536b1c0225e91d). This provides something similar to gazebo_ros_block_laser but uses the newer message standard and supports either CPU or GPU simulation. Downside: not currently merged (may never be merged into kinetic), so would likely have to import it into this repo", "markup": "markdown", "html": "<p>Add simulation xacro and (if needed) plugins for simulating a 3D scanning LIDAR, similar to a <a data-is-external-link=\"true\" href=\"https://velodynelidar.com/vlp-16.html\" rel=\"nofollow\">Velodyne puck</a>. </p>\n<p>This will be useful for the RobotX teams which use a sensor like this and could be a standard sensor for the virtual competition.</p>\n<p>Gazebo7 supports the simulation of sensors like this using the gpu_sensor. For getting this sensor to interface with ROS, there are a few options:</p>\n<ul>\n<li>\n<p>The <a data-is-external-link=\"true\" href=\"http://wiki.ros.org/velodyne_simulator\" rel=\"nofollow\">velodyne_simulator</a> contains a plugin to simulate a velodyne, publishing the same output as the real velodyne driver. Downside: somewhat specific to velodyne sensor</p>\n</li>\n<li>\n<p>gazebo_ros_block_laser plugin in <a data-is-external-link=\"true\" href=\"https://github.com/ros-simulation/gazebo_ros_pkgs\" rel=\"nofollow\">gazebo_ros_pkgs</a>. Downsides: publishes the legacy PointCloud message instead of PointCloud2 (which may make it incompatible with some higher level software) and it does NOT support gpu based simulation.</p>\n</li>\n<li>\n<p>The gazebo_ros_ray_sensor plugin in my recent <a data-is-external-link=\"true\" href=\"https://github.com/ros-simulation/gazebo_ros_pkgs/pull/778/files#diff-6450cfd8fcaf96c62b536b1c0225e91d\" rel=\"nofollow\">Pull Request to gazebo_ros_pkgs</a>. This provides something similar to gazebo_ros_block_laser but uses the newer message standard and supports either CPU or GPU simulation. Downside: not currently merged (may never be merged into kinetic), so would likely have to import it into this repo</p>\n</li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-08-08T00:30:53.956254+00:00", "milestone": null, "updated_on": "2018-08-14T22:46:37.508868+00:00", "type": "issue", "id": 27}
{"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94/comments/52325170.json"}, "html": {"href": "#!/osrf/vrx/issues/94#comment-52325170"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94.json"}}, "type": "issue", "id": 94, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Buoyancy plugin improvement for flat ocean and standard shapes"}, "content": {"raw": "* will this deprecate the old method of specifying area & height?\n\n    * Yes.  \n    \n* currently we support one buoyancy element per link \\([#!/osrf/vrx/src/76b4cb73809cf437b33ee26e277a7caecc2465d2/usv\\_gazebo\\_plugins/src/buoyancy\\_gazebo\\_plugin.cc#lines-92\\).](#!/osrf/vrx/src/76b4cb73809cf437b33ee26e277a7caecc2465d2/usv_gazebo_plugins/src/buoyancy_gazebo_plugin.cc#lines-92).) In your example above you specify two buoyancy element for a single link. If we go forward with this format do we need to also deal with intersections between buoyancy geometry elements?  E.g. in the above example since the inner and outer buoyancy is two cylinders, however in the model for surmark950400 the outer ring is a pipe. Do I need to account for that?\n\n    * Good question.  I would suggest not adding that complexity and making it clear in the documentation that we don\u2019t take into account overlapping geometry.  I wasn\u2019t very careful with the example, so I imagine it might be nonsensical.\n    * For VRX I imagine that everything can be taken care of with a single buoyancy element for an object - but generalizing the capability to sets of elements seems like it would be reasonable.\n    \n* you mentioned writing tests to verify implementation. Should I go with a test driven approach? If so are there good examples for unit testing gazebo plugins?\n\n    * We can probably come up with a number of tests to verify that we are implementing things in a reasonable fashion.  I think it would be good to come up with some simple physical example where we know what behavior to expect \\(closed form solution\\) and then verify that the plugin reproduces the behavior.  \n    * I think writing up some unit tests would be fantastic for simple tests.  You might take a look at some of the tests in the gazebo source for inspiration: [https://bitbucket.org/osrf/gazebo/src/default/gazebo/physics/](https://bitbucket.org/osrf/gazebo/src/default/gazebo/physics)  \n      [https://bitbucket.org/osrf/gazebo/src/default/gazebo/sensors/](https://bitbucket.org/osrf/gazebo/src/default/gazebo/sensors)  \n      That being said, for some cases it may not be worth the effort to formalize a unit test and it may be more simple tests you can do along the way to verify that we\u2019ve implemented the physics correctly.\n    * An example test might be - for each geometry we should be able to verify that the steady state location of the object is consistent with the force balance \\(equilibrium of gravity and buoyancy forces\\).  That would be a good first test.\n    * A more dynamic test would be to provide initial conditions below and above the water and verify that the system settles to a stable equilibrium.", "markup": "markdown", "html": "<ul>\n<li>\n<p>will this deprecate the old method of specifying area &amp; height?</p>\n<ul>\n<li>Yes.  </li>\n</ul>\n</li>\n<li>\n<p>currently we support one buoyancy element per link (<a data-is-external-link=\"true\" href=\"#!/osrf/vrx/src/76b4cb73809cf437b33ee26e277a7caecc2465d2/usv_gazebo_plugins/src/buoyancy_gazebo_plugin.cc#lines-92\" rel=\"nofollow\">#!/osrf/vrx/src/76b4cb73809cf437b33ee26e277a7caecc2465d2/usv_gazebo_plugins/src/buoyancy_gazebo_plugin.cc#lines-92).</a>.) In your example above you specify two buoyancy element for a single link. If we go forward with this format do we need to also deal with intersections between buoyancy geometry elements?  E.g. in the above example since the inner and outer buoyancy is two cylinders, however in the model for surmark950400 the outer ring is a pipe. Do I need to account for that?</p>\n<ul>\n<li>Good question.  I would suggest not adding that complexity and making it clear in the documentation that we don\u2019t take into account overlapping geometry.  I wasn\u2019t very careful with the example, so I imagine it might be nonsensical.</li>\n<li>For VRX I imagine that everything can be taken care of with a single buoyancy element for an object - but generalizing the capability to sets of elements seems like it would be reasonable.</li>\n</ul>\n</li>\n<li>\n<p>you mentioned writing tests to verify implementation. Should I go with a test driven approach? If so are there good examples for unit testing gazebo plugins?</p>\n<ul>\n<li>We can probably come up with a number of tests to verify that we are implementing things in a reasonable fashion.  I think it would be good to come up with some simple physical example where we know what behavior to expect (closed form solution) and then verify that the plugin reproduces the behavior.  </li>\n<li>I think writing up some unit tests would be fantastic for simple tests.  You might take a look at some of the tests in the gazebo source for inspiration: <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/default/gazebo/physics\" rel=\"nofollow\">https://bitbucket.org/osrf/gazebo/src/default/gazebo/physics/</a><br />\n<a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/default/gazebo/sensors\" rel=\"nofollow\">https://bitbucket.org/osrf/gazebo/src/default/gazebo/sensors/</a><br />\n  That being said, for some cases it may not be worth the effort to formalize a unit test and it may be more simple tests you can do along the way to verify that we\u2019ve implemented the physics correctly.</li>\n<li>An example test might be - for each geometry we should be able to verify that the steady state location of the object is consistent with the force balance (equilibrium of gravity and buoyancy forces).  That would be a good first test.</li>\n<li>A more dynamic test would be to provide initial conditions below and above the water and verify that the system settles to a stable equilibrium.</li>\n</ul>\n</li>\n</ul>", "type": "rendered"}, "created_on": "2019-05-28T20:21:32.711569+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": null, "type": "issue_comment", "id": 52325170}
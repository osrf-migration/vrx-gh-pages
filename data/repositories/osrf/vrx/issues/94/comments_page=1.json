{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94/comments/52281295.json"}, "html": {"href": "#!/osrf/vrx/issues/94#comment-52281295"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94.json"}}, "type": "issue", "id": 94, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Buoyancy plugin improvement for flat ocean and standard shapes"}, "content": {"raw": "Currently the [buoyancy\\_gazebo\\_plugin.cc](#!/osrf/vrx/src/default/usv_gazebo_plugins/src/buoyancy_gazebo_plugin.cc) is used to provide a vertical buoyancy force to objects at or near the surface of the water such as course elements like buoys, markers, obstacles, etc.  As an example see the surmark950400 [model.sdf.](#!/osrf/vrx/src/default/vrx_gazebo/models/surmark950400/model.sdf)  In the current implementation each model plugin is independently configured with\r\n\r\n* water level in z direction, gazebo coordinates\r\n* drag\r\n* water density\r\n* cross-sectional-area\r\n* height\r\n* center of volume \r\n\r\nThe effective buoyancy force is calculated as simply the product of the cross-sectional-area and the relative z displacement of the object and the water level. This method models any link as a shape of constant cross-sectional area  for a finite height object.  Also, the buoyancy object is always considered to be oriented perpendicular to the water surface.\r\n\r\nConsider revising the plugin to enable specifying simple geometry\\(ies\\).  For example, the model.sdf for the surmark950400 marker might look something like\u2026\r\n\r\n```\r\n<plugin name=\"BuoyancyPlugin\" filename=\"libbuoyancy_gazebo_plugin.so\">\r\n      <fluid_density>1000</fluid_density>\r\n      <fluid_level>0.0</fluid_level>\r\n      <fluid_drag>5.0</fluid_drag>\r\n      <element name=\"buoyancy_inner\">\r\n        <link_name>link</link_name>\r\n        <pose>0 0 0.5 0 0 0</pose>\r\n        <geometry>\r\n          <cylinder>\r\n            <radius>0.15</radius>\r\n            <length>1.18</length>\r\n          </cylinder>\r\n        </geometry>\r\n      </element>\r\n      <element name=\"buoyancy_outer\">\r\n        <link_name>link</link_name>\r\n        <pose>0 0 -0.31 0 0 0</pose>\r\n        <geometry>\r\n          <cylinder>\r\n            <radius>0.24</radius>\r\n            <length>0.2</length>\r\n          </cylinder>\r\n        </geometry>\r\n      </element>\r\n \r\n    </plugin>\r\n```\r\n\r\n\u200c\r\n\r\n* Should be able to support box, cylinder and sphere geometries.\r\n* Should be able to support multiple \u201celements\u201d for each model\r\n* Should take into account the orientation of each geometry element when calculating the center of buoyancy - where the force is applied.\r\n\r\nWill need to put together some simple tests to verify the implementation.\r\n\r\nFollow-on work will be to have the ability to get the instantaneous water height at the object location to include the wave field, but that will need to wait until after we address [issue #23](#!/osrf/vrx/issues/23/coordinate-the-physics-and-visualization).", "markup": "markdown", "html": "<p>Currently the <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/src/default/usv_gazebo_plugins/src/buoyancy_gazebo_plugin.cc\" rel=\"nofollow\">buoyancy_gazebo_plugin.cc</a> is used to provide a vertical buoyancy force to objects at or near the surface of the water such as course elements like buoys, markers, obstacles, etc.  As an example see the surmark950400 <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/src/default/vrx_gazebo/models/surmark950400/model.sdf\" rel=\"nofollow\">model.sdf.</a>  In the current implementation each model plugin is independently configured with</p>\n<ul>\n<li>water level in z direction, gazebo coordinates</li>\n<li>drag</li>\n<li>water density</li>\n<li>cross-sectional-area</li>\n<li>height</li>\n<li>center of volume </li>\n</ul>\n<p>The effective buoyancy force is calculated as simply the product of the cross-sectional-area and the relative z displacement of the object and the water level. This method models any link as a shape of constant cross-sectional area  for a finite height object.  Also, the buoyancy object is always considered to be oriented perpendicular to the water surface.</p>\n<p>Consider revising the plugin to enable specifying simple geometry(ies).  For example, the model.sdf for the surmark950400 marker might look something like\u2026</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;plugin</span> <span class=\"na\">name=</span><span class=\"s\">&quot;BuoyancyPlugin&quot;</span> <span class=\"na\">filename=</span><span class=\"s\">&quot;libbuoyancy_gazebo_plugin.so&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;fluid_density&gt;</span>1000<span class=\"nt\">&lt;/fluid_density&gt;</span>\n      <span class=\"nt\">&lt;fluid_level&gt;</span>0.0<span class=\"nt\">&lt;/fluid_level&gt;</span>\n      <span class=\"nt\">&lt;fluid_drag&gt;</span>5.0<span class=\"nt\">&lt;/fluid_drag&gt;</span>\n      <span class=\"nt\">&lt;element</span> <span class=\"na\">name=</span><span class=\"s\">&quot;buoyancy_inner&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;link_name&gt;</span>link<span class=\"nt\">&lt;/link_name&gt;</span>\n        <span class=\"nt\">&lt;pose&gt;</span>0 0 0.5 0 0 0<span class=\"nt\">&lt;/pose&gt;</span>\n        <span class=\"nt\">&lt;geometry&gt;</span>\n          <span class=\"nt\">&lt;cylinder&gt;</span>\n            <span class=\"nt\">&lt;radius&gt;</span>0.15<span class=\"nt\">&lt;/radius&gt;</span>\n            <span class=\"nt\">&lt;length&gt;</span>1.18<span class=\"nt\">&lt;/length&gt;</span>\n          <span class=\"nt\">&lt;/cylinder&gt;</span>\n        <span class=\"nt\">&lt;/geometry&gt;</span>\n      <span class=\"nt\">&lt;/element&gt;</span>\n      <span class=\"nt\">&lt;element</span> <span class=\"na\">name=</span><span class=\"s\">&quot;buoyancy_outer&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;link_name&gt;</span>link<span class=\"nt\">&lt;/link_name&gt;</span>\n        <span class=\"nt\">&lt;pose&gt;</span>0 0 -0.31 0 0 0<span class=\"nt\">&lt;/pose&gt;</span>\n        <span class=\"nt\">&lt;geometry&gt;</span>\n          <span class=\"nt\">&lt;cylinder&gt;</span>\n            <span class=\"nt\">&lt;radius&gt;</span>0.24<span class=\"nt\">&lt;/radius&gt;</span>\n            <span class=\"nt\">&lt;length&gt;</span>0.2<span class=\"nt\">&lt;/length&gt;</span>\n          <span class=\"nt\">&lt;/cylinder&gt;</span>\n        <span class=\"nt\">&lt;/geometry&gt;</span>\n      <span class=\"nt\">&lt;/element&gt;</span>\n\n    <span class=\"nt\">&lt;/plugin&gt;</span>\n</pre></div>\n\n\n<p>\u200c</p>\n<ul>\n<li>Should be able to support box, cylinder and sphere geometries.</li>\n<li>Should be able to support multiple \u201celements\u201d for each model</li>\n<li>Should take into account the orientation of each geometry element when calculating the center of buoyancy - where the force is applied.</li>\n</ul>\n<p>Will need to put together some simple tests to verify the implementation.</p>\n<p>Follow-on work will be to have the ability to get the instantaneous water height at the object location to include the wave field, but that will need to wait until after we address <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/issues/23/coordinate-the-physics-and-visualization\" rel=\"nofollow\">issue #23</a>.</p>", "type": "rendered"}, "created_on": "2019-05-25T04:37:05.312099+00:00", "user": {"display_name": "Rumman Waqar", "uuid": "{375366ee-150c-4843-9449-cbec61c538ca}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B375366ee-150c-4843-9449-cbec61c538ca%7D"}, "html": {"href": "https://bitbucket.org/%7B375366ee-150c-4843-9449-cbec61c538ca%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5a8b94bb21870439aa9167ef/026c5cb4-b99d-4aad-90d7-62d45fe41395/128"}}, "nickname": "rumman05", "type": "user", "account_id": "5a8b94bb21870439aa9167ef"}, "updated_on": null, "type": "issue_comment", "id": 52281295}, {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94/comments/52307985.json"}, "html": {"href": "#!/osrf/vrx/issues/94#comment-52307985"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94.json"}}, "type": "issue", "id": 94, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Buoyancy plugin improvement for flat ocean and standard shapes"}, "content": {"raw": "I had a few questions:\n\n* will this deprecate the old method of specifying area & height?\n* currently we support one buoyancy element per link \\([#!/osrf/vrx/src/76b4cb73809cf437b33ee26e277a7caecc2465d2/usv\\_gazebo\\_plugins/src/buoyancy\\_gazebo\\_plugin.cc#lines-92](#!/osrf/vrx/src/76b4cb73809cf437b33ee26e277a7caecc2465d2/usv_gazebo_plugins/src/buoyancy_gazebo_plugin.cc#lines-92)\\). In your example above you specify two buoyancy element for a single link. If we go forward with this format do we need to also deal with intersections between buoyancy geometry elements? E.g. in the above example since the inner and outer buoyancy is two cylinders, however in the model for surmark950400 the outer ring is a pipe. Do I need to account for that?\n* you mentioned writing tests to verify implementation. Should I go with a test driven approach? If so are there good examples for unit testing gazebo plugins?", "markup": "markdown", "html": "<p>I had a few questions:</p>\n<ul>\n<li>will this deprecate the old method of specifying area &amp; height?</li>\n<li>currently we support one buoyancy element per link (<a data-is-external-link=\"true\" href=\"#!/osrf/vrx/src/76b4cb73809cf437b33ee26e277a7caecc2465d2/usv_gazebo_plugins/src/buoyancy_gazebo_plugin.cc#lines-92\" rel=\"nofollow\">#!/osrf/vrx/src/76b4cb73809cf437b33ee26e277a7caecc2465d2/usv_gazebo_plugins/src/buoyancy_gazebo_plugin.cc#lines-92</a>). In your example above you specify two buoyancy element for a single link. If we go forward with this format do we need to also deal with intersections between buoyancy geometry elements? E.g. in the above example since the inner and outer buoyancy is two cylinders, however in the model for surmark950400 the outer ring is a pipe. Do I need to account for that?</li>\n<li>you mentioned writing tests to verify implementation. Should I go with a test driven approach? If so are there good examples for unit testing gazebo plugins?</li>\n</ul>", "type": "rendered"}, "created_on": "2019-05-27T21:50:56.816355+00:00", "user": {"display_name": "Rumman Waqar", "uuid": "{375366ee-150c-4843-9449-cbec61c538ca}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B375366ee-150c-4843-9449-cbec61c538ca%7D"}, "html": {"href": "https://bitbucket.org/%7B375366ee-150c-4843-9449-cbec61c538ca%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5a8b94bb21870439aa9167ef/026c5cb4-b99d-4aad-90d7-62d45fe41395/128"}}, "nickname": "rumman05", "type": "user", "account_id": "5a8b94bb21870439aa9167ef"}, "updated_on": "2019-05-27T21:54:27.210032+00:00", "type": "issue_comment", "id": 52307985}, {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94/comments/52325080.json"}, "html": {"href": "#!/osrf/vrx/issues/94#comment-52325080"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94.json"}}, "type": "issue", "id": 94, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Buoyancy plugin improvement for flat ocean and standard shapes"}, "content": {"raw": "\u200c\n\n![](https://lh4.googleusercontent.com/3bngMg4RmmmTNQF2MzbkA2Fbi2zmnzj1mCIpGjG2alTKxfqhv-pkJABNuFsDhyCu3ID2PfxQK6Gos4xlKXMsPRXij4sLUSeMivBfo-U-McdPYahS4eNZ_4nho_p1eF4WSFY6GYsl)\nI have made this test world to testing the buoyancy plugin. It considers all three geometries, geometries at angles and multiple geometries", "markup": "markdown", "html": "<p>\u200c</p>\n<p><img alt=\"\" src=\"https://lh4.googleusercontent.com/3bngMg4RmmmTNQF2MzbkA2Fbi2zmnzj1mCIpGjG2alTKxfqhv-pkJABNuFsDhyCu3ID2PfxQK6Gos4xlKXMsPRXij4sLUSeMivBfo-U-McdPYahS4eNZ_4nho_p1eF4WSFY6GYsl\" />\nI have made this test world to testing the buoyancy plugin. It considers all three geometries, geometries at angles and multiple geometries</p>", "type": "rendered"}, "created_on": "2019-05-28T20:14:36.956365+00:00", "user": {"display_name": "Rumman Waqar", "uuid": "{375366ee-150c-4843-9449-cbec61c538ca}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B375366ee-150c-4843-9449-cbec61c538ca%7D"}, "html": {"href": "https://bitbucket.org/%7B375366ee-150c-4843-9449-cbec61c538ca%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5a8b94bb21870439aa9167ef/026c5cb4-b99d-4aad-90d7-62d45fe41395/128"}}, "nickname": "rumman05", "type": "user", "account_id": "5a8b94bb21870439aa9167ef"}, "updated_on": null, "type": "issue_comment", "id": 52325080}, {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94/comments/52325170.json"}, "html": {"href": "#!/osrf/vrx/issues/94#comment-52325170"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94.json"}}, "type": "issue", "id": 94, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Buoyancy plugin improvement for flat ocean and standard shapes"}, "content": {"raw": "* will this deprecate the old method of specifying area & height?\n\n    * Yes.  \n    \n* currently we support one buoyancy element per link \\([#!/osrf/vrx/src/76b4cb73809cf437b33ee26e277a7caecc2465d2/usv\\_gazebo\\_plugins/src/buoyancy\\_gazebo\\_plugin.cc#lines-92\\).](#!/osrf/vrx/src/76b4cb73809cf437b33ee26e277a7caecc2465d2/usv_gazebo_plugins/src/buoyancy_gazebo_plugin.cc#lines-92).) In your example above you specify two buoyancy element for a single link. If we go forward with this format do we need to also deal with intersections between buoyancy geometry elements?  E.g. in the above example since the inner and outer buoyancy is two cylinders, however in the model for surmark950400 the outer ring is a pipe. Do I need to account for that?\n\n    * Good question.  I would suggest not adding that complexity and making it clear in the documentation that we don\u2019t take into account overlapping geometry.  I wasn\u2019t very careful with the example, so I imagine it might be nonsensical.\n    * For VRX I imagine that everything can be taken care of with a single buoyancy element for an object - but generalizing the capability to sets of elements seems like it would be reasonable.\n    \n* you mentioned writing tests to verify implementation. Should I go with a test driven approach? If so are there good examples for unit testing gazebo plugins?\n\n    * We can probably come up with a number of tests to verify that we are implementing things in a reasonable fashion.  I think it would be good to come up with some simple physical example where we know what behavior to expect \\(closed form solution\\) and then verify that the plugin reproduces the behavior.  \n    * I think writing up some unit tests would be fantastic for simple tests.  You might take a look at some of the tests in the gazebo source for inspiration: [https://bitbucket.org/osrf/gazebo/src/default/gazebo/physics/](https://bitbucket.org/osrf/gazebo/src/default/gazebo/physics)  \n      [https://bitbucket.org/osrf/gazebo/src/default/gazebo/sensors/](https://bitbucket.org/osrf/gazebo/src/default/gazebo/sensors)  \n      That being said, for some cases it may not be worth the effort to formalize a unit test and it may be more simple tests you can do along the way to verify that we\u2019ve implemented the physics correctly.\n    * An example test might be - for each geometry we should be able to verify that the steady state location of the object is consistent with the force balance \\(equilibrium of gravity and buoyancy forces\\).  That would be a good first test.\n    * A more dynamic test would be to provide initial conditions below and above the water and verify that the system settles to a stable equilibrium.", "markup": "markdown", "html": "<ul>\n<li>\n<p>will this deprecate the old method of specifying area &amp; height?</p>\n<ul>\n<li>Yes.  </li>\n</ul>\n</li>\n<li>\n<p>currently we support one buoyancy element per link (<a data-is-external-link=\"true\" href=\"#!/osrf/vrx/src/76b4cb73809cf437b33ee26e277a7caecc2465d2/usv_gazebo_plugins/src/buoyancy_gazebo_plugin.cc#lines-92\" rel=\"nofollow\">#!/osrf/vrx/src/76b4cb73809cf437b33ee26e277a7caecc2465d2/usv_gazebo_plugins/src/buoyancy_gazebo_plugin.cc#lines-92).</a>.) In your example above you specify two buoyancy element for a single link. If we go forward with this format do we need to also deal with intersections between buoyancy geometry elements?  E.g. in the above example since the inner and outer buoyancy is two cylinders, however in the model for surmark950400 the outer ring is a pipe. Do I need to account for that?</p>\n<ul>\n<li>Good question.  I would suggest not adding that complexity and making it clear in the documentation that we don\u2019t take into account overlapping geometry.  I wasn\u2019t very careful with the example, so I imagine it might be nonsensical.</li>\n<li>For VRX I imagine that everything can be taken care of with a single buoyancy element for an object - but generalizing the capability to sets of elements seems like it would be reasonable.</li>\n</ul>\n</li>\n<li>\n<p>you mentioned writing tests to verify implementation. Should I go with a test driven approach? If so are there good examples for unit testing gazebo plugins?</p>\n<ul>\n<li>We can probably come up with a number of tests to verify that we are implementing things in a reasonable fashion.  I think it would be good to come up with some simple physical example where we know what behavior to expect (closed form solution) and then verify that the plugin reproduces the behavior.  </li>\n<li>I think writing up some unit tests would be fantastic for simple tests.  You might take a look at some of the tests in the gazebo source for inspiration: <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/default/gazebo/physics\" rel=\"nofollow\">https://bitbucket.org/osrf/gazebo/src/default/gazebo/physics/</a><br />\n<a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/default/gazebo/sensors\" rel=\"nofollow\">https://bitbucket.org/osrf/gazebo/src/default/gazebo/sensors/</a><br />\n  That being said, for some cases it may not be worth the effort to formalize a unit test and it may be more simple tests you can do along the way to verify that we\u2019ve implemented the physics correctly.</li>\n<li>An example test might be - for each geometry we should be able to verify that the steady state location of the object is consistent with the force balance (equilibrium of gravity and buoyancy forces).  That would be a good first test.</li>\n<li>A more dynamic test would be to provide initial conditions below and above the water and verify that the system settles to a stable equilibrium.</li>\n</ul>\n</li>\n</ul>", "type": "rendered"}, "created_on": "2019-05-28T20:21:32.711569+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": null, "type": "issue_comment", "id": 52325170}, {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94/comments/52456705.json"}, "html": {"href": "#!/osrf/vrx/issues/94#comment-52456705"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94.json"}}, "type": "issue", "id": 94, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Buoyancy plugin improvement for flat ocean and standard shapes"}, "content": {"raw": "@{557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1} I am having a hard time calculating submersed volume of geometries rotated about roll and pitch.  In the issue you said that \u201cthe buoyancy object is always considered to be oriented perpendicular to the water surface.\u201d Does this mean that the link they these objects are associated with will never have a roll or pitch \\(aka these objects will always be perpendicular\\)?", "markup": "markdown", "html": "<p><span class=\"ap-mention\" data-atlassian-id=\"557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1\">@Brian Bingham</span> I am having a hard time calculating submersed volume of geometries rotated about roll and pitch.  In the issue you said that \u201cthe buoyancy object is always considered to be oriented perpendicular to the water surface.\u201d Does this mean that the link they these objects are associated with will never have a roll or pitch (aka these objects will always be perpendicular)?</p>", "type": "rendered"}, "created_on": "2019-06-05T16:08:10.737338+00:00", "user": {"display_name": "Rumman Waqar", "uuid": "{375366ee-150c-4843-9449-cbec61c538ca}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B375366ee-150c-4843-9449-cbec61c538ca%7D"}, "html": {"href": "https://bitbucket.org/%7B375366ee-150c-4843-9449-cbec61c538ca%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5a8b94bb21870439aa9167ef/026c5cb4-b99d-4aad-90d7-62d45fe41395/128"}}, "nickname": "rumman05", "type": "user", "account_id": "5a8b94bb21870439aa9167ef"}, "updated_on": null, "type": "issue_comment", "id": 52456705}, {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94/comments/52809796.json"}, "html": {"href": "#!/osrf/vrx/issues/94#comment-52809796"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/94.json"}}, "type": "issue", "id": 94, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Buoyancy plugin improvement for flat ocean and standard shapes"}, "content": {"raw": "See pull request #122.", "markup": "markdown", "html": "<p>See <a href=\"#!/osrf/vrx/pull-requests/122/issue-94-buoyancy\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #122</a>.</p>", "type": "rendered"}, "created_on": "2019-07-01T22:35:56.632807+00:00", "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}, "updated_on": null, "type": "issue_comment", "id": 52809796}], "page": 1, "size": 6}
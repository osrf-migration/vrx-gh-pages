{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "links": {"attachments": {"href": "data/repositories/osrf/vrx/issues/139/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/vrx/issues/139.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/vrx/issues/139/watch"}, "comments": {"href": "data/repositories/osrf/vrx/issues/139/comments_page=1.json"}, "html": {"href": "#!/osrf/vrx/issues/139/set-environment-variable-or-parameter-to"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/vrx/issues/139/vote"}}, "reporter": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "title": "Set environment variable or parameter to shutdown Gazebo/ROS on task completion", "component": null, "votes": 0, "watches": 1, "content": {"raw": "**Purpose**\r\n\r\nIn order for the competition to be run smoothly, we need an elegant way to shutdown Gazebo/ROS after a trial is completed such that we can record the results and then start the next task.\r\n\r\n**What is currently happening**\r\n\r\nCurrently, while running the competition, the `/vrx/task/info` topic is published, which shows the current status and score. An example is shown below.\r\n\r\n```\r\nname: &amp;#34;scan_dock&amp;#34;\r\nstate: &amp;#34;finished&amp;#34;\r\nready_time: \r\n  secs: 3\r\n  nsecs:         0\r\nrunning_time: \r\n  secs: 6\r\n  nsecs:         0\r\nelapsed_time: \r\n  secs: 10\r\n  nsecs:         0\r\nremaining_time: \r\n  secs: 0\r\n  nsecs:         0\r\ntimed_out: True\r\nscore: 0.0\r\n```\r\n\r\nAfter it is timed\\_out, the simulation continues to run as normal. This is desired behavior for testing, as we may want to still try things out after the competition is over. However, we need the option to end it.\r\n\r\n**Possible Solution**\r\n\r\nAfter looking into ARIAC\u2019s method of ending competition, what they did was:\r\n\r\n1. Set environment variable `ARIAC_EXIT_ON_COMPLETION=1`, then ran their system. This is shown here: [https://github.com/osrf/ariac-docker/blob/master/ariac-server/ariac-server/run\\_ariac\\_task.sh](https://github.com/osrf/ariac-docker/blob/master/ariac-server/ariac-server/run_ariac_task.sh) line 40\r\n2. In their ROS task manager plugin \\([https://bitbucket.org/osrf/ariac/src/master/osrf\\_gear/src/ROSAriacTaskManagerPlugin.cc](https://bitbucket.org/osrf/ariac/src/master/osrf_gear/src/ROSAriacTaskManagerPlugin.cc)\\), they have a Gazebo publisher that publishes to `/gazebo/server/control`, to end the simulation. This is a good reference for what we want.\r\n\r\n**Open Design Decisions**\r\n\r\n* Should this just kill Gazebo or kill all ROS nodes and ROS? ARIAC only kills Gazebo I believe, but I\u2019m not sure if there\u2019s any reason not to kill all.\r\n* Should we use an environment variable, ros parameter, roslaunch arguments? I feel ros parameter might be best because we wouldn\u2019t need to add arguments to all launch files\r\n* Should we implement this in the scoring plugin or somewhere else?\r\n* Should we also add some important competition end functionality in the same place?\r\n\r\n    * Eg. event-driven check for end condition \\(the current publish rate to `/vrx/task/info` is 1Hz, which may be too low to just subscribe to for scoring\\)\r\n    \r\n\r\n```\r\nrostopic hz  /vrx/task/info \r\nsubscribed to [/vrx/task/info]\r\nWARNING: may be using simulated time\r\naverage rate: 0.999\r\n    min: 1.001s max: 1.001s std dev: 0.00000s window: 2\r\naverage rate: 1.000\r\n    min: 0.999s max: 1.001s std dev: 0.00100s window: 3\r\n```\r\n\r\n* Should we output final score to the screen? Put it in the Gazebo or ROS log file \\(probably ROS\\)?", "markup": "markdown", "html": "<p><strong>Purpose</strong></p>\n<p>In order for the competition to be run smoothly, we need an elegant way to shutdown Gazebo/ROS after a trial is completed such that we can record the results and then start the next task.</p>\n<p><strong>What is currently happening</strong></p>\n<p>Currently, while running the competition, the <code>/vrx/task/info</code> topic is published, which shows the current status and score. An example is shown below.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">name</span><span class=\"o\">:</span> <span class=\"o\">&amp;</span><span class=\"nt\">amp</span><span class=\"o\">;</span><span class=\"p\">#</span><span class=\"nn\">34</span><span class=\"o\">;</span><span class=\"nt\">scan_dock</span><span class=\"o\">&amp;</span><span class=\"nt\">amp</span><span class=\"o\">;</span><span class=\"p\">#</span><span class=\"nn\">34</span><span class=\"o\">;</span>\n<span class=\"nt\">state</span><span class=\"o\">:</span> <span class=\"o\">&amp;</span><span class=\"nt\">amp</span><span class=\"o\">;</span><span class=\"p\">#</span><span class=\"nn\">34</span><span class=\"o\">;</span><span class=\"nt\">finished</span><span class=\"o\">&amp;</span><span class=\"nt\">amp</span><span class=\"o\">;</span><span class=\"p\">#</span><span class=\"nn\">34</span><span class=\"o\">;</span>\n<span class=\"nt\">ready_time</span><span class=\"o\">:</span> \n  <span class=\"nt\">secs</span><span class=\"o\">:</span> <span class=\"nt\">3</span>\n  <span class=\"nt\">nsecs</span><span class=\"o\">:</span>         <span class=\"nt\">0</span>\n<span class=\"nt\">running_time</span><span class=\"o\">:</span> \n  <span class=\"nt\">secs</span><span class=\"o\">:</span> <span class=\"nt\">6</span>\n  <span class=\"nt\">nsecs</span><span class=\"o\">:</span>         <span class=\"nt\">0</span>\n<span class=\"nt\">elapsed_time</span><span class=\"o\">:</span> \n  <span class=\"nt\">secs</span><span class=\"o\">:</span> <span class=\"nt\">10</span>\n  <span class=\"nt\">nsecs</span><span class=\"o\">:</span>         <span class=\"nt\">0</span>\n<span class=\"nt\">remaining_time</span><span class=\"o\">:</span> \n  <span class=\"nt\">secs</span><span class=\"o\">:</span> <span class=\"nt\">0</span>\n  <span class=\"nt\">nsecs</span><span class=\"o\">:</span>         <span class=\"nt\">0</span>\n<span class=\"nt\">timed_out</span><span class=\"o\">:</span> <span class=\"nt\">True</span>\n<span class=\"nt\">score</span><span class=\"o\">:</span> <span class=\"nt\">0</span><span class=\"p\">.</span><span class=\"nc\">0</span>\n</pre></div>\n\n\n<p>After it is timed_out, the simulation continues to run as normal. This is desired behavior for testing, as we may want to still try things out after the competition is over. However, we need the option to end it.</p>\n<p><strong>Possible Solution</strong></p>\n<p>After looking into ARIAC\u2019s method of ending competition, what they did was:</p>\n<ol>\n<li>Set environment variable <code>ARIAC_EXIT_ON_COMPLETION=1</code>, then ran their system. This is shown here: <a data-is-external-link=\"true\" href=\"https://github.com/osrf/ariac-docker/blob/master/ariac-server/ariac-server/run_ariac_task.sh\" rel=\"nofollow\">https://github.com/osrf/ariac-docker/blob/master/ariac-server/ariac-server/run_ariac_task.sh</a> line 40</li>\n<li>In their ROS task manager plugin (<a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/ariac/src/master/osrf_gear/src/ROSAriacTaskManagerPlugin.cc\" rel=\"nofollow\">https://bitbucket.org/osrf/ariac/src/master/osrf_gear/src/ROSAriacTaskManagerPlugin.cc</a>), they have a Gazebo publisher that publishes to <code>/gazebo/server/control</code>, to end the simulation. This is a good reference for what we want.</li>\n</ol>\n<p><strong>Open Design Decisions</strong></p>\n<ul>\n<li>Should this just kill Gazebo or kill all ROS nodes and ROS? ARIAC only kills Gazebo I believe, but I\u2019m not sure if there\u2019s any reason not to kill all.</li>\n<li>Should we use an environment variable, ros parameter, roslaunch arguments? I feel ros parameter might be best because we wouldn\u2019t need to add arguments to all launch files</li>\n<li>Should we implement this in the scoring plugin or somewhere else?</li>\n<li>\n<p>Should we also add some important competition end functionality in the same place?</p>\n<ul>\n<li>Eg. event-driven check for end condition (the current publish rate to <code>/vrx/task/info</code> is 1Hz, which may be too low to just subscribe to for scoring)</li>\n</ul>\n</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>rostopic hz  /vrx/task/info \nsubscribed to [/vrx/task/info]\nWARNING: may be using simulated time\naverage rate: 0.999\n    min: 1.001s max: 1.001s std dev: 0.00000s window: 2\naverage rate: 1.000\n    min: 0.999s max: 1.001s std dev: 0.00100s window: 3\n</pre></div>\n\n\n<ul>\n<li>Should we output final score to the screen? Put it in the Gazebo or ROS log file (probably ROS)?</li>\n</ul>", "type": "rendered"}, "assignee": {"display_name": "Marshall Rawson", "uuid": "{e6f8e5b5-5261-44d3-b2d4-092469c4157a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be6f8e5b5-5261-44d3-b2d4-092469c4157a%7D"}, "html": {"href": "https://bitbucket.org/%7Be6f8e5b5-5261-44d3-b2d4-092469c4157a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/bd54845fa0ad1be5a529eb87d738f221d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsMR-4.png"}}, "nickname": "MarshallRawson", "type": "user", "account_id": "5ce2e28709c5fa0fd9fb0c6c"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-07-12T20:56:59.042395+00:00", "milestone": {"name": "1.2", "links": {"self": {"href": "data/repositories/osrf/vrx/milestones/370076.json"}}}, "updated_on": "2019-07-31T22:55:02.851655+00:00", "type": "issue", "id": 139}
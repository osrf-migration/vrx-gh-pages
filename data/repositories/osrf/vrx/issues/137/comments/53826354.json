{"links": {"self": {"href": "data/repositories/osrf/vrx/issues/137/comments/53826354.json"}, "html": {"href": "#!/osrf/vrx/issues/137#comment-53826354"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/137.json"}}, "type": "issue", "id": 137, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Consider differences in heading sensor plugin options: IMU and GPS-based"}, "content": {"raw": "I believe the key thing to make sure we have the documentation on the various frames correct.\n\n* As discussed in [Issue #64](#!/osrf/vrx/issues/64/possible-frame-error-in-simulated-gps), the hector\\_gazebo\\_ros\\_gps plugin provides an estimate of velocity in NWU coordinates.  This can be a little confusing because it doesn\u2019t follow [REP 105](https://www.ros.org/reps/rep-0105.html#map) for Map Conventions.\n\n    * I believe in steps 1 and 2 of your approach you are trying to express this velocity vector in ENU coordinates.\n    \n* The estimate of orientation provided by the hector\\_gazebo\\_ros\\_imu plugin is provided as a quaternion in ENU coordiantes.\n\nOnce you have this all consistent there are at least a couple of ways to calculate the velocity in body-frame coordinates.\n\n1. The method you describe is to determine the yaw angle and then do a 2D transformation \\(rotation\\) of the velocity vector.  However, you are only including one part of the velocity: vel\\_x in your notation and leaving out vel\\_y.  I would recommend looking at the 2D rotation matrix as a function of yaw angle.\n2. If you want to be more general, you might consider using the full 3D velocity vector and the full quaternion to transform \\(rotate\\) the velocity vector into the 3D body frame.  There are many tools to help do this - for example in ROS the tf2 package provides this functionality [http://wiki.ros.org/tf2/Tutorials/Quaternions#Applying\\_a\\_quaternion\\_rotation](http://wiki.ros.org/tf2/Tutorials/Quaternions#Applying_a_quaternion_rotation)\n\nA good test is to simply move around the simulated WAM-V and print out or plot the body-frame velocities to verify the results agree with the visual \\(driving forward, the surge velocity should be positive and dominate, etc.\\).  This should highlight most mistakes with coordinate frames, sign errors, etc.", "markup": "markdown", "html": "<p>I believe the key thing to make sure we have the documentation on the various frames correct.</p>\n<ul>\n<li>\n<p>As discussed in <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/issues/64/possible-frame-error-in-simulated-gps\" rel=\"nofollow\">Issue #64</a>, the hector_gazebo_ros_gps plugin provides an estimate of velocity in NWU coordinates.  This can be a little confusing because it doesn\u2019t follow <a data-is-external-link=\"true\" href=\"https://www.ros.org/reps/rep-0105.html#map\" rel=\"nofollow\">REP 105</a> for Map Conventions.</p>\n<ul>\n<li>I believe in steps 1 and 2 of your approach you are trying to express this velocity vector in ENU coordinates.</li>\n</ul>\n</li>\n<li>\n<p>The estimate of orientation provided by the hector_gazebo_ros_imu plugin is provided as a quaternion in ENU coordiantes.</p>\n</li>\n</ul>\n<p>Once you have this all consistent there are at least a couple of ways to calculate the velocity in body-frame coordinates.</p>\n<ol>\n<li>The method you describe is to determine the yaw angle and then do a 2D transformation (rotation) of the velocity vector.  However, you are only including one part of the velocity: vel_x in your notation and leaving out vel_y.  I would recommend looking at the 2D rotation matrix as a function of yaw angle.</li>\n<li>If you want to be more general, you might consider using the full 3D velocity vector and the full quaternion to transform (rotate) the velocity vector into the 3D body frame.  There are many tools to help do this - for example in ROS the tf2 package provides this functionality <a data-is-external-link=\"true\" href=\"http://wiki.ros.org/tf2/Tutorials/Quaternions#Applying_a_quaternion_rotation\" rel=\"nofollow\">http://wiki.ros.org/tf2/Tutorials/Quaternions#Applying_a_quaternion_rotation</a></li>\n</ol>\n<p>A good test is to simply move around the simulated WAM-V and print out or plot the body-frame velocities to verify the results agree with the visual (driving forward, the surge velocity should be positive and dominate, etc.).  This should highlight most mistakes with coordinate frames, sign errors, etc.</p>", "type": "rendered"}, "created_on": "2019-09-09T23:54:37.249009+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": null, "type": "issue_comment", "id": 53826354}
{"links": {"self": {"href": "data/repositories/osrf/vrx/issues/137/comments/53029483.json"}, "html": {"href": "#!/osrf/vrx/issues/137#comment-53029483"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/137.json"}}, "type": "issue", "id": 137, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Consider differences in heading sensor plugin options: IMU and GPS-based"}, "content": {"raw": "Thank you both for looking into this.  Here is what I understand are the potential differences between the two methods for simulating a heading estimate:\n\n1. Coordinate frames:  As @{5ce2e28709c5fa0fd9fb0c6c} describes\u2026.\n\n    1. hector\\_gazebo\\_imu provides the orientation as a quaternion following [REP 103](#!/osrf/vrx/wiki/documentation)\n    2. nmea\\_gps\\_plugin provides compass heading - degrees, NED\n    \n2. Interface:\n\n    1. hector\\_gazebo\\_imu simulates a heading sensor at the ROS API layer by publishing  a sensor\\_msgs::Imu message\n    2. nmea\\_gps\\_plugin simulates a heading sensor at the sensor interface layer by publishing nmea\\_msgs::Sentence message\n    \n3. Models:  My impression is that both plugins are reporting true geographic heading \\(not magnetic heading\\) and are using equivalent Gaussian additive noise models to generate noisy heading measurements.\n\nPlease add any other issues that might be worth discussing.  \n\nHere is my opinion on the issues above:\n\n1. Coordinate frames are a convention.  The main thing is to make sure it is well documented.  Teams should be able to efficiently move between representations and frames.  I don\u2019t see this as a fundamental issue between the two.   The hector\\_gazebo\\_imu interface is certainly more in-line with the ROS conventions.\n2. Interface: Gazebo sensor plugins \\(at least for VRX\\) typically simulate the sensor information at the ROS API layer.    This makes things much more generalizable.  For example, the lidar data is simulated as point cloud ROS messages instead of publishing Ethernet packets.  While NMEA is a very standard serial sensor interface, we don\u2019t simulate the raw data from other sensors.  The hector\\_gazebo\\_imu interface is consistent with the other sensors and actuators in the VRX simulation.\n3. Models: Have we verified that the simulation of heading sensor measurements is equivalent in both scenarios?", "markup": "markdown", "html": "<p>Thank you both for looking into this.  Here is what I understand are the potential differences between the two methods for simulating a heading estimate:</p>\n<ol>\n<li>\n<p>Coordinate frames:  As <span class=\"ap-mention\" data-atlassian-id=\"5ce2e28709c5fa0fd9fb0c6c\">@Marshall Rawson</span> describes\u2026.</p>\n<ol>\n<li>hector_gazebo_imu provides the orientation as a quaternion following <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/wiki/documentation\" rel=\"nofollow\">REP 103</a></li>\n<li>nmea_gps_plugin provides compass heading - degrees, NED</li>\n</ol>\n</li>\n<li>\n<p>Interface:</p>\n<ol>\n<li>hector_gazebo_imu simulates a heading sensor at the ROS API layer by publishing  a sensor_msgs::Imu message</li>\n<li>nmea_gps_plugin simulates a heading sensor at the sensor interface layer by publishing nmea_msgs::Sentence message</li>\n</ol>\n</li>\n<li>\n<p>Models:  My impression is that both plugins are reporting true geographic heading (not magnetic heading) and are using equivalent Gaussian additive noise models to generate noisy heading measurements.</p>\n</li>\n</ol>\n<p>Please add any other issues that might be worth discussing.  </p>\n<p>Here is my opinion on the issues above:</p>\n<ol>\n<li>Coordinate frames are a convention.  The main thing is to make sure it is well documented.  Teams should be able to efficiently move between representations and frames.  I don\u2019t see this as a fundamental issue between the two.   The hector_gazebo_imu interface is certainly more in-line with the ROS conventions.</li>\n<li>Interface: Gazebo sensor plugins (at least for VRX) typically simulate the sensor information at the ROS API layer.    This makes things much more generalizable.  For example, the lidar data is simulated as point cloud ROS messages instead of publishing Ethernet packets.  While NMEA is a very standard serial sensor interface, we don\u2019t simulate the raw data from other sensors.  The hector_gazebo_imu interface is consistent with the other sensors and actuators in the VRX simulation.</li>\n<li>Models: Have we verified that the simulation of heading sensor measurements is equivalent in both scenarios?</li>\n</ol>", "type": "rendered"}, "created_on": "2019-07-17T17:57:54.405280+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": null, "type": "issue_comment", "id": 53029483}
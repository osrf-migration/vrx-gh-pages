{"links": {"self": {"href": "data/repositories/osrf/vrx/issues/170/comments/54065429.json"}, "html": {"href": "#!/osrf/vrx/issues/170#comment-54065429"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/vrx/issues/170.json"}}, "type": "issue", "id": 170, "repository": {"links": {"self": {"href": "data/repositories/osrf/vrx.json"}, "html": {"href": "#!/osrf/vrx"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e278ca38-7edb-4e62-b785-46dff5617d98}ts=2274605"}}, "type": "repository", "name": "vrx", "full_name": "osrf/vrx", "uuid": "{e278ca38-7edb-4e62-b785-46dff5617d98}"}, "title": "Automated Evaluation Parameters that can be changed"}, "content": {"raw": "Unfortunately at this time, for the purposes of the competition, we have to constrain the configuration options to be what is allowed in through the specified yaml files.  As you can probably imagine, supporting all the different variants for each team isn\u2019t feasible for the challenge.  We have attempted to provide enough flexibility through the sensor and propulsion configuration that teams can have their simulated platform behave similarly to the physical vehicle.  In order to have a standardized and fair competition, we\u2019ve had to put some constraints on the amount of customization \\(e.g., no infinitely powerful thrusters, etc.\\)  \n\nOne suggestion that might help your team quickly move between simulation and hardware testing is to use the \u201cremap\u201d functionality and static TF transforms as a set of shims between the VRX standard API and your custom interface.  That would allow you to effectively customize the interface on your end so that the VRX vehicle presents the same interface as your specific implementation.\n\nThank you for bringing this up, I imagine others will have similar questions.", "markup": "markdown", "html": "<p>Unfortunately at this time, for the purposes of the competition, we have to constrain the configuration options to be what is allowed in through the specified yaml files.  As you can probably imagine, supporting all the different variants for each team isn\u2019t feasible for the challenge.  We have attempted to provide enough flexibility through the sensor and propulsion configuration that teams can have their simulated platform behave similarly to the physical vehicle.  In order to have a standardized and fair competition, we\u2019ve had to put some constraints on the amount of customization (e.g., no infinitely powerful thrusters, etc.)  </p>\n<p>One suggestion that might help your team quickly move between simulation and hardware testing is to use the \u201cremap\u201d functionality and static TF transforms as a set of shims between the VRX standard API and your custom interface.  That would allow you to effectively customize the interface on your end so that the VRX vehicle presents the same interface as your specific implementation.</p>\n<p>Thank you for bringing this up, I imagine others will have similar questions.</p>", "type": "rendered"}, "created_on": "2019-09-25T05:30:12.323377+00:00", "user": {"display_name": "Brian Bingham", "uuid": "{9cdea257-248f-486e-8858-49d8485a916f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9cdea257-248f-486e-8858-49d8485a916f%7D"}, "html": {"href": "https://bitbucket.org/%7B9cdea257-248f-486e-8858-49d8485a916f%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1/7a690884-fc47-4bca-9c2b-baecee4d3dc9/128"}}, "nickname": "brian_bingham", "type": "user", "account_id": "557058:6c52d6e5-77e0-41a8-8b6e-cb9462f4d5f1"}, "updated_on": null, "type": "issue_comment", "id": 54065429}
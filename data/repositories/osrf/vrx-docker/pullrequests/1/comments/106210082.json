{"links": {"self": {"href": "data/repositories/osrf/vrx-docker/pullrequests/1/comments/106210082.json"}, "html": {"href": "#!/osrf/vrx-docker/pull-requests/1/_/diff#comment-106210082"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/osrf/vrx-docker/pullrequests/1.json"}, "html": {"href": "#!/osrf/vrx-docker/pull-requests/1"}}, "title": "Setup VRX Server Simulation"}, "content": {"raw": "**High level plan**:\n\n1. Create a `Dockerfile` for making the `vrx_server` image. It should have every dependency needed to start the simulation and log results. \\(later, will make change to use different branch of Gazebo for not exposing simulator topics\\)\n2. Setup network connection such that `vrx_server` image can be published to from another container\n3. Setup an example Docker image for controlling the simulated boat \\(eg. just tell the boat to go straight forwards\\) that teams will need to supply.\n4. Make the Gazebo fork to limit exposed ROS topics\n5. Create scripts to generate videos\n6. Make scripts to do this for all teams \\(connect the scripts together\\)\n\n**Progress**\n\nSo far, I have been able to do 1 \\(though I have some questions to make sure I am on the right track\\). I am a bit stuck on 2 right now, as I do not have a good understanding about how to set things up.\n\nI am still quite new to Docker, so I have some questions I will list below. I will keep working on them and trying to figure them out as much as I can myself \\(mostly writing it here for myself\\), but if you can give me some guidance on this, that would be really appreciated.\n\n**Questions for 1**\n\n1. In the `Dockerfile` for the `vrx_server` image, I based some of the dependencies on the `docker/Dockerfile` in the vrx repository. However, it has numerous dependencies that I believe are only for development, which aren\u2019t needed \\(eg. git, vim, etc.\\) Is there a clean, simple way I can figure out which ones are needed and which aren\u2019t for the purpose of running the simulator on the server side \\(faster than simply removing and seeing if things break\\) [#!/osrf/vrx/src/default/docker/Dockerfile](#!/osrf/vrx/src/default/docker/Dockerfile) \\(some things like joy\\_teleop are obviously not needed, but I feel we might need ros-$\\{DIST\\}-velodyne-simulator or ros-$\\{DIST\\}-robot-state-publisher\\)\n2. More of a high level question. Could I simply follow the steps of the tutorial _Install on Host_ [#!/osrf/vrx/wiki/tutorials/SystemSetupInstall](#!/osrf/vrx/wiki/tutorials/SystemSetupInstall)? What differences are there between that and the current docker setup? [#!/osrf/vrx/src/default/docker/Dockerfile](#!/osrf/vrx/src/default/docker/Dockerfile)\n3. `docker/keys` contains and old `ros.key` that no longer works. Related to [[http://answers.ros.org/question/325039/apt-update-fails-cannot-install-pkgs-key-not-working/](http://answers.ros.org/question/325039/apt-update-fails-cannot-install-pkgs-key-not-working/)](http://answers.ros.org/question/325039/apt-update-fails-cannot-install-pkgs-key-not-working). Is there a reason why we store the keys, instead of using `wget http://packages.osrfoundation.org/gazebo.key` or `wget http://packages.ros.org/ros.key`\n4. There is some nvidia-docker related setup in the other Dockerfile. Will we need this for running simulations \\(I am guessing yes for better simulation performance\\)\n5. Are we supporting Gazebo 7 or ROS Kinetic, or just Gazebo 9 and ROS Melodic?\n6. I will share these questions and more when I make a PR, but I just wanted to write it out and maybe get a quick answer on some parts if obvious.\n\n**Questions for 2**\n\n1. I understand that we need to set up a network for the containers to communicate. However, I don\u2019t understand some details about what IP Addresses to use, which IP addresses are available, creating subnets, what do do if I get errors like\n\n`Pool overlaps with other one on this address space,`\n\n`Error response from daemon: Invalid address 172.18.0.22: It does not belong to any of this network's subnets.`\n\n`Error response from daemon: user specified IP address is supported only when connecting to networks with user configured subnets.`\n\n**Questions for 3**\n\n* The new plan is to, instead of have teams give us files `build_team_system.bash` and `run_team_system.bash`, they can give us URL to image \\(that already does the part of `build_team_system.bash`\\). But would they still need to supply a separate `run_team_system.bash` to be run from inside the container, or should their image both build and run the system?\n\n", "markup": "markdown", "html": "<p><strong>High level plan</strong>:</p>\n<ol>\n<li>Create a <code>Dockerfile</code> for making the <code>vrx_server</code> image. It should have every dependency needed to start the simulation and log results. (later, will make change to use different branch of Gazebo for not exposing simulator topics)</li>\n<li>Setup network connection such that <code>vrx_server</code> image can be published to from another container</li>\n<li>Setup an example Docker image for controlling the simulated boat (eg. just tell the boat to go straight forwards) that teams will need to supply.</li>\n<li>Make the Gazebo fork to limit exposed ROS topics</li>\n<li>Create scripts to generate videos</li>\n<li>Make scripts to do this for all teams (connect the scripts together)</li>\n</ol>\n<p><strong>Progress</strong></p>\n<p>So far, I have been able to do 1 (though I have some questions to make sure I am on the right track). I am a bit stuck on 2 right now, as I do not have a good understanding about how to set things up.</p>\n<p>I am still quite new to Docker, so I have some questions I will list below. I will keep working on them and trying to figure them out as much as I can myself (mostly writing it here for myself), but if you can give me some guidance on this, that would be really appreciated.</p>\n<p><strong>Questions for 1</strong></p>\n<ol>\n<li>In the <code>Dockerfile</code> for the <code>vrx_server</code> image, I based some of the dependencies on the <code>docker/Dockerfile</code> in the vrx repository. However, it has numerous dependencies that I believe are only for development, which aren\u2019t needed (eg. git, vim, etc.) Is there a clean, simple way I can figure out which ones are needed and which aren\u2019t for the purpose of running the simulator on the server side (faster than simply removing and seeing if things break) <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/src/default/docker/Dockerfile\" rel=\"nofollow\">#!/osrf/vrx/src/default/docker/Dockerfile</a> (some things like joy_teleop are obviously not needed, but I feel we might need ros-${DIST}-velodyne-simulator or ros-${DIST}-robot-state-publisher)</li>\n<li>More of a high level question. Could I simply follow the steps of the tutorial <em>Install on Host</em> <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/wiki/tutorials/SystemSetupInstall\" rel=\"nofollow\">#!/osrf/vrx/wiki/tutorials/SystemSetupInstall</a>? What differences are there between that and the current docker setup? <a data-is-external-link=\"true\" href=\"#!/osrf/vrx/src/default/docker/Dockerfile\" rel=\"nofollow\">#!/osrf/vrx/src/default/docker/Dockerfile</a></li>\n<li><code>docker/keys</code> contains and old <code>ros.key</code> that no longer works. Related to <a data-is-external-link=\"true\" href=\"http://answers.ros.org/question/325039/apt-update-fails-cannot-install-pkgs-key-not-working\" rel=\"nofollow\">[http://answers.ros.org/question/325039/apt-update-fails-cannot-install-pkgs-key-not-working/](http://answers.ros.org/question/325039/apt-update-fails-cannot-install-pkgs-key-not-working/)</a>. Is there a reason why we store the keys, instead of using <code>wget http://packages.osrfoundation.org/gazebo.key</code> or <code>wget http://packages.ros.org/ros.key</code></li>\n<li>There is some nvidia-docker related setup in the other Dockerfile. Will we need this for running simulations (I am guessing yes for better simulation performance)</li>\n<li>Are we supporting Gazebo 7 or ROS Kinetic, or just Gazebo 9 and ROS Melodic?</li>\n<li>I will share these questions and more when I make a PR, but I just wanted to write it out and maybe get a quick answer on some parts if obvious.</li>\n</ol>\n<p><strong>Questions for 2</strong></p>\n<ol>\n<li>I understand that we need to set up a network for the containers to communicate. However, I don\u2019t understand some details about what IP Addresses to use, which IP addresses are available, creating subnets, what do do if I get errors like</li>\n</ol>\n<p><code>Pool overlaps with other one on this address space,</code></p>\n<p><code>Error response from daemon: Invalid address 172.18.0.22: It does not belong to any of this network's subnets.</code></p>\n<p><code>Error response from daemon: user specified IP address is supported only when connecting to networks with user configured subnets.</code></p>\n<p><strong>Questions for 3</strong></p>\n<ul>\n<li>The new plan is to, instead of have teams give us files <code>build_team_system.bash</code> and <code>run_team_system.bash</code>, they can give us URL to image (that already does the part of <code>build_team_system.bash</code>). But would they still need to supply a separate <code>run_team_system.bash</code> to be run from inside the container, or should their image both build and run the system?</li>\n</ul>", "type": "rendered"}, "created_on": "2019-06-19T01:12:21.029027+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-19T01:12:21.037241+00:00", "type": "pullrequest_comment", "id": 106210082}
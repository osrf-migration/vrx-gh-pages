{"links": {"self": {"href": "data/repositories/osrf/vrx-docker/pullrequests/1/comments/106686086.json"}, "html": {"href": "#!/osrf/vrx-docker/pull-requests/1/_/diff#comment-106686086"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/osrf/vrx-docker/pullrequests/1.json"}, "html": {"href": "#!/osrf/vrx-docker/pull-requests/1"}}, "title": "Setup VRX Server Simulation"}, "content": {"raw": "**Progress**\n\nI have made some solid progress this week.\n\n* `./kill_containers.bash` to kill created containers from `./run_trial.bash`\n* Example Docker file for competitors `vrx_competitor/Dockerfile`\n* `./vrx_network.bash` to create a common network for containers\n* `./vrx_server/build_image.bash` to create an image for the server\n\n`./run_trial <team_name> <trial_name>` is  the high level script that \n\n* Checks for valid input\n* Creates a log folder on the host\n* Checks for valid config .yaml files\n* Kills old running containers\n* Starts a network\n* Runs `./vrx_server/run_container.bash`, which creates the server container and runs `vrx_server/vrx-server/run_vrx_task.bash`\n* Runs the example competition containers, which currently publishes a left\\_thrust\\_cmd value and echos imu/data\n* Runs this for a certain amount of time before saving log files, killing containers, and exiting\n\n\u200c\n\n**Instructions to Test**\n\n1. Go to the root directory of this repo `cd vrx-docker`\n2. Build the server image `./vrx_server/build_image.bash` \\(may take up to 25 min with bad wifi, working to reduce this\\)\n3. Build the example competition image \\(based on [https://docs.docker.com/samples/library/ros/#networks](https://docs.docker.com/samples/library/ros/#networks)\\) `docker build --tag ros:ros-tutorials ./vrx_competitor`\n4. Run the example trial with an example team `./run_trial.bash example_team example_trial`\n\nTo explore the docker containers being made, run `docker container ls` and to look inside a container you can run `docker exec -it <container_id> bash`, eg `docker exec -it vrx-server-system bash`", "markup": "markdown", "html": "<p><strong>Progress</strong></p>\n<p>I have made some solid progress this week.</p>\n<ul>\n<li><code>./kill_containers.bash</code> to kill created containers from <code>./run_trial.bash</code></li>\n<li>Example Docker file for competitors <code>vrx_competitor/Dockerfile</code></li>\n<li><code>./vrx_network.bash</code> to create a common network for containers</li>\n<li><code>./vrx_server/build_image.bash</code> to create an image for the server</li>\n</ul>\n<p><code>./run_trial &lt;team_name&gt; &lt;trial_name&gt;</code> is  the high level script that </p>\n<ul>\n<li>Checks for valid input</li>\n<li>Creates a log folder on the host</li>\n<li>Checks for valid config .yaml files</li>\n<li>Kills old running containers</li>\n<li>Starts a network</li>\n<li>Runs <code>./vrx_server/run_container.bash</code>, which creates the server container and runs <code>vrx_server/vrx-server/run_vrx_task.bash</code></li>\n<li>Runs the example competition containers, which currently publishes a left_thrust_cmd value and echos imu/data</li>\n<li>Runs this for a certain amount of time before saving log files, killing containers, and exiting</li>\n</ul>\n<p>\u200c</p>\n<p><strong>Instructions to Test</strong></p>\n<ol>\n<li>Go to the root directory of this repo <code>cd vrx-docker</code></li>\n<li>Build the server image <code>./vrx_server/build_image.bash</code> (may take up to 25 min with bad wifi, working to reduce this)</li>\n<li>Build the example competition image (based on <a data-is-external-link=\"true\" href=\"https://docs.docker.com/samples/library/ros/#networks\" rel=\"nofollow\">https://docs.docker.com/samples/library/ros/#networks</a>) <code>docker build --tag ros:ros-tutorials ./vrx_competitor</code></li>\n<li>Run the example trial with an example team <code>./run_trial.bash example_team example_trial</code></li>\n</ol>\n<p>To explore the docker containers being made, run <code>docker container ls</code> and to look inside a container you can run <code>docker exec -it &lt;container_id&gt; bash</code>, eg <code>docker exec -it vrx-server-system bash</code></p>", "type": "rendered"}, "created_on": "2019-06-22T04:13:30.638186+00:00", "user": {"display_name": "Tyler Lum", "uuid": "{305d9368-23ba-4f72-b1d4-7d17d2a062d8}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D"}, "html": {"href": "https://bitbucket.org/%7B305d9368-23ba-4f72-b1d4-7d17d2a062d8%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5b96b66385af94340e7cabce/b8bb780f-62b7-47f8-9d03-ee65c7d17ad4/128"}}, "nickname": "tylerlum", "type": "user", "account_id": "5b96b66385af94340e7cabce"}, "updated_on": "2019-06-22T04:20:29.582177+00:00", "type": "pullrequest_comment", "id": 106686086}